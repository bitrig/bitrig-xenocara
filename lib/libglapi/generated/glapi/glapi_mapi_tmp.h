/* This file is automatically generated by mapi_abi.py.  Do not modify. */

#ifndef _GLAPI_TMP_H_
#define _GLAPI_TMP_H_
typedef int GLclampx;
#endif /* _GLAPI_TMP_H_ */

#ifdef MAPI_TMP_DEFINES
#define GL_GLEXT_PROTOTYPES
#include "GL/gl.h"
#include "GL/glext.h"

void APIENTRY shared_dispatch_stub_0(GLuint list, GLenum mode);
void APIENTRY shared_dispatch_stub_1(void);
void APIENTRY shared_dispatch_stub_2(GLuint list);
void APIENTRY shared_dispatch_stub_3(GLsizei n, GLenum type, const GLvoid *lists);
void APIENTRY shared_dispatch_stub_4(GLuint list, GLsizei range);
GLuint APIENTRY shared_dispatch_stub_5(GLsizei range);
void APIENTRY shared_dispatch_stub_6(GLuint base);
void APIENTRY shared_dispatch_stub_7(GLenum mode);
void APIENTRY shared_dispatch_stub_8(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void APIENTRY shared_dispatch_stub_9(GLbyte red, GLbyte green, GLbyte blue);
void APIENTRY shared_dispatch_stub_10(const GLbyte *v);
void APIENTRY shared_dispatch_stub_11(GLdouble red, GLdouble green, GLdouble blue);
void APIENTRY shared_dispatch_stub_12(const GLdouble *v);
void APIENTRY shared_dispatch_stub_13(GLfloat red, GLfloat green, GLfloat blue);
void APIENTRY shared_dispatch_stub_14(const GLfloat *v);
void APIENTRY shared_dispatch_stub_15(GLint red, GLint green, GLint blue);
void APIENTRY shared_dispatch_stub_16(const GLint *v);
void APIENTRY shared_dispatch_stub_17(GLshort red, GLshort green, GLshort blue);
void APIENTRY shared_dispatch_stub_18(const GLshort *v);
void APIENTRY shared_dispatch_stub_19(GLubyte red, GLubyte green, GLubyte blue);
void APIENTRY shared_dispatch_stub_20(const GLubyte *v);
void APIENTRY shared_dispatch_stub_21(GLuint red, GLuint green, GLuint blue);
void APIENTRY shared_dispatch_stub_22(const GLuint *v);
void APIENTRY shared_dispatch_stub_23(GLushort red, GLushort green, GLushort blue);
void APIENTRY shared_dispatch_stub_24(const GLushort *v);
void APIENTRY shared_dispatch_stub_25(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void APIENTRY shared_dispatch_stub_26(const GLbyte *v);
void APIENTRY shared_dispatch_stub_27(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void APIENTRY shared_dispatch_stub_28(const GLdouble *v);
void APIENTRY shared_dispatch_stub_29(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void APIENTRY shared_dispatch_stub_30(const GLfloat *v);
void APIENTRY shared_dispatch_stub_31(GLint red, GLint green, GLint blue, GLint alpha);
void APIENTRY shared_dispatch_stub_32(const GLint *v);
void APIENTRY shared_dispatch_stub_33(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void APIENTRY shared_dispatch_stub_34(const GLshort *v);
void APIENTRY shared_dispatch_stub_35(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void APIENTRY shared_dispatch_stub_36(const GLubyte *v);
void APIENTRY shared_dispatch_stub_37(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void APIENTRY shared_dispatch_stub_38(const GLuint *v);
void APIENTRY shared_dispatch_stub_39(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void APIENTRY shared_dispatch_stub_40(const GLushort *v);
void APIENTRY shared_dispatch_stub_41(GLboolean flag);
void APIENTRY shared_dispatch_stub_42(const GLboolean *flag);
void APIENTRY shared_dispatch_stub_43(void);
void APIENTRY shared_dispatch_stub_44(GLdouble c);
void APIENTRY shared_dispatch_stub_45(const GLdouble *c);
void APIENTRY shared_dispatch_stub_46(GLfloat c);
void APIENTRY shared_dispatch_stub_47(const GLfloat *c);
void APIENTRY shared_dispatch_stub_48(GLint c);
void APIENTRY shared_dispatch_stub_49(const GLint *c);
void APIENTRY shared_dispatch_stub_50(GLshort c);
void APIENTRY shared_dispatch_stub_51(const GLshort *c);
void APIENTRY shared_dispatch_stub_52(GLbyte nx, GLbyte ny, GLbyte nz);
void APIENTRY shared_dispatch_stub_53(const GLbyte *v);
void APIENTRY shared_dispatch_stub_54(GLdouble nx, GLdouble ny, GLdouble nz);
void APIENTRY shared_dispatch_stub_55(const GLdouble *v);
void APIENTRY shared_dispatch_stub_56(GLfloat nx, GLfloat ny, GLfloat nz);
void APIENTRY shared_dispatch_stub_57(const GLfloat *v);
void APIENTRY shared_dispatch_stub_58(GLint nx, GLint ny, GLint nz);
void APIENTRY shared_dispatch_stub_59(const GLint *v);
void APIENTRY shared_dispatch_stub_60(GLshort nx, GLshort ny, GLshort nz);
void APIENTRY shared_dispatch_stub_61(const GLshort *v);
void APIENTRY shared_dispatch_stub_62(GLdouble x, GLdouble y);
void APIENTRY shared_dispatch_stub_63(const GLdouble *v);
void APIENTRY shared_dispatch_stub_64(GLfloat x, GLfloat y);
void APIENTRY shared_dispatch_stub_65(const GLfloat *v);
void APIENTRY shared_dispatch_stub_66(GLint x, GLint y);
void APIENTRY shared_dispatch_stub_67(const GLint *v);
void APIENTRY shared_dispatch_stub_68(GLshort x, GLshort y);
void APIENTRY shared_dispatch_stub_69(const GLshort *v);
void APIENTRY shared_dispatch_stub_70(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_71(const GLdouble *v);
void APIENTRY shared_dispatch_stub_72(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_73(const GLfloat *v);
void APIENTRY shared_dispatch_stub_74(GLint x, GLint y, GLint z);
void APIENTRY shared_dispatch_stub_75(const GLint *v);
void APIENTRY shared_dispatch_stub_76(GLshort x, GLshort y, GLshort z);
void APIENTRY shared_dispatch_stub_77(const GLshort *v);
void APIENTRY shared_dispatch_stub_78(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_79(const GLdouble *v);
void APIENTRY shared_dispatch_stub_80(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_81(const GLfloat *v);
void APIENTRY shared_dispatch_stub_82(GLint x, GLint y, GLint z, GLint w);
void APIENTRY shared_dispatch_stub_83(const GLint *v);
void APIENTRY shared_dispatch_stub_84(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY shared_dispatch_stub_85(const GLshort *v);
void APIENTRY shared_dispatch_stub_86(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void APIENTRY shared_dispatch_stub_87(const GLdouble *v1, const GLdouble *v2);
void APIENTRY shared_dispatch_stub_88(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void APIENTRY shared_dispatch_stub_89(const GLfloat *v1, const GLfloat *v2);
void APIENTRY shared_dispatch_stub_90(GLint x1, GLint y1, GLint x2, GLint y2);
void APIENTRY shared_dispatch_stub_91(const GLint *v1, const GLint *v2);
void APIENTRY shared_dispatch_stub_92(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void APIENTRY shared_dispatch_stub_93(const GLshort *v1, const GLshort *v2);
void APIENTRY shared_dispatch_stub_94(GLdouble s);
void APIENTRY shared_dispatch_stub_95(const GLdouble *v);
void APIENTRY shared_dispatch_stub_96(GLfloat s);
void APIENTRY shared_dispatch_stub_97(const GLfloat *v);
void APIENTRY shared_dispatch_stub_98(GLint s);
void APIENTRY shared_dispatch_stub_99(const GLint *v);
void APIENTRY shared_dispatch_stub_100(GLshort s);
void APIENTRY shared_dispatch_stub_101(const GLshort *v);
void APIENTRY shared_dispatch_stub_102(GLdouble s, GLdouble t);
void APIENTRY shared_dispatch_stub_103(const GLdouble *v);
void APIENTRY shared_dispatch_stub_104(GLfloat s, GLfloat t);
void APIENTRY shared_dispatch_stub_105(const GLfloat *v);
void APIENTRY shared_dispatch_stub_106(GLint s, GLint t);
void APIENTRY shared_dispatch_stub_107(const GLint *v);
void APIENTRY shared_dispatch_stub_108(GLshort s, GLshort t);
void APIENTRY shared_dispatch_stub_109(const GLshort *v);
void APIENTRY shared_dispatch_stub_110(GLdouble s, GLdouble t, GLdouble r);
void APIENTRY shared_dispatch_stub_111(const GLdouble *v);
void APIENTRY shared_dispatch_stub_112(GLfloat s, GLfloat t, GLfloat r);
void APIENTRY shared_dispatch_stub_113(const GLfloat *v);
void APIENTRY shared_dispatch_stub_114(GLint s, GLint t, GLint r);
void APIENTRY shared_dispatch_stub_115(const GLint *v);
void APIENTRY shared_dispatch_stub_116(GLshort s, GLshort t, GLshort r);
void APIENTRY shared_dispatch_stub_117(const GLshort *v);
void APIENTRY shared_dispatch_stub_118(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void APIENTRY shared_dispatch_stub_119(const GLdouble *v);
void APIENTRY shared_dispatch_stub_120(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void APIENTRY shared_dispatch_stub_121(const GLfloat *v);
void APIENTRY shared_dispatch_stub_122(GLint s, GLint t, GLint r, GLint q);
void APIENTRY shared_dispatch_stub_123(const GLint *v);
void APIENTRY shared_dispatch_stub_124(GLshort s, GLshort t, GLshort r, GLshort q);
void APIENTRY shared_dispatch_stub_125(const GLshort *v);
void APIENTRY shared_dispatch_stub_126(GLdouble x, GLdouble y);
void APIENTRY shared_dispatch_stub_127(const GLdouble *v);
void APIENTRY shared_dispatch_stub_128(GLfloat x, GLfloat y);
void APIENTRY shared_dispatch_stub_129(const GLfloat *v);
void APIENTRY shared_dispatch_stub_130(GLint x, GLint y);
void APIENTRY shared_dispatch_stub_131(const GLint *v);
void APIENTRY shared_dispatch_stub_132(GLshort x, GLshort y);
void APIENTRY shared_dispatch_stub_133(const GLshort *v);
void APIENTRY shared_dispatch_stub_134(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_135(const GLdouble *v);
void APIENTRY shared_dispatch_stub_136(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_137(const GLfloat *v);
void APIENTRY shared_dispatch_stub_138(GLint x, GLint y, GLint z);
void APIENTRY shared_dispatch_stub_139(const GLint *v);
void APIENTRY shared_dispatch_stub_140(GLshort x, GLshort y, GLshort z);
void APIENTRY shared_dispatch_stub_141(const GLshort *v);
void APIENTRY shared_dispatch_stub_142(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_143(const GLdouble *v);
void APIENTRY shared_dispatch_stub_144(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_145(const GLfloat *v);
void APIENTRY shared_dispatch_stub_146(GLint x, GLint y, GLint z, GLint w);
void APIENTRY shared_dispatch_stub_147(const GLint *v);
void APIENTRY shared_dispatch_stub_148(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY shared_dispatch_stub_149(const GLshort *v);
void APIENTRY shared_dispatch_stub_150(GLenum plane, const GLdouble *equation);
void APIENTRY shared_dispatch_stub_151(GLenum face, GLenum mode);
void APIENTRY shared_dispatch_stub_152(GLenum mode);
void APIENTRY shared_dispatch_stub_153(GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_154(GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_155(GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_156(GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_157(GLenum mode);
void APIENTRY shared_dispatch_stub_158(GLenum target, GLenum mode);
void APIENTRY shared_dispatch_stub_159(GLenum light, GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_160(GLenum light, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_161(GLenum light, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_162(GLenum light, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_163(GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_164(GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_165(GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_166(GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_167(GLint factor, GLushort pattern);
void APIENTRY shared_dispatch_stub_168(GLfloat width);
void APIENTRY shared_dispatch_stub_169(GLenum face, GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_170(GLenum face, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_171(GLenum face, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_172(GLenum face, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_173(GLfloat size);
void APIENTRY shared_dispatch_stub_174(GLenum face, GLenum mode);
void APIENTRY shared_dispatch_stub_175(const GLubyte *mask);
void APIENTRY shared_dispatch_stub_176(GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_177(GLenum mode);
void APIENTRY shared_dispatch_stub_178(GLenum target, GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_179(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_180(GLenum target, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_181(GLenum target, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_182(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_183(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_184(GLenum target, GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_185(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_186(GLenum target, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_187(GLenum target, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_188(GLenum coord, GLenum pname, GLdouble param);
void APIENTRY shared_dispatch_stub_189(GLenum coord, GLenum pname, const GLdouble *params);
void APIENTRY shared_dispatch_stub_190(GLenum coord, GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_191(GLenum coord, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_192(GLenum coord, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_193(GLenum coord, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_194(GLsizei size, GLenum type, GLfloat *buffer);
void APIENTRY shared_dispatch_stub_195(GLsizei size, GLuint *buffer);
GLint APIENTRY shared_dispatch_stub_196(GLenum mode);
void APIENTRY shared_dispatch_stub_197(void);
void APIENTRY shared_dispatch_stub_198(GLuint name);
void APIENTRY shared_dispatch_stub_199(GLfloat token);
void APIENTRY shared_dispatch_stub_200(void);
void APIENTRY shared_dispatch_stub_201(GLuint name);
void APIENTRY shared_dispatch_stub_202(GLenum mode);
void APIENTRY shared_dispatch_stub_203(GLbitfield mask);
void APIENTRY shared_dispatch_stub_204(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void APIENTRY shared_dispatch_stub_205(GLfloat c);
void APIENTRY shared_dispatch_stub_206(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void APIENTRY shared_dispatch_stub_207(GLint s);
void APIENTRY shared_dispatch_stub_208(GLclampd depth);
void APIENTRY shared_dispatch_stub_209(GLuint mask);
void APIENTRY shared_dispatch_stub_210(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void APIENTRY shared_dispatch_stub_211(GLboolean flag);
void APIENTRY shared_dispatch_stub_212(GLuint mask);
void APIENTRY shared_dispatch_stub_213(GLenum op, GLfloat value);
void APIENTRY shared_dispatch_stub_214(GLenum cap);
void APIENTRY shared_dispatch_stub_215(GLenum cap);
void APIENTRY shared_dispatch_stub_216(void);
void APIENTRY shared_dispatch_stub_217(void);
void APIENTRY shared_dispatch_stub_218(void);
void APIENTRY shared_dispatch_stub_219(GLbitfield mask);
void APIENTRY shared_dispatch_stub_220(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void APIENTRY shared_dispatch_stub_221(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void APIENTRY shared_dispatch_stub_222(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void APIENTRY shared_dispatch_stub_223(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void APIENTRY shared_dispatch_stub_224(GLint un, GLdouble u1, GLdouble u2);
void APIENTRY shared_dispatch_stub_225(GLint un, GLfloat u1, GLfloat u2);
void APIENTRY shared_dispatch_stub_226(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void APIENTRY shared_dispatch_stub_227(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void APIENTRY shared_dispatch_stub_228(GLdouble u);
void APIENTRY shared_dispatch_stub_229(const GLdouble *u);
void APIENTRY shared_dispatch_stub_230(GLfloat u);
void APIENTRY shared_dispatch_stub_231(const GLfloat *u);
void APIENTRY shared_dispatch_stub_232(GLdouble u, GLdouble v);
void APIENTRY shared_dispatch_stub_233(const GLdouble *u);
void APIENTRY shared_dispatch_stub_234(GLfloat u, GLfloat v);
void APIENTRY shared_dispatch_stub_235(const GLfloat *u);
void APIENTRY shared_dispatch_stub_236(GLenum mode, GLint i1, GLint i2);
void APIENTRY shared_dispatch_stub_237(GLint i);
void APIENTRY shared_dispatch_stub_238(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void APIENTRY shared_dispatch_stub_239(GLint i, GLint j);
void APIENTRY shared_dispatch_stub_240(GLenum func, GLclampf ref);
void APIENTRY shared_dispatch_stub_241(GLenum sfactor, GLenum dfactor);
void APIENTRY shared_dispatch_stub_242(GLenum opcode);
void APIENTRY shared_dispatch_stub_243(GLenum func, GLint ref, GLuint mask);
void APIENTRY shared_dispatch_stub_244(GLenum fail, GLenum zfail, GLenum zpass);
void APIENTRY shared_dispatch_stub_245(GLenum func);
void APIENTRY shared_dispatch_stub_246(GLfloat xfactor, GLfloat yfactor);
void APIENTRY shared_dispatch_stub_247(GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_248(GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_249(GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_250(GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_251(GLenum map, GLsizei mapsize, const GLfloat *values);
void APIENTRY shared_dispatch_stub_252(GLenum map, GLsizei mapsize, const GLuint *values);
void APIENTRY shared_dispatch_stub_253(GLenum map, GLsizei mapsize, const GLushort *values);
void APIENTRY shared_dispatch_stub_254(GLenum mode);
void APIENTRY shared_dispatch_stub_255(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void APIENTRY shared_dispatch_stub_256(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void APIENTRY shared_dispatch_stub_257(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_258(GLenum pname, GLboolean *params);
void APIENTRY shared_dispatch_stub_259(GLenum plane, GLdouble *equation);
void APIENTRY shared_dispatch_stub_260(GLenum pname, GLdouble *params);
GLenum APIENTRY shared_dispatch_stub_261(void);
void APIENTRY shared_dispatch_stub_262(GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_263(GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_264(GLenum light, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_265(GLenum light, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_266(GLenum target, GLenum query, GLdouble *v);
void APIENTRY shared_dispatch_stub_267(GLenum target, GLenum query, GLfloat *v);
void APIENTRY shared_dispatch_stub_268(GLenum target, GLenum query, GLint *v);
void APIENTRY shared_dispatch_stub_269(GLenum face, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_270(GLenum face, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_271(GLenum map, GLfloat *values);
void APIENTRY shared_dispatch_stub_272(GLenum map, GLuint *values);
void APIENTRY shared_dispatch_stub_273(GLenum map, GLushort *values);
void APIENTRY shared_dispatch_stub_274(GLubyte *mask);
const GLubyte * APIENTRY shared_dispatch_stub_275(GLenum name);
void APIENTRY shared_dispatch_stub_276(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_277(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_278(GLenum coord, GLenum pname, GLdouble *params);
void APIENTRY shared_dispatch_stub_279(GLenum coord, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_280(GLenum coord, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_281(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
void APIENTRY shared_dispatch_stub_282(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_283(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_284(GLenum target, GLint level, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_285(GLenum target, GLint level, GLenum pname, GLint *params);
GLboolean APIENTRY shared_dispatch_stub_286(GLenum cap);
GLboolean APIENTRY shared_dispatch_stub_287(GLuint list);
void APIENTRY shared_dispatch_stub_288(GLclampd zNear, GLclampd zFar);
void APIENTRY shared_dispatch_stub_289(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void APIENTRY shared_dispatch_stub_290(void);
void APIENTRY shared_dispatch_stub_291(const GLfloat *m);
void APIENTRY shared_dispatch_stub_292(const GLdouble *m);
void APIENTRY shared_dispatch_stub_293(GLenum mode);
void APIENTRY shared_dispatch_stub_294(const GLfloat *m);
void APIENTRY shared_dispatch_stub_295(const GLdouble *m);
void APIENTRY shared_dispatch_stub_296(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void APIENTRY shared_dispatch_stub_297(void);
void APIENTRY shared_dispatch_stub_298(void);
void APIENTRY shared_dispatch_stub_299(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_300(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_301(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_302(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_303(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_304(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_305(GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_306(GLint i);
void APIENTRY shared_dispatch_stub_307(GLenum target, GLuint texture);
void APIENTRY shared_dispatch_stub_308(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_309(GLenum array);
void APIENTRY shared_dispatch_stub_310(GLenum mode, GLint first, GLsizei count);
void APIENTRY shared_dispatch_stub_311(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void APIENTRY shared_dispatch_stub_312(GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_313(GLenum array);
void APIENTRY shared_dispatch_stub_314(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_315(GLubyte c);
void APIENTRY shared_dispatch_stub_316(const GLubyte *c);
void APIENTRY shared_dispatch_stub_317(GLenum format, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_318(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_319(GLfloat factor, GLfloat units);
void APIENTRY shared_dispatch_stub_320(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_321(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLboolean APIENTRY shared_dispatch_stub_322(GLsizei n, const GLuint *textures, GLboolean *residences);
void APIENTRY shared_dispatch_stub_323(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void APIENTRY shared_dispatch_stub_324(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void APIENTRY shared_dispatch_stub_325(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void APIENTRY shared_dispatch_stub_326(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_327(GLsizei n, const GLuint *textures);
void APIENTRY shared_dispatch_stub_328(GLsizei n, GLuint *textures);
void APIENTRY shared_dispatch_stub_329(GLenum pname, GLvoid **params);
GLboolean APIENTRY shared_dispatch_stub_330(GLuint texture);
void APIENTRY shared_dispatch_stub_331(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void APIENTRY shared_dispatch_stub_332(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_333(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_334(void);
void APIENTRY shared_dispatch_stub_335(GLbitfield mask);
void APIENTRY shared_dispatch_stub_336(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void APIENTRY shared_dispatch_stub_337(GLenum mode);
void APIENTRY shared_dispatch_stub_338(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void APIENTRY shared_dispatch_stub_339(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
void APIENTRY shared_dispatch_stub_340(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_341(GLenum target, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_342(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void APIENTRY shared_dispatch_stub_343(GLenum target, GLenum format, GLenum type, GLvoid *table);
void APIENTRY shared_dispatch_stub_344(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_345(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_346(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY shared_dispatch_stub_347(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void APIENTRY shared_dispatch_stub_348(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
void APIENTRY shared_dispatch_stub_349(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
void APIENTRY shared_dispatch_stub_350(GLenum target, GLenum pname, GLfloat params);
void APIENTRY shared_dispatch_stub_351(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_352(GLenum target, GLenum pname, GLint params);
void APIENTRY shared_dispatch_stub_353(GLenum target, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_354(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void APIENTRY shared_dispatch_stub_355(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_356(GLenum target, GLenum format, GLenum type, GLvoid *image);
void APIENTRY shared_dispatch_stub_357(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_358(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_359(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
void APIENTRY shared_dispatch_stub_360(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
void APIENTRY shared_dispatch_stub_361(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void APIENTRY shared_dispatch_stub_362(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_363(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_364(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void APIENTRY shared_dispatch_stub_365(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_366(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_367(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void APIENTRY shared_dispatch_stub_368(GLenum target, GLenum internalformat, GLboolean sink);
void APIENTRY shared_dispatch_stub_369(GLenum target);
void APIENTRY shared_dispatch_stub_370(GLenum target);
void APIENTRY shared_dispatch_stub_371(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_372(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY shared_dispatch_stub_373(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_374(GLenum texture);
void APIENTRY shared_dispatch_stub_375(GLenum texture);
void APIENTRY shared_dispatch_stub_376(GLenum target, GLdouble s);
void APIENTRY shared_dispatch_stub_377(GLenum target, const GLdouble *v);
void APIENTRY shared_dispatch_stub_378(GLenum target, GLfloat s);
void APIENTRY shared_dispatch_stub_379(GLenum target, const GLfloat *v);
void APIENTRY shared_dispatch_stub_380(GLenum target, GLint s);
void APIENTRY shared_dispatch_stub_381(GLenum target, const GLint *v);
void APIENTRY shared_dispatch_stub_382(GLenum target, GLshort s);
void APIENTRY shared_dispatch_stub_383(GLenum target, const GLshort *v);
void APIENTRY shared_dispatch_stub_384(GLenum target, GLdouble s, GLdouble t);
void APIENTRY shared_dispatch_stub_385(GLenum target, const GLdouble *v);
void APIENTRY shared_dispatch_stub_386(GLenum target, GLfloat s, GLfloat t);
void APIENTRY shared_dispatch_stub_387(GLenum target, const GLfloat *v);
void APIENTRY shared_dispatch_stub_388(GLenum target, GLint s, GLint t);
void APIENTRY shared_dispatch_stub_389(GLenum target, const GLint *v);
void APIENTRY shared_dispatch_stub_390(GLenum target, GLshort s, GLshort t);
void APIENTRY shared_dispatch_stub_391(GLenum target, const GLshort *v);
void APIENTRY shared_dispatch_stub_392(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void APIENTRY shared_dispatch_stub_393(GLenum target, const GLdouble *v);
void APIENTRY shared_dispatch_stub_394(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void APIENTRY shared_dispatch_stub_395(GLenum target, const GLfloat *v);
void APIENTRY shared_dispatch_stub_396(GLenum target, GLint s, GLint t, GLint r);
void APIENTRY shared_dispatch_stub_397(GLenum target, const GLint *v);
void APIENTRY shared_dispatch_stub_398(GLenum target, GLshort s, GLshort t, GLshort r);
void APIENTRY shared_dispatch_stub_399(GLenum target, const GLshort *v);
void APIENTRY shared_dispatch_stub_400(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void APIENTRY shared_dispatch_stub_401(GLenum target, const GLdouble *v);
void APIENTRY shared_dispatch_stub_402(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void APIENTRY shared_dispatch_stub_403(GLenum target, const GLfloat *v);
void APIENTRY shared_dispatch_stub_404(GLenum target, GLint s, GLint t, GLint r, GLint q);
void APIENTRY shared_dispatch_stub_405(GLenum target, const GLint *v);
void APIENTRY shared_dispatch_stub_406(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void APIENTRY shared_dispatch_stub_407(GLenum target, const GLshort *v);
void APIENTRY shared_dispatch_stub_408(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY shared_dispatch_stub_409(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY shared_dispatch_stub_410(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY shared_dispatch_stub_411(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY shared_dispatch_stub_412(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY shared_dispatch_stub_413(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY shared_dispatch_stub_414(GLenum target, GLint level, GLvoid *img);
void APIENTRY shared_dispatch_stub_415(const GLdouble *m);
void APIENTRY shared_dispatch_stub_416(const GLfloat *m);
void APIENTRY shared_dispatch_stub_417(const GLdouble *m);
void APIENTRY shared_dispatch_stub_418(const GLfloat *m);
void APIENTRY shared_dispatch_stub_419(GLclampf value, GLboolean invert);
void APIENTRY shared_dispatch_stub_420(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void APIENTRY shared_dispatch_stub_421(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_422(GLdouble coord);
void APIENTRY shared_dispatch_stub_423(const GLdouble *coord);
void APIENTRY shared_dispatch_stub_424(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
void APIENTRY shared_dispatch_stub_425(GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_426(GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_427(GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_428(GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_429(GLbyte red, GLbyte green, GLbyte blue);
void APIENTRY shared_dispatch_stub_430(const GLbyte *v);
void APIENTRY shared_dispatch_stub_431(GLdouble red, GLdouble green, GLdouble blue);
void APIENTRY shared_dispatch_stub_432(const GLdouble *v);
void APIENTRY shared_dispatch_stub_433(GLint red, GLint green, GLint blue);
void APIENTRY shared_dispatch_stub_434(const GLint *v);
void APIENTRY shared_dispatch_stub_435(GLshort red, GLshort green, GLshort blue);
void APIENTRY shared_dispatch_stub_436(const GLshort *v);
void APIENTRY shared_dispatch_stub_437(GLubyte red, GLubyte green, GLubyte blue);
void APIENTRY shared_dispatch_stub_438(const GLubyte *v);
void APIENTRY shared_dispatch_stub_439(GLuint red, GLuint green, GLuint blue);
void APIENTRY shared_dispatch_stub_440(const GLuint *v);
void APIENTRY shared_dispatch_stub_441(GLushort red, GLushort green, GLushort blue);
void APIENTRY shared_dispatch_stub_442(const GLushort *v);
void APIENTRY shared_dispatch_stub_443(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_444(GLdouble x, GLdouble y);
void APIENTRY shared_dispatch_stub_445(const GLdouble *v);
void APIENTRY shared_dispatch_stub_446(GLfloat x, GLfloat y);
void APIENTRY shared_dispatch_stub_447(const GLfloat *v);
void APIENTRY shared_dispatch_stub_448(GLint x, GLint y);
void APIENTRY shared_dispatch_stub_449(const GLint *v);
void APIENTRY shared_dispatch_stub_450(GLshort x, GLshort y);
void APIENTRY shared_dispatch_stub_451(const GLshort *v);
void APIENTRY shared_dispatch_stub_452(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_453(const GLdouble *v);
void APIENTRY shared_dispatch_stub_454(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_455(const GLfloat *v);
void APIENTRY shared_dispatch_stub_456(GLint x, GLint y, GLint z);
void APIENTRY shared_dispatch_stub_457(const GLint *v);
void APIENTRY shared_dispatch_stub_458(GLshort x, GLshort y, GLshort z);
void APIENTRY shared_dispatch_stub_459(const GLshort *v);
void APIENTRY shared_dispatch_stub_460(GLenum target, GLuint id);
void APIENTRY shared_dispatch_stub_461(GLenum target, GLuint buffer);
void APIENTRY shared_dispatch_stub_462(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
void APIENTRY shared_dispatch_stub_463(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void APIENTRY shared_dispatch_stub_464(GLsizei n, const GLuint *buffer);
void APIENTRY shared_dispatch_stub_465(GLsizei n, const GLuint *ids);
void APIENTRY shared_dispatch_stub_466(GLenum target);
void APIENTRY shared_dispatch_stub_467(GLsizei n, GLuint *buffer);
void APIENTRY shared_dispatch_stub_468(GLsizei n, GLuint *ids);
void APIENTRY shared_dispatch_stub_469(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_470(GLenum target, GLenum pname, GLvoid **params);
void APIENTRY shared_dispatch_stub_471(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
void APIENTRY shared_dispatch_stub_472(GLuint id, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_473(GLuint id, GLenum pname, GLuint *params);
void APIENTRY shared_dispatch_stub_474(GLenum target, GLenum pname, GLint *params);
GLboolean APIENTRY shared_dispatch_stub_475(GLuint buffer);
GLboolean APIENTRY shared_dispatch_stub_476(GLuint id);
GLvoid * APIENTRY shared_dispatch_stub_477(GLenum target, GLenum access);
GLboolean APIENTRY shared_dispatch_stub_478(GLenum target);
void APIENTRY shared_dispatch_stub_479(GLuint program, GLuint shader);
void APIENTRY shared_dispatch_stub_480(GLuint program, GLuint index, const GLchar *name);
void APIENTRY shared_dispatch_stub_481(GLenum modeRGB, GLenum modeA);
void APIENTRY shared_dispatch_stub_482(GLuint shader);
GLuint APIENTRY shared_dispatch_stub_483(void);
GLuint APIENTRY shared_dispatch_stub_484(GLenum type);
void APIENTRY shared_dispatch_stub_485(GLuint program);
void APIENTRY shared_dispatch_stub_486(GLuint program);
void APIENTRY shared_dispatch_stub_487(GLuint program, GLuint shader);
void APIENTRY shared_dispatch_stub_488(GLuint index);
void APIENTRY shared_dispatch_stub_489(GLsizei n, const GLenum *bufs);
void APIENTRY shared_dispatch_stub_490(GLuint index);
void APIENTRY shared_dispatch_stub_491(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void APIENTRY shared_dispatch_stub_492(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void APIENTRY shared_dispatch_stub_493(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
GLint APIENTRY shared_dispatch_stub_494(GLuint program, const GLchar *name);
void APIENTRY shared_dispatch_stub_495(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void APIENTRY shared_dispatch_stub_496(GLuint program, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_497(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void APIENTRY shared_dispatch_stub_498(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void APIENTRY shared_dispatch_stub_499(GLuint shader, GLenum pname, GLint *params);
GLint APIENTRY shared_dispatch_stub_500(GLuint program, const GLchar *name);
void APIENTRY shared_dispatch_stub_501(GLuint program, GLint location, GLfloat *params);
void APIENTRY shared_dispatch_stub_502(GLuint program, GLint location, GLint *params);
void APIENTRY shared_dispatch_stub_503(GLuint index, GLenum pname, GLvoid **pointer);
void APIENTRY shared_dispatch_stub_504(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY shared_dispatch_stub_505(GLuint index, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_506(GLuint index, GLenum pname, GLint *params);
GLboolean APIENTRY shared_dispatch_stub_507(GLuint program);
GLboolean APIENTRY shared_dispatch_stub_508(GLuint shader);
void APIENTRY shared_dispatch_stub_509(GLuint program);
void APIENTRY shared_dispatch_stub_510(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length);
void APIENTRY shared_dispatch_stub_511(GLenum face, GLenum func, GLint ref, GLuint mask);
void APIENTRY shared_dispatch_stub_512(GLenum face, GLuint mask);
void APIENTRY shared_dispatch_stub_513(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass);
void APIENTRY shared_dispatch_stub_514(GLint location, GLfloat v0);
void APIENTRY shared_dispatch_stub_515(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY shared_dispatch_stub_516(GLint location, GLint v0);
void APIENTRY shared_dispatch_stub_517(GLint location, GLsizei count, const GLint *value);
void APIENTRY shared_dispatch_stub_518(GLint location, GLfloat v0, GLfloat v1);
void APIENTRY shared_dispatch_stub_519(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY shared_dispatch_stub_520(GLint location, GLint v0, GLint v1);
void APIENTRY shared_dispatch_stub_521(GLint location, GLsizei count, const GLint *value);
void APIENTRY shared_dispatch_stub_522(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void APIENTRY shared_dispatch_stub_523(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY shared_dispatch_stub_524(GLint location, GLint v0, GLint v1, GLint v2);
void APIENTRY shared_dispatch_stub_525(GLint location, GLsizei count, const GLint *value);
void APIENTRY shared_dispatch_stub_526(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void APIENTRY shared_dispatch_stub_527(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY shared_dispatch_stub_528(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void APIENTRY shared_dispatch_stub_529(GLint location, GLsizei count, const GLint *value);
void APIENTRY shared_dispatch_stub_530(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_531(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_532(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_533(GLuint program);
void APIENTRY shared_dispatch_stub_534(GLuint program);
void APIENTRY shared_dispatch_stub_535(GLuint index, GLdouble x);
void APIENTRY shared_dispatch_stub_536(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_537(GLuint index, GLshort x);
void APIENTRY shared_dispatch_stub_538(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_539(GLuint index, GLdouble x, GLdouble y);
void APIENTRY shared_dispatch_stub_540(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_541(GLuint index, GLshort x, GLshort y);
void APIENTRY shared_dispatch_stub_542(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_543(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_544(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_545(GLuint index, GLshort x, GLshort y, GLshort z);
void APIENTRY shared_dispatch_stub_546(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_547(GLuint index, const GLbyte *v);
void APIENTRY shared_dispatch_stub_548(GLuint index, const GLint *v);
void APIENTRY shared_dispatch_stub_549(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_550(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void APIENTRY shared_dispatch_stub_551(GLuint index, const GLubyte *v);
void APIENTRY shared_dispatch_stub_552(GLuint index, const GLuint *v);
void APIENTRY shared_dispatch_stub_553(GLuint index, const GLushort *v);
void APIENTRY shared_dispatch_stub_554(GLuint index, const GLbyte *v);
void APIENTRY shared_dispatch_stub_555(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_556(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_557(GLuint index, const GLint *v);
void APIENTRY shared_dispatch_stub_558(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY shared_dispatch_stub_559(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_560(GLuint index, const GLubyte *v);
void APIENTRY shared_dispatch_stub_561(GLuint index, const GLuint *v);
void APIENTRY shared_dispatch_stub_562(GLuint index, const GLushort *v);
void APIENTRY shared_dispatch_stub_563(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_564(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_565(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_566(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_567(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_568(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_569(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY shared_dispatch_stub_570(GLuint query, GLenum mode);
void APIENTRY shared_dispatch_stub_571(GLenum mode);
void APIENTRY shared_dispatch_stub_572(GLenum target, GLuint index, GLuint buffer);
void APIENTRY shared_dispatch_stub_573(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY shared_dispatch_stub_574(GLuint program, GLuint colorNumber, const GLchar *name);
void APIENTRY shared_dispatch_stub_575(GLenum target, GLenum clamp);
void APIENTRY shared_dispatch_stub_576(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void APIENTRY shared_dispatch_stub_577(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void APIENTRY shared_dispatch_stub_578(GLenum buffer, GLint drawbuffer, const GLint *value);
void APIENTRY shared_dispatch_stub_579(GLenum buffer, GLint drawbuffer, const GLuint *value);
void APIENTRY shared_dispatch_stub_580(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void APIENTRY shared_dispatch_stub_581(GLenum target, GLuint index);
void APIENTRY shared_dispatch_stub_582(GLenum target, GLuint index);
void APIENTRY shared_dispatch_stub_583(void);
void APIENTRY shared_dispatch_stub_584(void);
void APIENTRY shared_dispatch_stub_585(GLenum value, GLuint index, GLboolean *data);
GLint APIENTRY shared_dispatch_stub_586(GLuint program, const GLchar *name);
void APIENTRY shared_dispatch_stub_587(GLenum value, GLuint index, GLint *data);
const GLubyte * APIENTRY shared_dispatch_stub_588(GLenum name, GLuint index);
void APIENTRY shared_dispatch_stub_589(GLenum target, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_590(GLenum target, GLenum pname, GLuint *params);
void APIENTRY shared_dispatch_stub_591(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void APIENTRY shared_dispatch_stub_592(GLuint program, GLint location, GLuint *params);
void APIENTRY shared_dispatch_stub_593(GLuint index, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_594(GLuint index, GLenum pname, GLuint *params);
GLboolean APIENTRY shared_dispatch_stub_595(GLenum target, GLuint index);
void APIENTRY shared_dispatch_stub_596(GLenum target, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_597(GLenum target, GLenum pname, const GLuint *params);
void APIENTRY shared_dispatch_stub_598(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode);
void APIENTRY shared_dispatch_stub_599(GLint location, GLuint x);
void APIENTRY shared_dispatch_stub_600(GLint location, GLsizei count, const GLuint *value);
void APIENTRY shared_dispatch_stub_601(GLint location, GLuint x, GLuint y);
void APIENTRY shared_dispatch_stub_602(GLint location, GLsizei count, const GLuint *value);
void APIENTRY shared_dispatch_stub_603(GLint location, GLuint x, GLuint y, GLuint z);
void APIENTRY shared_dispatch_stub_604(GLint location, GLsizei count, const GLuint *value);
void APIENTRY shared_dispatch_stub_605(GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void APIENTRY shared_dispatch_stub_606(GLint location, GLsizei count, const GLuint *value);
void APIENTRY shared_dispatch_stub_607(GLuint index, const GLint *v);
void APIENTRY shared_dispatch_stub_608(GLuint index, const GLuint *v);
void APIENTRY shared_dispatch_stub_609(GLuint index, const GLbyte *v);
void APIENTRY shared_dispatch_stub_610(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_611(GLuint index, const GLubyte *v);
void APIENTRY shared_dispatch_stub_612(GLuint index, const GLushort *v);
void APIENTRY shared_dispatch_stub_613(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_614(GLuint index);
void APIENTRY shared_dispatch_stub_615(GLenum target, GLenum internalFormat, GLuint buffer);
void APIENTRY shared_dispatch_stub_616(GLenum target, GLenum attachment, GLuint texture, GLint level);
void APIENTRY shared_dispatch_stub_617(GLenum target, GLenum pname, GLint64 *params);
void APIENTRY shared_dispatch_stub_618(GLenum cap, GLuint index, GLint64 *data);
void APIENTRY shared_dispatch_stub_619(GLuint index, GLuint divisor);
void APIENTRY shared_dispatch_stub_620(GLenum target, GLuint program);
void APIENTRY shared_dispatch_stub_621(GLsizei n, const GLuint *programs);
void APIENTRY shared_dispatch_stub_622(GLsizei n, GLuint *programs);
void APIENTRY shared_dispatch_stub_623(GLenum target, GLuint index, GLdouble *params);
void APIENTRY shared_dispatch_stub_624(GLenum target, GLuint index, GLfloat *params);
void APIENTRY shared_dispatch_stub_625(GLenum target, GLuint index, GLdouble *params);
void APIENTRY shared_dispatch_stub_626(GLenum target, GLuint index, GLfloat *params);
void APIENTRY shared_dispatch_stub_627(GLenum target, GLenum pname, GLvoid *string);
void APIENTRY shared_dispatch_stub_628(GLenum target, GLenum pname, GLint *params);
GLboolean APIENTRY shared_dispatch_stub_629(GLuint program);
void APIENTRY shared_dispatch_stub_630(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_631(GLenum target, GLuint index, const GLdouble *params);
void APIENTRY shared_dispatch_stub_632(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_633(GLenum target, GLuint index, const GLfloat *params);
void APIENTRY shared_dispatch_stub_634(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_635(GLenum target, GLuint index, const GLdouble *params);
void APIENTRY shared_dispatch_stub_636(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_637(GLenum target, GLuint index, const GLfloat *params);
void APIENTRY shared_dispatch_stub_638(GLenum target, GLenum format, GLsizei len, const GLvoid *string);
void APIENTRY shared_dispatch_stub_639(GLuint index, GLfloat x);
void APIENTRY shared_dispatch_stub_640(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_641(GLuint index, GLfloat x, GLfloat y);
void APIENTRY shared_dispatch_stub_642(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_643(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_644(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_645(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_646(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_647(GLhandleARB containerObj, GLhandleARB obj);
GLhandleARB APIENTRY shared_dispatch_stub_648(void);
GLhandleARB APIENTRY shared_dispatch_stub_649(GLenum shaderType);
void APIENTRY shared_dispatch_stub_650(GLhandleARB obj);
void APIENTRY shared_dispatch_stub_651(GLhandleARB containerObj, GLhandleARB attachedObj);
void APIENTRY shared_dispatch_stub_652(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog);
GLhandleARB APIENTRY shared_dispatch_stub_653(GLenum pname);
void APIENTRY shared_dispatch_stub_654(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
void APIENTRY shared_dispatch_stub_655(GLhandleARB obj, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_656(GLhandleARB obj, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_657(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void APIENTRY shared_dispatch_stub_658(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
void APIENTRY shared_dispatch_stub_659(GLenum target, GLuint framebuffer);
void APIENTRY shared_dispatch_stub_660(GLenum target, GLuint renderbuffer);
void APIENTRY shared_dispatch_stub_661(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum APIENTRY shared_dispatch_stub_662(GLenum target);
void APIENTRY shared_dispatch_stub_663(GLsizei n, const GLuint *framebuffers);
void APIENTRY shared_dispatch_stub_664(GLsizei n, const GLuint *renderbuffers);
void APIENTRY shared_dispatch_stub_665(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void APIENTRY shared_dispatch_stub_666(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void APIENTRY shared_dispatch_stub_667(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void APIENTRY shared_dispatch_stub_668(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void APIENTRY shared_dispatch_stub_669(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void APIENTRY shared_dispatch_stub_670(GLsizei n, GLuint *framebuffers);
void APIENTRY shared_dispatch_stub_671(GLsizei n, GLuint *renderbuffers);
void APIENTRY shared_dispatch_stub_672(GLenum target);
void APIENTRY shared_dispatch_stub_673(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_674(GLenum target, GLenum pname, GLint *params);
GLboolean APIENTRY shared_dispatch_stub_675(GLuint framebuffer);
GLboolean APIENTRY shared_dispatch_stub_676(GLuint renderbuffer);
void APIENTRY shared_dispatch_stub_677(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_678(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_679(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
void APIENTRY shared_dispatch_stub_680(GLenum target, GLintptr offset, GLsizeiptr length);
GLvoid * APIENTRY shared_dispatch_stub_681(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void APIENTRY shared_dispatch_stub_682(GLuint array);
void APIENTRY shared_dispatch_stub_683(GLsizei n, const GLuint *arrays);
void APIENTRY shared_dispatch_stub_684(GLsizei n, GLuint *arrays);
GLboolean APIENTRY shared_dispatch_stub_685(GLuint array);
void APIENTRY shared_dispatch_stub_686(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void APIENTRY shared_dispatch_stub_687(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_688(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void APIENTRY shared_dispatch_stub_689(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLuint APIENTRY shared_dispatch_stub_690(GLuint program, const GLchar *uniformBlockName);
void APIENTRY shared_dispatch_stub_691(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices);
void APIENTRY shared_dispatch_stub_692(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void APIENTRY shared_dispatch_stub_693(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLenum APIENTRY shared_dispatch_stub_694(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY shared_dispatch_stub_695(GLsync sync);
GLsync APIENTRY shared_dispatch_stub_696(GLenum condition, GLbitfield flags);
void APIENTRY shared_dispatch_stub_697(GLenum pname, GLint64 *params);
void APIENTRY shared_dispatch_stub_698(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLboolean APIENTRY shared_dispatch_stub_699(GLsync sync);
void APIENTRY shared_dispatch_stub_700(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY shared_dispatch_stub_701(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void APIENTRY shared_dispatch_stub_702(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
void APIENTRY shared_dispatch_stub_703(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void APIENTRY shared_dispatch_stub_704(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex);
void APIENTRY shared_dispatch_stub_705(GLenum mode);
void APIENTRY shared_dispatch_stub_706(GLenum pname, GLuint index, GLfloat *val);
void APIENTRY shared_dispatch_stub_707(GLuint index, GLbitfield mask);
void APIENTRY shared_dispatch_stub_708(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY shared_dispatch_stub_709(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void APIENTRY shared_dispatch_stub_710(GLuint buf, GLenum modeRGB, GLenum modeA);
void APIENTRY shared_dispatch_stub_711(GLuint buf, GLenum mode);
void APIENTRY shared_dispatch_stub_712(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA);
void APIENTRY shared_dispatch_stub_713(GLuint buf, GLenum src, GLenum dst);
void APIENTRY shared_dispatch_stub_714(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLint APIENTRY shared_dispatch_stub_715(GLuint program, const GLchar *name);
void APIENTRY shared_dispatch_stub_716(GLuint unit, GLuint sampler);
void APIENTRY shared_dispatch_stub_717(GLsizei count, const GLuint *samplers);
void APIENTRY shared_dispatch_stub_718(GLsizei count, GLuint *samplers);
void APIENTRY shared_dispatch_stub_719(GLuint sampler, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_720(GLuint sampler, GLenum pname, GLuint *params);
void APIENTRY shared_dispatch_stub_721(GLuint sampler, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_722(GLuint sampler, GLenum pname, GLint *params);
GLboolean APIENTRY shared_dispatch_stub_723(GLuint sampler);
void APIENTRY shared_dispatch_stub_724(GLuint sampler, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_725(GLuint sampler, GLenum pname, const GLuint *params);
void APIENTRY shared_dispatch_stub_726(GLuint sampler, GLenum pname, GLfloat param);
void APIENTRY shared_dispatch_stub_727(GLuint sampler, GLenum pname, const GLfloat *params);
void APIENTRY shared_dispatch_stub_728(GLuint sampler, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_729(GLuint sampler, GLenum pname, const GLint *params);
void APIENTRY shared_dispatch_stub_730(GLuint id, GLenum pname, GLint64 *params);
void APIENTRY shared_dispatch_stub_731(GLuint id, GLenum pname, GLuint64 *params);
void APIENTRY shared_dispatch_stub_732(GLuint id, GLenum target);
void APIENTRY shared_dispatch_stub_733(GLenum type, GLuint color);
void APIENTRY shared_dispatch_stub_734(GLenum type, const GLuint *color);
void APIENTRY shared_dispatch_stub_735(GLenum type, GLuint color);
void APIENTRY shared_dispatch_stub_736(GLenum type, const GLuint *color);
void APIENTRY shared_dispatch_stub_737(GLenum texture, GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_738(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_739(GLenum texture, GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_740(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_741(GLenum texture, GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_742(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_743(GLenum texture, GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_744(GLenum texture, GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_745(GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_746(GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_747(GLenum type, GLuint color);
void APIENTRY shared_dispatch_stub_748(GLenum type, const GLuint *color);
void APIENTRY shared_dispatch_stub_749(GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_750(GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_751(GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_752(GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_753(GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_754(GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_755(GLenum type, GLuint coords);
void APIENTRY shared_dispatch_stub_756(GLenum type, const GLuint *coords);
void APIENTRY shared_dispatch_stub_757(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY shared_dispatch_stub_758(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY shared_dispatch_stub_759(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY shared_dispatch_stub_760(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY shared_dispatch_stub_761(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY shared_dispatch_stub_762(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY shared_dispatch_stub_763(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void APIENTRY shared_dispatch_stub_764(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void APIENTRY shared_dispatch_stub_765(GLenum type, GLuint value);
void APIENTRY shared_dispatch_stub_766(GLenum type, const GLuint *value);
void APIENTRY shared_dispatch_stub_767(GLenum type, GLuint value);
void APIENTRY shared_dispatch_stub_768(GLenum type, const GLuint *value);
void APIENTRY shared_dispatch_stub_769(GLenum type, GLuint value);
void APIENTRY shared_dispatch_stub_770(GLenum type, const GLuint *value);
void APIENTRY shared_dispatch_stub_771(GLenum target, GLuint id);
void APIENTRY shared_dispatch_stub_772(GLsizei n, const GLuint *ids);
void APIENTRY shared_dispatch_stub_773(GLenum mode, GLuint id);
void APIENTRY shared_dispatch_stub_774(GLsizei n, GLuint *ids);
GLboolean APIENTRY shared_dispatch_stub_775(GLuint id);
void APIENTRY shared_dispatch_stub_776(void);
void APIENTRY shared_dispatch_stub_777(void);
void APIENTRY shared_dispatch_stub_778(GLenum target, GLuint index, GLuint id);
void APIENTRY shared_dispatch_stub_779(GLenum mode, GLuint id, GLuint stream);
void APIENTRY shared_dispatch_stub_780(GLenum target, GLuint index);
void APIENTRY shared_dispatch_stub_781(GLenum target, GLuint index, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_782(GLclampf depth);
void APIENTRY shared_dispatch_stub_783(GLclampf zNear, GLclampf zFar);
void APIENTRY shared_dispatch_stub_784(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void APIENTRY shared_dispatch_stub_785(void);
void APIENTRY shared_dispatch_stub_786(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
void APIENTRY shared_dispatch_stub_787(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
void APIENTRY shared_dispatch_stub_788(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
void APIENTRY shared_dispatch_stub_789(GLuint program, GLenum pname, GLint value);
void APIENTRY shared_dispatch_stub_790(GLDEBUGPROCARB callback, const GLvoid *userParam);
void APIENTRY shared_dispatch_stub_791(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void APIENTRY shared_dispatch_stub_792(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLcharARB *buf);
GLuint APIENTRY shared_dispatch_stub_793(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLcharARB *messageLog);
GLenum APIENTRY shared_dispatch_stub_794(void);
void APIENTRY shared_dispatch_stub_795(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
void APIENTRY shared_dispatch_stub_796(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
void APIENTRY shared_dispatch_stub_797(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
void APIENTRY shared_dispatch_stub_798(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void APIENTRY shared_dispatch_stub_799(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void APIENTRY shared_dispatch_stub_800(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void APIENTRY shared_dispatch_stub_801(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void APIENTRY shared_dispatch_stub_802(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void APIENTRY shared_dispatch_stub_803(GLenum map, GLsizei bufSize, GLfloat *values);
void APIENTRY shared_dispatch_stub_804(GLenum map, GLsizei bufSize, GLuint *values);
void APIENTRY shared_dispatch_stub_805(GLenum map, GLsizei bufSize, GLushort *values);
void APIENTRY shared_dispatch_stub_806(GLsizei bufSize, GLubyte *pattern);
void APIENTRY shared_dispatch_stub_807(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
void APIENTRY shared_dispatch_stub_808(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
void APIENTRY shared_dispatch_stub_809(GLhandleARB program, GLint location, GLsizei bufSize, GLdouble *params);
void APIENTRY shared_dispatch_stub_810(GLhandleARB program, GLint location, GLsizei bufSize, GLfloat *params);
void APIENTRY shared_dispatch_stub_811(GLhandleARB program, GLint location, GLsizei bufSize, GLint *params);
void APIENTRY shared_dispatch_stub_812(GLhandleARB program, GLint location, GLsizei bufSize, GLuint *params);
void APIENTRY shared_dispatch_stub_813(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
void APIENTRY shared_dispatch_stub_814(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
void APIENTRY shared_dispatch_stub_815(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance);
void APIENTRY shared_dispatch_stub_816(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
void APIENTRY shared_dispatch_stub_817(GLenum mode, GLuint id, GLsizei primcount);
void APIENTRY shared_dispatch_stub_818(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
void APIENTRY shared_dispatch_stub_819(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
void APIENTRY shared_dispatch_stub_820(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width);
void APIENTRY shared_dispatch_stub_821(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_822(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY shared_dispatch_stub_823(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width);
void APIENTRY shared_dispatch_stub_824(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_825(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY shared_dispatch_stub_826(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY shared_dispatch_stub_827(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void APIENTRY shared_dispatch_stub_828(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void APIENTRY shared_dispatch_stub_829(GLuint buffer);
void APIENTRY shared_dispatch_stub_830(GLuint buffer, GLintptr offset, GLsizeiptr length);
void APIENTRY shared_dispatch_stub_831(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void APIENTRY shared_dispatch_stub_832(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY shared_dispatch_stub_833(GLuint texture, GLint level);
void APIENTRY shared_dispatch_stub_834(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void APIENTRY shared_dispatch_stub_835(GLfloat factor, GLfloat bias);
void APIENTRY shared_dispatch_stub_836(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
void APIENTRY shared_dispatch_stub_837(const GLfloat *coords);
void APIENTRY shared_dispatch_stub_838(GLint x, GLint y, GLint z, GLint width, GLint height);
void APIENTRY shared_dispatch_stub_839(const GLint *coords);
void APIENTRY shared_dispatch_stub_840(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
void APIENTRY shared_dispatch_stub_841(const GLshort *coords);
void APIENTRY shared_dispatch_stub_842(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
void APIENTRY shared_dispatch_stub_843(const GLfixed *coords);
void APIENTRY shared_dispatch_stub_844(GLenum type, GLsizei stride, const GLvoid *pointer);
GLbitfield APIENTRY shared_dispatch_stub_845(GLfixed *mantissa, GLint *exponent);
void APIENTRY shared_dispatch_stub_846(GLclampf value, GLboolean invert);
void APIENTRY shared_dispatch_stub_847(GLenum pattern);
void APIENTRY shared_dispatch_stub_848(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_849(GLsizei stride, GLsizei count, const GLboolean *pointer);
void APIENTRY shared_dispatch_stub_850(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_851(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_852(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_853(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_854(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void APIENTRY shared_dispatch_stub_855(GLint first, GLsizei count);
void APIENTRY shared_dispatch_stub_856(void);
void APIENTRY shared_dispatch_stub_857(GLfloat red, GLfloat green, GLfloat blue);
void APIENTRY shared_dispatch_stub_858(const GLfloat *v);
void APIENTRY shared_dispatch_stub_859(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount);
void APIENTRY shared_dispatch_stub_860(GLfloat coord);
void APIENTRY shared_dispatch_stub_861(const GLfloat *coord);
void APIENTRY shared_dispatch_stub_862(void);
void APIENTRY shared_dispatch_stub_863(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_864(const GLdouble *v);
void APIENTRY shared_dispatch_stub_865(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_866(const GLfloat *v);
void APIENTRY shared_dispatch_stub_867(GLint x, GLint y, GLint z, GLint w);
void APIENTRY shared_dispatch_stub_868(const GLint *v);
void APIENTRY shared_dispatch_stub_869(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY shared_dispatch_stub_870(const GLshort *v);
void APIENTRY shared_dispatch_stub_871(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
void APIENTRY shared_dispatch_stub_872(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
GLboolean APIENTRY shared_dispatch_stub_873(GLsizei n, const GLuint *ids, GLboolean *residences);
void APIENTRY shared_dispatch_stub_874(GLenum target, GLuint id, const GLfloat *params);
void APIENTRY shared_dispatch_stub_875(GLenum target, GLuint index, GLenum pname, GLdouble *params);
void APIENTRY shared_dispatch_stub_876(GLenum target, GLuint index, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_877(GLuint id, GLenum pname, GLubyte *program);
void APIENTRY shared_dispatch_stub_878(GLuint id, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_879(GLenum target, GLuint address, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_880(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY shared_dispatch_stub_881(GLuint index, GLenum pname, GLfloat *params);
void APIENTRY shared_dispatch_stub_882(GLuint index, GLenum pname, GLint *params);
void APIENTRY shared_dispatch_stub_883(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
void APIENTRY shared_dispatch_stub_884(GLenum target, GLuint index, GLsizei num, const GLdouble *params);
void APIENTRY shared_dispatch_stub_885(GLenum target, GLuint index, GLsizei num, const GLfloat *params);
void APIENTRY shared_dispatch_stub_886(GLsizei n, const GLuint *ids);
void APIENTRY shared_dispatch_stub_887(GLenum target, GLuint address, GLenum matrix, GLenum transform);
void APIENTRY shared_dispatch_stub_888(GLuint index, GLdouble x);
void APIENTRY shared_dispatch_stub_889(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_890(GLuint index, GLfloat x);
void APIENTRY shared_dispatch_stub_891(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_892(GLuint index, GLshort x);
void APIENTRY shared_dispatch_stub_893(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_894(GLuint index, GLdouble x, GLdouble y);
void APIENTRY shared_dispatch_stub_895(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_896(GLuint index, GLfloat x, GLfloat y);
void APIENTRY shared_dispatch_stub_897(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_898(GLuint index, GLshort x, GLshort y);
void APIENTRY shared_dispatch_stub_899(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_900(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY shared_dispatch_stub_901(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_902(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY shared_dispatch_stub_903(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_904(GLuint index, GLshort x, GLshort y, GLshort z);
void APIENTRY shared_dispatch_stub_905(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_906(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_907(GLuint index, const GLdouble *v);
void APIENTRY shared_dispatch_stub_908(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_909(GLuint index, const GLfloat *v);
void APIENTRY shared_dispatch_stub_910(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY shared_dispatch_stub_911(GLuint index, const GLshort *v);
void APIENTRY shared_dispatch_stub_912(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void APIENTRY shared_dispatch_stub_913(GLuint index, const GLubyte *v);
void APIENTRY shared_dispatch_stub_914(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY shared_dispatch_stub_915(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY shared_dispatch_stub_916(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY shared_dispatch_stub_917(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY shared_dispatch_stub_918(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY shared_dispatch_stub_919(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY shared_dispatch_stub_920(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY shared_dispatch_stub_921(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY shared_dispatch_stub_922(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY shared_dispatch_stub_923(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY shared_dispatch_stub_924(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY shared_dispatch_stub_925(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY shared_dispatch_stub_926(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY shared_dispatch_stub_927(GLuint index, GLsizei n, const GLubyte *v);
void APIENTRY shared_dispatch_stub_928(GLenum pname, GLfloat *param);
void APIENTRY shared_dispatch_stub_929(GLenum pname, GLint *param);
void APIENTRY shared_dispatch_stub_930(GLenum pname, const GLfloat *param);
void APIENTRY shared_dispatch_stub_931(GLenum pname, const GLint *param);
void APIENTRY shared_dispatch_stub_932(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void APIENTRY shared_dispatch_stub_933(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void APIENTRY shared_dispatch_stub_934(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void APIENTRY shared_dispatch_stub_935(void);
void APIENTRY shared_dispatch_stub_936(GLuint id);
void APIENTRY shared_dispatch_stub_937(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void APIENTRY shared_dispatch_stub_938(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void APIENTRY shared_dispatch_stub_939(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void APIENTRY shared_dispatch_stub_940(GLuint id);
void APIENTRY shared_dispatch_stub_941(void);
GLuint APIENTRY shared_dispatch_stub_942(GLuint range);
void APIENTRY shared_dispatch_stub_943(GLuint dst, GLuint coord, GLenum swizzle);
void APIENTRY shared_dispatch_stub_944(GLuint dst, GLuint interp, GLenum swizzle);
void APIENTRY shared_dispatch_stub_945(GLuint dst, const GLfloat *value);
void APIENTRY shared_dispatch_stub_946(GLenum face);
void APIENTRY shared_dispatch_stub_947(GLuint array);
void APIENTRY shared_dispatch_stub_948(GLsizei n, GLuint *arrays);
void APIENTRY shared_dispatch_stub_949(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
void APIENTRY shared_dispatch_stub_950(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
void APIENTRY shared_dispatch_stub_951(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY shared_dispatch_stub_952(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
void APIENTRY shared_dispatch_stub_953(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY shared_dispatch_stub_954(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
void APIENTRY shared_dispatch_stub_955(void);
void APIENTRY shared_dispatch_stub_956(GLenum coord, GLenum pname, GLfixed *params);
void APIENTRY shared_dispatch_stub_957(GLenum coord, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_958(GLenum coord, GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_959(GLclampd zmin, GLclampd zmax);
void APIENTRY shared_dispatch_stub_960(GLenum target, GLuint framebuffer);
void APIENTRY shared_dispatch_stub_961(GLenum target, GLuint renderbuffer);
void APIENTRY shared_dispatch_stub_962(GLenum target, GLenum pname, GLint param);
void APIENTRY shared_dispatch_stub_963(GLenum target, GLintptr offset, GLsizeiptr size);
void APIENTRY shared_dispatch_stub_964(GLuint index, GLint x);
void APIENTRY shared_dispatch_stub_965(GLuint index, GLuint x);
void APIENTRY shared_dispatch_stub_966(GLuint index, GLint x, GLint y);
void APIENTRY shared_dispatch_stub_967(GLuint index, const GLint *v);
void APIENTRY shared_dispatch_stub_968(GLuint index, GLuint x, GLuint y);
void APIENTRY shared_dispatch_stub_969(GLuint index, const GLuint *v);
void APIENTRY shared_dispatch_stub_970(GLuint index, GLint x, GLint y, GLint z);
void APIENTRY shared_dispatch_stub_971(GLuint index, const GLint *v);
void APIENTRY shared_dispatch_stub_972(GLuint index, GLuint x, GLuint y, GLuint z);
void APIENTRY shared_dispatch_stub_973(GLuint index, const GLuint *v);
void APIENTRY shared_dispatch_stub_974(GLuint index, GLint x, GLint y, GLint z, GLint w);
void APIENTRY shared_dispatch_stub_975(GLuint index, const GLint *v);
void APIENTRY shared_dispatch_stub_976(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void APIENTRY shared_dispatch_stub_977(GLuint index, const GLuint *v);
void APIENTRY shared_dispatch_stub_978(GLint r, GLint g, GLint b, GLint a);
void APIENTRY shared_dispatch_stub_979(GLuint r, GLuint g, GLuint b, GLuint a);
void APIENTRY shared_dispatch_stub_980(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void APIENTRY shared_dispatch_stub_981(GLenum objectType, GLuint name, GLenum pname, GLint *value);
GLenum APIENTRY shared_dispatch_stub_982(GLenum objectType, GLuint name, GLenum option);
GLenum APIENTRY shared_dispatch_stub_983(GLenum objectType, GLuint name, GLenum option);
void APIENTRY shared_dispatch_stub_984(GLuint program);
GLuint APIENTRY shared_dispatch_stub_985(GLenum type, const GLchar *string);
void APIENTRY shared_dispatch_stub_986(GLenum type, GLuint program);
void APIENTRY shared_dispatch_stub_987(void);
void APIENTRY shared_dispatch_stub_988(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void APIENTRY shared_dispatch_stub_989(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void APIENTRY shared_dispatch_stub_990(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void APIENTRY shared_dispatch_stub_991(GLenum target, GLvoid *writeOffset);
void APIENTRY shared_dispatch_stub_992(GLenum target, GLvoid *writeOffset);
void APIENTRY shared_dispatch_stub_993(GLenum func, GLclampx ref);
void APIENTRY shared_dispatch_stub_994(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
void APIENTRY shared_dispatch_stub_995(GLclampx depth);
void APIENTRY shared_dispatch_stub_996(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void APIENTRY shared_dispatch_stub_997(GLclampx zNear, GLclampx zFar);
void APIENTRY shared_dispatch_stub_998(GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_999(GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_1000(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void APIENTRY shared_dispatch_stub_1001(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void APIENTRY shared_dispatch_stub_1002(GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_1003(GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_1004(GLenum light, GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_1005(GLenum light, GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_1006(GLfixed width);
void APIENTRY shared_dispatch_stub_1007(const GLfixed *m);
void APIENTRY shared_dispatch_stub_1008(GLenum face, GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_1009(GLenum face, GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_1010(const GLfixed *m);
void APIENTRY shared_dispatch_stub_1011(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
void APIENTRY shared_dispatch_stub_1012(GLfixed nx, GLfixed ny, GLfixed nz);
void APIENTRY shared_dispatch_stub_1013(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void APIENTRY shared_dispatch_stub_1014(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void APIENTRY shared_dispatch_stub_1015(GLfixed size);
void APIENTRY shared_dispatch_stub_1016(GLfixed factor, GLfixed units);
void APIENTRY shared_dispatch_stub_1017(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void APIENTRY shared_dispatch_stub_1018(GLclampx value, GLboolean invert);
void APIENTRY shared_dispatch_stub_1019(GLfixed x, GLfixed y, GLfixed z);
void APIENTRY shared_dispatch_stub_1020(GLenum target, GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_1021(GLenum target, GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_1022(GLenum target, GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_1023(GLfixed x, GLfixed y, GLfixed z);
void APIENTRY shared_dispatch_stub_1024(GLenum plane, const GLfloat *equation);
void APIENTRY shared_dispatch_stub_1025(GLenum plane, const GLfixed *equation);
void APIENTRY shared_dispatch_stub_1026(GLenum plane, GLfloat *equation);
void APIENTRY shared_dispatch_stub_1027(GLenum plane, GLfixed *equation);
void APIENTRY shared_dispatch_stub_1028(GLenum pname, GLfixed *params);
void APIENTRY shared_dispatch_stub_1029(GLenum light, GLenum pname, GLfixed *params);
void APIENTRY shared_dispatch_stub_1030(GLenum face, GLenum pname, GLfixed *params);
void APIENTRY shared_dispatch_stub_1031(GLenum target, GLenum pname, GLfixed *params);
void APIENTRY shared_dispatch_stub_1032(GLenum target, GLenum pname, GLfixed *params);
void APIENTRY shared_dispatch_stub_1033(GLenum pname, GLfixed param);
void APIENTRY shared_dispatch_stub_1034(GLenum pname, const GLfixed *params);
void APIENTRY shared_dispatch_stub_1035(GLenum target, GLenum pname, const GLfixed *params);
#undef MAPI_TMP_DEFINES
#endif /* MAPI_TMP_DEFINES */

#ifdef MAPI_TMP_TABLE
#define MAPI_TABLE_NUM_STATIC 1036
#define MAPI_TABLE_NUM_DYNAMIC 256
#undef MAPI_TMP_TABLE
#endif /* MAPI_TMP_TABLE */

#ifdef MAPI_TMP_NOOP_ARRAY
#ifdef DEBUG

static void APIENTRY noopNewList(GLuint list, GLenum mode)
{
   (void) list; (void) mode;
   noop_warn("glNewList");
}

static void APIENTRY noopEndList(void)
{
      noop_warn("glEndList");
}

static void APIENTRY noopCallList(GLuint list)
{
   (void) list;
   noop_warn("glCallList");
}

static void APIENTRY noopCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
   (void) n; (void) type; (void) lists;
   noop_warn("glCallLists");
}

static void APIENTRY noopDeleteLists(GLuint list, GLsizei range)
{
   (void) list; (void) range;
   noop_warn("glDeleteLists");
}

static GLuint APIENTRY noopGenLists(GLsizei range)
{
   (void) range;
   noop_warn("glGenLists");
   return (GLuint) 0;
}

static void APIENTRY noopListBase(GLuint base)
{
   (void) base;
   noop_warn("glListBase");
}

static void APIENTRY noopBegin(GLenum mode)
{
   (void) mode;
   noop_warn("glBegin");
}

static void APIENTRY noopBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
   (void) width; (void) height; (void) xorig; (void) yorig; (void) xmove; (void) ymove; (void) bitmap;
   noop_warn("glBitmap");
}

static void APIENTRY noopColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3b");
}

static void APIENTRY noopColor3bv(const GLbyte *v)
{
   (void) v;
   noop_warn("glColor3bv");
}

static void APIENTRY noopColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3d");
}

static void APIENTRY noopColor3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glColor3dv");
}

static void APIENTRY noopColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3f");
}

static void APIENTRY noopColor3fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glColor3fv");
}

static void APIENTRY noopColor3i(GLint red, GLint green, GLint blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3i");
}

static void APIENTRY noopColor3iv(const GLint *v)
{
   (void) v;
   noop_warn("glColor3iv");
}

static void APIENTRY noopColor3s(GLshort red, GLshort green, GLshort blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3s");
}

static void APIENTRY noopColor3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glColor3sv");
}

static void APIENTRY noopColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3ub");
}

static void APIENTRY noopColor3ubv(const GLubyte *v)
{
   (void) v;
   noop_warn("glColor3ubv");
}

static void APIENTRY noopColor3ui(GLuint red, GLuint green, GLuint blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3ui");
}

static void APIENTRY noopColor3uiv(const GLuint *v)
{
   (void) v;
   noop_warn("glColor3uiv");
}

static void APIENTRY noopColor3us(GLushort red, GLushort green, GLushort blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glColor3us");
}

static void APIENTRY noopColor3usv(const GLushort *v)
{
   (void) v;
   noop_warn("glColor3usv");
}

static void APIENTRY noopColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4b");
}

static void APIENTRY noopColor4bv(const GLbyte *v)
{
   (void) v;
   noop_warn("glColor4bv");
}

static void APIENTRY noopColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4d");
}

static void APIENTRY noopColor4dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glColor4dv");
}

static void APIENTRY noopColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4f");
}

static void APIENTRY noopColor4fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glColor4fv");
}

static void APIENTRY noopColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4i");
}

static void APIENTRY noopColor4iv(const GLint *v)
{
   (void) v;
   noop_warn("glColor4iv");
}

static void APIENTRY noopColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4s");
}

static void APIENTRY noopColor4sv(const GLshort *v)
{
   (void) v;
   noop_warn("glColor4sv");
}

static void APIENTRY noopColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4ub");
}

static void APIENTRY noopColor4ubv(const GLubyte *v)
{
   (void) v;
   noop_warn("glColor4ubv");
}

static void APIENTRY noopColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4ui");
}

static void APIENTRY noopColor4uiv(const GLuint *v)
{
   (void) v;
   noop_warn("glColor4uiv");
}

static void APIENTRY noopColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4us");
}

static void APIENTRY noopColor4usv(const GLushort *v)
{
   (void) v;
   noop_warn("glColor4usv");
}

static void APIENTRY noopEdgeFlag(GLboolean flag)
{
   (void) flag;
   noop_warn("glEdgeFlag");
}

static void APIENTRY noopEdgeFlagv(const GLboolean *flag)
{
   (void) flag;
   noop_warn("glEdgeFlagv");
}

static void APIENTRY noopEnd(void)
{
      noop_warn("glEnd");
}

static void APIENTRY noopIndexd(GLdouble c)
{
   (void) c;
   noop_warn("glIndexd");
}

static void APIENTRY noopIndexdv(const GLdouble *c)
{
   (void) c;
   noop_warn("glIndexdv");
}

static void APIENTRY noopIndexf(GLfloat c)
{
   (void) c;
   noop_warn("glIndexf");
}

static void APIENTRY noopIndexfv(const GLfloat *c)
{
   (void) c;
   noop_warn("glIndexfv");
}

static void APIENTRY noopIndexi(GLint c)
{
   (void) c;
   noop_warn("glIndexi");
}

static void APIENTRY noopIndexiv(const GLint *c)
{
   (void) c;
   noop_warn("glIndexiv");
}

static void APIENTRY noopIndexs(GLshort c)
{
   (void) c;
   noop_warn("glIndexs");
}

static void APIENTRY noopIndexsv(const GLshort *c)
{
   (void) c;
   noop_warn("glIndexsv");
}

static void APIENTRY noopNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
   (void) nx; (void) ny; (void) nz;
   noop_warn("glNormal3b");
}

static void APIENTRY noopNormal3bv(const GLbyte *v)
{
   (void) v;
   noop_warn("glNormal3bv");
}

static void APIENTRY noopNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
   (void) nx; (void) ny; (void) nz;
   noop_warn("glNormal3d");
}

static void APIENTRY noopNormal3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glNormal3dv");
}

static void APIENTRY noopNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
   (void) nx; (void) ny; (void) nz;
   noop_warn("glNormal3f");
}

static void APIENTRY noopNormal3fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glNormal3fv");
}

static void APIENTRY noopNormal3i(GLint nx, GLint ny, GLint nz)
{
   (void) nx; (void) ny; (void) nz;
   noop_warn("glNormal3i");
}

static void APIENTRY noopNormal3iv(const GLint *v)
{
   (void) v;
   noop_warn("glNormal3iv");
}

static void APIENTRY noopNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
   (void) nx; (void) ny; (void) nz;
   noop_warn("glNormal3s");
}

static void APIENTRY noopNormal3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glNormal3sv");
}

static void APIENTRY noopRasterPos2d(GLdouble x, GLdouble y)
{
   (void) x; (void) y;
   noop_warn("glRasterPos2d");
}

static void APIENTRY noopRasterPos2dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glRasterPos2dv");
}

static void APIENTRY noopRasterPos2f(GLfloat x, GLfloat y)
{
   (void) x; (void) y;
   noop_warn("glRasterPos2f");
}

static void APIENTRY noopRasterPos2fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glRasterPos2fv");
}

static void APIENTRY noopRasterPos2i(GLint x, GLint y)
{
   (void) x; (void) y;
   noop_warn("glRasterPos2i");
}

static void APIENTRY noopRasterPos2iv(const GLint *v)
{
   (void) v;
   noop_warn("glRasterPos2iv");
}

static void APIENTRY noopRasterPos2s(GLshort x, GLshort y)
{
   (void) x; (void) y;
   noop_warn("glRasterPos2s");
}

static void APIENTRY noopRasterPos2sv(const GLshort *v)
{
   (void) v;
   noop_warn("glRasterPos2sv");
}

static void APIENTRY noopRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glRasterPos3d");
}

static void APIENTRY noopRasterPos3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glRasterPos3dv");
}

static void APIENTRY noopRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glRasterPos3f");
}

static void APIENTRY noopRasterPos3fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glRasterPos3fv");
}

static void APIENTRY noopRasterPos3i(GLint x, GLint y, GLint z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glRasterPos3i");
}

static void APIENTRY noopRasterPos3iv(const GLint *v)
{
   (void) v;
   noop_warn("glRasterPos3iv");
}

static void APIENTRY noopRasterPos3s(GLshort x, GLshort y, GLshort z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glRasterPos3s");
}

static void APIENTRY noopRasterPos3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glRasterPos3sv");
}

static void APIENTRY noopRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glRasterPos4d");
}

static void APIENTRY noopRasterPos4dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glRasterPos4dv");
}

static void APIENTRY noopRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glRasterPos4f");
}

static void APIENTRY noopRasterPos4fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glRasterPos4fv");
}

static void APIENTRY noopRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glRasterPos4i");
}

static void APIENTRY noopRasterPos4iv(const GLint *v)
{
   (void) v;
   noop_warn("glRasterPos4iv");
}

static void APIENTRY noopRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glRasterPos4s");
}

static void APIENTRY noopRasterPos4sv(const GLshort *v)
{
   (void) v;
   noop_warn("glRasterPos4sv");
}

static void APIENTRY noopRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   noop_warn("glRectd");
}

static void APIENTRY noopRectdv(const GLdouble *v1, const GLdouble *v2)
{
   (void) v1; (void) v2;
   noop_warn("glRectdv");
}

static void APIENTRY noopRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   noop_warn("glRectf");
}

static void APIENTRY noopRectfv(const GLfloat *v1, const GLfloat *v2)
{
   (void) v1; (void) v2;
   noop_warn("glRectfv");
}

static void APIENTRY noopRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   noop_warn("glRecti");
}

static void APIENTRY noopRectiv(const GLint *v1, const GLint *v2)
{
   (void) v1; (void) v2;
   noop_warn("glRectiv");
}

static void APIENTRY noopRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   noop_warn("glRects");
}

static void APIENTRY noopRectsv(const GLshort *v1, const GLshort *v2)
{
   (void) v1; (void) v2;
   noop_warn("glRectsv");
}

static void APIENTRY noopTexCoord1d(GLdouble s)
{
   (void) s;
   noop_warn("glTexCoord1d");
}

static void APIENTRY noopTexCoord1dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glTexCoord1dv");
}

static void APIENTRY noopTexCoord1f(GLfloat s)
{
   (void) s;
   noop_warn("glTexCoord1f");
}

static void APIENTRY noopTexCoord1fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glTexCoord1fv");
}

static void APIENTRY noopTexCoord1i(GLint s)
{
   (void) s;
   noop_warn("glTexCoord1i");
}

static void APIENTRY noopTexCoord1iv(const GLint *v)
{
   (void) v;
   noop_warn("glTexCoord1iv");
}

static void APIENTRY noopTexCoord1s(GLshort s)
{
   (void) s;
   noop_warn("glTexCoord1s");
}

static void APIENTRY noopTexCoord1sv(const GLshort *v)
{
   (void) v;
   noop_warn("glTexCoord1sv");
}

static void APIENTRY noopTexCoord2d(GLdouble s, GLdouble t)
{
   (void) s; (void) t;
   noop_warn("glTexCoord2d");
}

static void APIENTRY noopTexCoord2dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glTexCoord2dv");
}

static void APIENTRY noopTexCoord2f(GLfloat s, GLfloat t)
{
   (void) s; (void) t;
   noop_warn("glTexCoord2f");
}

static void APIENTRY noopTexCoord2fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glTexCoord2fv");
}

static void APIENTRY noopTexCoord2i(GLint s, GLint t)
{
   (void) s; (void) t;
   noop_warn("glTexCoord2i");
}

static void APIENTRY noopTexCoord2iv(const GLint *v)
{
   (void) v;
   noop_warn("glTexCoord2iv");
}

static void APIENTRY noopTexCoord2s(GLshort s, GLshort t)
{
   (void) s; (void) t;
   noop_warn("glTexCoord2s");
}

static void APIENTRY noopTexCoord2sv(const GLshort *v)
{
   (void) v;
   noop_warn("glTexCoord2sv");
}

static void APIENTRY noopTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
   (void) s; (void) t; (void) r;
   noop_warn("glTexCoord3d");
}

static void APIENTRY noopTexCoord3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glTexCoord3dv");
}

static void APIENTRY noopTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
   (void) s; (void) t; (void) r;
   noop_warn("glTexCoord3f");
}

static void APIENTRY noopTexCoord3fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glTexCoord3fv");
}

static void APIENTRY noopTexCoord3i(GLint s, GLint t, GLint r)
{
   (void) s; (void) t; (void) r;
   noop_warn("glTexCoord3i");
}

static void APIENTRY noopTexCoord3iv(const GLint *v)
{
   (void) v;
   noop_warn("glTexCoord3iv");
}

static void APIENTRY noopTexCoord3s(GLshort s, GLshort t, GLshort r)
{
   (void) s; (void) t; (void) r;
   noop_warn("glTexCoord3s");
}

static void APIENTRY noopTexCoord3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glTexCoord3sv");
}

static void APIENTRY noopTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   (void) s; (void) t; (void) r; (void) q;
   noop_warn("glTexCoord4d");
}

static void APIENTRY noopTexCoord4dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glTexCoord4dv");
}

static void APIENTRY noopTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   (void) s; (void) t; (void) r; (void) q;
   noop_warn("glTexCoord4f");
}

static void APIENTRY noopTexCoord4fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glTexCoord4fv");
}

static void APIENTRY noopTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
   (void) s; (void) t; (void) r; (void) q;
   noop_warn("glTexCoord4i");
}

static void APIENTRY noopTexCoord4iv(const GLint *v)
{
   (void) v;
   noop_warn("glTexCoord4iv");
}

static void APIENTRY noopTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
   (void) s; (void) t; (void) r; (void) q;
   noop_warn("glTexCoord4s");
}

static void APIENTRY noopTexCoord4sv(const GLshort *v)
{
   (void) v;
   noop_warn("glTexCoord4sv");
}

static void APIENTRY noopVertex2d(GLdouble x, GLdouble y)
{
   (void) x; (void) y;
   noop_warn("glVertex2d");
}

static void APIENTRY noopVertex2dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glVertex2dv");
}

static void APIENTRY noopVertex2f(GLfloat x, GLfloat y)
{
   (void) x; (void) y;
   noop_warn("glVertex2f");
}

static void APIENTRY noopVertex2fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glVertex2fv");
}

static void APIENTRY noopVertex2i(GLint x, GLint y)
{
   (void) x; (void) y;
   noop_warn("glVertex2i");
}

static void APIENTRY noopVertex2iv(const GLint *v)
{
   (void) v;
   noop_warn("glVertex2iv");
}

static void APIENTRY noopVertex2s(GLshort x, GLshort y)
{
   (void) x; (void) y;
   noop_warn("glVertex2s");
}

static void APIENTRY noopVertex2sv(const GLshort *v)
{
   (void) v;
   noop_warn("glVertex2sv");
}

static void APIENTRY noopVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glVertex3d");
}

static void APIENTRY noopVertex3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glVertex3dv");
}

static void APIENTRY noopVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glVertex3f");
}

static void APIENTRY noopVertex3fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glVertex3fv");
}

static void APIENTRY noopVertex3i(GLint x, GLint y, GLint z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glVertex3i");
}

static void APIENTRY noopVertex3iv(const GLint *v)
{
   (void) v;
   noop_warn("glVertex3iv");
}

static void APIENTRY noopVertex3s(GLshort x, GLshort y, GLshort z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glVertex3s");
}

static void APIENTRY noopVertex3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glVertex3sv");
}

static void APIENTRY noopVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertex4d");
}

static void APIENTRY noopVertex4dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glVertex4dv");
}

static void APIENTRY noopVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertex4f");
}

static void APIENTRY noopVertex4fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glVertex4fv");
}

static void APIENTRY noopVertex4i(GLint x, GLint y, GLint z, GLint w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertex4i");
}

static void APIENTRY noopVertex4iv(const GLint *v)
{
   (void) v;
   noop_warn("glVertex4iv");
}

static void APIENTRY noopVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertex4s");
}

static void APIENTRY noopVertex4sv(const GLshort *v)
{
   (void) v;
   noop_warn("glVertex4sv");
}

static void APIENTRY noopClipPlane(GLenum plane, const GLdouble *equation)
{
   (void) plane; (void) equation;
   noop_warn("glClipPlane");
}

static void APIENTRY noopColorMaterial(GLenum face, GLenum mode)
{
   (void) face; (void) mode;
   noop_warn("glColorMaterial");
}

static void APIENTRY noopCullFace(GLenum mode)
{
   (void) mode;
   noop_warn("glCullFace");
}

static void APIENTRY noopFogf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   noop_warn("glFogf");
}

static void APIENTRY noopFogfv(GLenum pname, const GLfloat *params)
{
   (void) pname; (void) params;
   noop_warn("glFogfv");
}

static void APIENTRY noopFogi(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   noop_warn("glFogi");
}

static void APIENTRY noopFogiv(GLenum pname, const GLint *params)
{
   (void) pname; (void) params;
   noop_warn("glFogiv");
}

static void APIENTRY noopFrontFace(GLenum mode)
{
   (void) mode;
   noop_warn("glFrontFace");
}

static void APIENTRY noopHint(GLenum target, GLenum mode)
{
   (void) target; (void) mode;
   noop_warn("glHint");
}

static void APIENTRY noopLightf(GLenum light, GLenum pname, GLfloat param)
{
   (void) light; (void) pname; (void) param;
   noop_warn("glLightf");
}

static void APIENTRY noopLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
   (void) light; (void) pname; (void) params;
   noop_warn("glLightfv");
}

static void APIENTRY noopLighti(GLenum light, GLenum pname, GLint param)
{
   (void) light; (void) pname; (void) param;
   noop_warn("glLighti");
}

static void APIENTRY noopLightiv(GLenum light, GLenum pname, const GLint *params)
{
   (void) light; (void) pname; (void) params;
   noop_warn("glLightiv");
}

static void APIENTRY noopLightModelf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   noop_warn("glLightModelf");
}

static void APIENTRY noopLightModelfv(GLenum pname, const GLfloat *params)
{
   (void) pname; (void) params;
   noop_warn("glLightModelfv");
}

static void APIENTRY noopLightModeli(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   noop_warn("glLightModeli");
}

static void APIENTRY noopLightModeliv(GLenum pname, const GLint *params)
{
   (void) pname; (void) params;
   noop_warn("glLightModeliv");
}

static void APIENTRY noopLineStipple(GLint factor, GLushort pattern)
{
   (void) factor; (void) pattern;
   noop_warn("glLineStipple");
}

static void APIENTRY noopLineWidth(GLfloat width)
{
   (void) width;
   noop_warn("glLineWidth");
}

static void APIENTRY noopMaterialf(GLenum face, GLenum pname, GLfloat param)
{
   (void) face; (void) pname; (void) param;
   noop_warn("glMaterialf");
}

static void APIENTRY noopMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
   (void) face; (void) pname; (void) params;
   noop_warn("glMaterialfv");
}

static void APIENTRY noopMateriali(GLenum face, GLenum pname, GLint param)
{
   (void) face; (void) pname; (void) param;
   noop_warn("glMateriali");
}

static void APIENTRY noopMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
   (void) face; (void) pname; (void) params;
   noop_warn("glMaterialiv");
}

static void APIENTRY noopPointSize(GLfloat size)
{
   (void) size;
   noop_warn("glPointSize");
}

static void APIENTRY noopPolygonMode(GLenum face, GLenum mode)
{
   (void) face; (void) mode;
   noop_warn("glPolygonMode");
}

static void APIENTRY noopPolygonStipple(const GLubyte *mask)
{
   (void) mask;
   noop_warn("glPolygonStipple");
}

static void APIENTRY noopScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) x; (void) y; (void) width; (void) height;
   noop_warn("glScissor");
}

static void APIENTRY noopShadeModel(GLenum mode)
{
   (void) mode;
   noop_warn("glShadeModel");
}

static void APIENTRY noopTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glTexParameterf");
}

static void APIENTRY noopTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexParameterfv");
}

static void APIENTRY noopTexParameteri(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glTexParameteri");
}

static void APIENTRY noopTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexParameteriv");
}

static void APIENTRY noopTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) border; (void) format; (void) type; (void) pixels;
   noop_warn("glTexImage1D");
}

static void APIENTRY noopTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) border; (void) format; (void) type; (void) pixels;
   noop_warn("glTexImage2D");
}

static void APIENTRY noopTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glTexEnvf");
}

static void APIENTRY noopTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexEnvfv");
}

static void APIENTRY noopTexEnvi(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glTexEnvi");
}

static void APIENTRY noopTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexEnviv");
}

static void APIENTRY noopTexGend(GLenum coord, GLenum pname, GLdouble param)
{
   (void) coord; (void) pname; (void) param;
   noop_warn("glTexGend");
}

static void APIENTRY noopTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glTexGendv");
}

static void APIENTRY noopTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
   (void) coord; (void) pname; (void) param;
   noop_warn("glTexGenf");
}

static void APIENTRY noopTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glTexGenfv");
}

static void APIENTRY noopTexGeni(GLenum coord, GLenum pname, GLint param)
{
   (void) coord; (void) pname; (void) param;
   noop_warn("glTexGeni");
}

static void APIENTRY noopTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glTexGeniv");
}

static void APIENTRY noopFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
   (void) size; (void) type; (void) buffer;
   noop_warn("glFeedbackBuffer");
}

static void APIENTRY noopSelectBuffer(GLsizei size, GLuint *buffer)
{
   (void) size; (void) buffer;
   noop_warn("glSelectBuffer");
}

static GLint APIENTRY noopRenderMode(GLenum mode)
{
   (void) mode;
   noop_warn("glRenderMode");
   return (GLint) 0;
}

static void APIENTRY noopInitNames(void)
{
      noop_warn("glInitNames");
}

static void APIENTRY noopLoadName(GLuint name)
{
   (void) name;
   noop_warn("glLoadName");
}

static void APIENTRY noopPassThrough(GLfloat token)
{
   (void) token;
   noop_warn("glPassThrough");
}

static void APIENTRY noopPopName(void)
{
      noop_warn("glPopName");
}

static void APIENTRY noopPushName(GLuint name)
{
   (void) name;
   noop_warn("glPushName");
}

static void APIENTRY noopDrawBuffer(GLenum mode)
{
   (void) mode;
   noop_warn("glDrawBuffer");
}

static void APIENTRY noopClear(GLbitfield mask)
{
   (void) mask;
   noop_warn("glClear");
}

static void APIENTRY noopClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glClearAccum");
}

static void APIENTRY noopClearIndex(GLfloat c)
{
   (void) c;
   noop_warn("glClearIndex");
}

static void APIENTRY noopClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glClearColor");
}

static void APIENTRY noopClearStencil(GLint s)
{
   (void) s;
   noop_warn("glClearStencil");
}

static void APIENTRY noopClearDepth(GLclampd depth)
{
   (void) depth;
   noop_warn("glClearDepth");
}

static void APIENTRY noopStencilMask(GLuint mask)
{
   (void) mask;
   noop_warn("glStencilMask");
}

static void APIENTRY noopColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColorMask");
}

static void APIENTRY noopDepthMask(GLboolean flag)
{
   (void) flag;
   noop_warn("glDepthMask");
}

static void APIENTRY noopIndexMask(GLuint mask)
{
   (void) mask;
   noop_warn("glIndexMask");
}

static void APIENTRY noopAccum(GLenum op, GLfloat value)
{
   (void) op; (void) value;
   noop_warn("glAccum");
}

static void APIENTRY noopDisable(GLenum cap)
{
   (void) cap;
   noop_warn("glDisable");
}

static void APIENTRY noopEnable(GLenum cap)
{
   (void) cap;
   noop_warn("glEnable");
}

static void APIENTRY noopFinish(void)
{
      noop_warn("glFinish");
}

static void APIENTRY noopFlush(void)
{
      noop_warn("glFlush");
}

static void APIENTRY noopPopAttrib(void)
{
      noop_warn("glPopAttrib");
}

static void APIENTRY noopPushAttrib(GLbitfield mask)
{
   (void) mask;
   noop_warn("glPushAttrib");
}

static void APIENTRY noopMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
   (void) target; (void) u1; (void) u2; (void) stride; (void) order; (void) points;
   noop_warn("glMap1d");
}

static void APIENTRY noopMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
   (void) target; (void) u1; (void) u2; (void) stride; (void) order; (void) points;
   noop_warn("glMap1f");
}

static void APIENTRY noopMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
   (void) target; (void) u1; (void) u2; (void) ustride; (void) uorder; (void) v1; (void) v2; (void) vstride; (void) vorder; (void) points;
   noop_warn("glMap2d");
}

static void APIENTRY noopMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
   (void) target; (void) u1; (void) u2; (void) ustride; (void) uorder; (void) v1; (void) v2; (void) vstride; (void) vorder; (void) points;
   noop_warn("glMap2f");
}

static void APIENTRY noopMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
   (void) un; (void) u1; (void) u2;
   noop_warn("glMapGrid1d");
}

static void APIENTRY noopMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
   (void) un; (void) u1; (void) u2;
   noop_warn("glMapGrid1f");
}

static void APIENTRY noopMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
   (void) un; (void) u1; (void) u2; (void) vn; (void) v1; (void) v2;
   noop_warn("glMapGrid2d");
}

static void APIENTRY noopMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
   (void) un; (void) u1; (void) u2; (void) vn; (void) v1; (void) v2;
   noop_warn("glMapGrid2f");
}

static void APIENTRY noopEvalCoord1d(GLdouble u)
{
   (void) u;
   noop_warn("glEvalCoord1d");
}

static void APIENTRY noopEvalCoord1dv(const GLdouble *u)
{
   (void) u;
   noop_warn("glEvalCoord1dv");
}

static void APIENTRY noopEvalCoord1f(GLfloat u)
{
   (void) u;
   noop_warn("glEvalCoord1f");
}

static void APIENTRY noopEvalCoord1fv(const GLfloat *u)
{
   (void) u;
   noop_warn("glEvalCoord1fv");
}

static void APIENTRY noopEvalCoord2d(GLdouble u, GLdouble v)
{
   (void) u; (void) v;
   noop_warn("glEvalCoord2d");
}

static void APIENTRY noopEvalCoord2dv(const GLdouble *u)
{
   (void) u;
   noop_warn("glEvalCoord2dv");
}

static void APIENTRY noopEvalCoord2f(GLfloat u, GLfloat v)
{
   (void) u; (void) v;
   noop_warn("glEvalCoord2f");
}

static void APIENTRY noopEvalCoord2fv(const GLfloat *u)
{
   (void) u;
   noop_warn("glEvalCoord2fv");
}

static void APIENTRY noopEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
   (void) mode; (void) i1; (void) i2;
   noop_warn("glEvalMesh1");
}

static void APIENTRY noopEvalPoint1(GLint i)
{
   (void) i;
   noop_warn("glEvalPoint1");
}

static void APIENTRY noopEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
   (void) mode; (void) i1; (void) i2; (void) j1; (void) j2;
   noop_warn("glEvalMesh2");
}

static void APIENTRY noopEvalPoint2(GLint i, GLint j)
{
   (void) i; (void) j;
   noop_warn("glEvalPoint2");
}

static void APIENTRY noopAlphaFunc(GLenum func, GLclampf ref)
{
   (void) func; (void) ref;
   noop_warn("glAlphaFunc");
}

static void APIENTRY noopBlendFunc(GLenum sfactor, GLenum dfactor)
{
   (void) sfactor; (void) dfactor;
   noop_warn("glBlendFunc");
}

static void APIENTRY noopLogicOp(GLenum opcode)
{
   (void) opcode;
   noop_warn("glLogicOp");
}

static void APIENTRY noopStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   (void) func; (void) ref; (void) mask;
   noop_warn("glStencilFunc");
}

static void APIENTRY noopStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   (void) fail; (void) zfail; (void) zpass;
   noop_warn("glStencilOp");
}

static void APIENTRY noopDepthFunc(GLenum func)
{
   (void) func;
   noop_warn("glDepthFunc");
}

static void APIENTRY noopPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
   (void) xfactor; (void) yfactor;
   noop_warn("glPixelZoom");
}

static void APIENTRY noopPixelTransferf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   noop_warn("glPixelTransferf");
}

static void APIENTRY noopPixelTransferi(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   noop_warn("glPixelTransferi");
}

static void APIENTRY noopPixelStoref(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   noop_warn("glPixelStoref");
}

static void APIENTRY noopPixelStorei(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   noop_warn("glPixelStorei");
}

static void APIENTRY noopPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
   (void) map; (void) mapsize; (void) values;
   noop_warn("glPixelMapfv");
}

static void APIENTRY noopPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
   (void) map; (void) mapsize; (void) values;
   noop_warn("glPixelMapuiv");
}

static void APIENTRY noopPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
   (void) map; (void) mapsize; (void) values;
   noop_warn("glPixelMapusv");
}

static void APIENTRY noopReadBuffer(GLenum mode)
{
   (void) mode;
   noop_warn("glReadBuffer");
}

static void APIENTRY noopCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
   (void) x; (void) y; (void) width; (void) height; (void) type;
   noop_warn("glCopyPixels");
}

static void APIENTRY noopReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
   (void) x; (void) y; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   noop_warn("glReadPixels");
}

static void APIENTRY noopDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) width; (void) height; (void) format; (void) type; (void) pixels;
   noop_warn("glDrawPixels");
}

static void APIENTRY noopGetBooleanv(GLenum pname, GLboolean *params)
{
   (void) pname; (void) params;
   noop_warn("glGetBooleanv");
}

static void APIENTRY noopGetClipPlane(GLenum plane, GLdouble *equation)
{
   (void) plane; (void) equation;
   noop_warn("glGetClipPlane");
}

static void APIENTRY noopGetDoublev(GLenum pname, GLdouble *params)
{
   (void) pname; (void) params;
   noop_warn("glGetDoublev");
}

static GLenum APIENTRY noopGetError(void)
{
      noop_warn("glGetError");
   return (GLenum) 0;
}

static void APIENTRY noopGetFloatv(GLenum pname, GLfloat *params)
{
   (void) pname; (void) params;
   noop_warn("glGetFloatv");
}

static void APIENTRY noopGetIntegerv(GLenum pname, GLint *params)
{
   (void) pname; (void) params;
   noop_warn("glGetIntegerv");
}

static void APIENTRY noopGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
   (void) light; (void) pname; (void) params;
   noop_warn("glGetLightfv");
}

static void APIENTRY noopGetLightiv(GLenum light, GLenum pname, GLint *params)
{
   (void) light; (void) pname; (void) params;
   noop_warn("glGetLightiv");
}

static void APIENTRY noopGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
   (void) target; (void) query; (void) v;
   noop_warn("glGetMapdv");
}

static void APIENTRY noopGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
   (void) target; (void) query; (void) v;
   noop_warn("glGetMapfv");
}

static void APIENTRY noopGetMapiv(GLenum target, GLenum query, GLint *v)
{
   (void) target; (void) query; (void) v;
   noop_warn("glGetMapiv");
}

static void APIENTRY noopGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
   (void) face; (void) pname; (void) params;
   noop_warn("glGetMaterialfv");
}

static void APIENTRY noopGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
   (void) face; (void) pname; (void) params;
   noop_warn("glGetMaterialiv");
}

static void APIENTRY noopGetPixelMapfv(GLenum map, GLfloat *values)
{
   (void) map; (void) values;
   noop_warn("glGetPixelMapfv");
}

static void APIENTRY noopGetPixelMapuiv(GLenum map, GLuint *values)
{
   (void) map; (void) values;
   noop_warn("glGetPixelMapuiv");
}

static void APIENTRY noopGetPixelMapusv(GLenum map, GLushort *values)
{
   (void) map; (void) values;
   noop_warn("glGetPixelMapusv");
}

static void APIENTRY noopGetPolygonStipple(GLubyte *mask)
{
   (void) mask;
   noop_warn("glGetPolygonStipple");
}

static const GLubyte * APIENTRY noopGetString(GLenum name)
{
   (void) name;
   noop_warn("glGetString");
   return (const GLubyte *) 0;
}

static void APIENTRY noopGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexEnvfv");
}

static void APIENTRY noopGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexEnviv");
}

static void APIENTRY noopGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glGetTexGendv");
}

static void APIENTRY noopGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glGetTexGenfv");
}

static void APIENTRY noopGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glGetTexGeniv");
}

static void APIENTRY noopGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   (void) target; (void) level; (void) format; (void) type; (void) pixels;
   noop_warn("glGetTexImage");
}

static void APIENTRY noopGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexParameterfv");
}

static void APIENTRY noopGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexParameteriv");
}

static void APIENTRY noopGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   (void) target; (void) level; (void) pname; (void) params;
   noop_warn("glGetTexLevelParameterfv");
}

static void APIENTRY noopGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
   (void) target; (void) level; (void) pname; (void) params;
   noop_warn("glGetTexLevelParameteriv");
}

static GLboolean APIENTRY noopIsEnabled(GLenum cap)
{
   (void) cap;
   noop_warn("glIsEnabled");
   return (GLboolean) 0;
}

static GLboolean APIENTRY noopIsList(GLuint list)
{
   (void) list;
   noop_warn("glIsList");
   return (GLboolean) 0;
}

static void APIENTRY noopDepthRange(GLclampd zNear, GLclampd zFar)
{
   (void) zNear; (void) zFar;
   noop_warn("glDepthRange");
}

static void APIENTRY noopFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   noop_warn("glFrustum");
}

static void APIENTRY noopLoadIdentity(void)
{
      noop_warn("glLoadIdentity");
}

static void APIENTRY noopLoadMatrixf(const GLfloat *m)
{
   (void) m;
   noop_warn("glLoadMatrixf");
}

static void APIENTRY noopLoadMatrixd(const GLdouble *m)
{
   (void) m;
   noop_warn("glLoadMatrixd");
}

static void APIENTRY noopMatrixMode(GLenum mode)
{
   (void) mode;
   noop_warn("glMatrixMode");
}

static void APIENTRY noopMultMatrixf(const GLfloat *m)
{
   (void) m;
   noop_warn("glMultMatrixf");
}

static void APIENTRY noopMultMatrixd(const GLdouble *m)
{
   (void) m;
   noop_warn("glMultMatrixd");
}

static void APIENTRY noopOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   noop_warn("glOrtho");
}

static void APIENTRY noopPopMatrix(void)
{
      noop_warn("glPopMatrix");
}

static void APIENTRY noopPushMatrix(void)
{
      noop_warn("glPushMatrix");
}

static void APIENTRY noopRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   (void) angle; (void) x; (void) y; (void) z;
   noop_warn("glRotated");
}

static void APIENTRY noopRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   (void) angle; (void) x; (void) y; (void) z;
   noop_warn("glRotatef");
}

static void APIENTRY noopScaled(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glScaled");
}

static void APIENTRY noopScalef(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glScalef");
}

static void APIENTRY noopTranslated(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glTranslated");
}

static void APIENTRY noopTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glTranslatef");
}

static void APIENTRY noopViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) x; (void) y; (void) width; (void) height;
   noop_warn("glViewport");
}

static void APIENTRY noopArrayElement(GLint i)
{
   (void) i;
   noop_warn("glArrayElement");
}

static void APIENTRY noopBindTexture(GLenum target, GLuint texture)
{
   (void) target; (void) texture;
   noop_warn("glBindTexture");
}

static void APIENTRY noopColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   noop_warn("glColorPointer");
}

static void APIENTRY noopDisableClientState(GLenum array)
{
   (void) array;
   noop_warn("glDisableClientState");
}

static void APIENTRY noopDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   (void) mode; (void) first; (void) count;
   noop_warn("glDrawArrays");
}

static void APIENTRY noopDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   (void) mode; (void) count; (void) type; (void) indices;
   noop_warn("glDrawElements");
}

static void APIENTRY noopEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
   (void) stride; (void) pointer;
   noop_warn("glEdgeFlagPointer");
}

static void APIENTRY noopEnableClientState(GLenum array)
{
   (void) array;
   noop_warn("glEnableClientState");
}

static void APIENTRY noopIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   noop_warn("glIndexPointer");
}

static void APIENTRY noopIndexub(GLubyte c)
{
   (void) c;
   noop_warn("glIndexub");
}

static void APIENTRY noopIndexubv(const GLubyte *c)
{
   (void) c;
   noop_warn("glIndexubv");
}

static void APIENTRY noopInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
   (void) format; (void) stride; (void) pointer;
   noop_warn("glInterleavedArrays");
}

static void APIENTRY noopNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   noop_warn("glNormalPointer");
}

static void APIENTRY noopPolygonOffset(GLfloat factor, GLfloat units)
{
   (void) factor; (void) units;
   noop_warn("glPolygonOffset");
}

static void APIENTRY noopTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   noop_warn("glTexCoordPointer");
}

static void APIENTRY noopVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   noop_warn("glVertexPointer");
}

static GLboolean APIENTRY noopAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
   (void) n; (void) textures; (void) residences;
   noop_warn("glAreTexturesResident");
   return (GLboolean) 0;
}

static void APIENTRY noopCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   (void) target; (void) level; (void) internalformat; (void) x; (void) y; (void) width; (void) border;
   noop_warn("glCopyTexImage1D");
}

static void APIENTRY noopCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   (void) target; (void) level; (void) internalformat; (void) x; (void) y; (void) width; (void) height; (void) border;
   noop_warn("glCopyTexImage2D");
}

static void APIENTRY noopCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) level; (void) xoffset; (void) x; (void) y; (void) width;
   noop_warn("glCopyTexSubImage1D");
}

static void APIENTRY noopCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) x; (void) y; (void) width; (void) height;
   noop_warn("glCopyTexSubImage2D");
}

static void APIENTRY noopDeleteTextures(GLsizei n, const GLuint *textures)
{
   (void) n; (void) textures;
   noop_warn("glDeleteTextures");
}

static void APIENTRY noopGenTextures(GLsizei n, GLuint *textures)
{
   (void) n; (void) textures;
   noop_warn("glGenTextures");
}

static void APIENTRY noopGetPointerv(GLenum pname, GLvoid **params)
{
   (void) pname; (void) params;
   noop_warn("glGetPointerv");
}

static GLboolean APIENTRY noopIsTexture(GLuint texture)
{
   (void) texture;
   noop_warn("glIsTexture");
   return (GLboolean) 0;
}

static void APIENTRY noopPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
   (void) n; (void) textures; (void) priorities;
   noop_warn("glPrioritizeTextures");
}

static void APIENTRY noopTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) type; (void) pixels;
   noop_warn("glTexSubImage1D");
}

static void APIENTRY noopTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   noop_warn("glTexSubImage2D");
}

static void APIENTRY noopPopClientAttrib(void)
{
      noop_warn("glPopClientAttrib");
}

static void APIENTRY noopPushClientAttrib(GLbitfield mask)
{
   (void) mask;
   noop_warn("glPushClientAttrib");
}

static void APIENTRY noopBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glBlendColor");
}

static void APIENTRY noopBlendEquation(GLenum mode)
{
   (void) mode;
   noop_warn("glBlendEquation");
}

static void APIENTRY noopDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
   (void) mode; (void) start; (void) end; (void) count; (void) type; (void) indices;
   noop_warn("glDrawRangeElements");
}

static void APIENTRY noopColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
   (void) target; (void) internalformat; (void) width; (void) format; (void) type; (void) table;
   noop_warn("glColorTable");
}

static void APIENTRY noopColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glColorTableParameterfv");
}

static void APIENTRY noopColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glColorTableParameteriv");
}

static void APIENTRY noopCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) internalformat; (void) x; (void) y; (void) width;
   noop_warn("glCopyColorTable");
}

static void APIENTRY noopGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
   (void) target; (void) format; (void) type; (void) table;
   noop_warn("glGetColorTable");
}

static void APIENTRY noopGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetColorTableParameterfv");
}

static void APIENTRY noopGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetColorTableParameteriv");
}

static void APIENTRY noopColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
   (void) target; (void) start; (void) count; (void) format; (void) type; (void) data;
   noop_warn("glColorSubTable");
}

static void APIENTRY noopCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) start; (void) x; (void) y; (void) width;
   noop_warn("glCopyColorSubTable");
}

static void APIENTRY noopConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
   (void) target; (void) internalformat; (void) width; (void) format; (void) type; (void) image;
   noop_warn("glConvolutionFilter1D");
}

static void APIENTRY noopConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
   (void) target; (void) internalformat; (void) width; (void) height; (void) format; (void) type; (void) image;
   noop_warn("glConvolutionFilter2D");
}

static void APIENTRY noopConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glConvolutionParameterf");
}

static void APIENTRY noopConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glConvolutionParameterfv");
}

static void APIENTRY noopConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glConvolutionParameteri");
}

static void APIENTRY noopConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glConvolutionParameteriv");
}

static void APIENTRY noopCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) internalformat; (void) x; (void) y; (void) width;
   noop_warn("glCopyConvolutionFilter1D");
}

static void APIENTRY noopCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) internalformat; (void) x; (void) y; (void) width; (void) height;
   noop_warn("glCopyConvolutionFilter2D");
}

static void APIENTRY noopGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
   (void) target; (void) format; (void) type; (void) image;
   noop_warn("glGetConvolutionFilter");
}

static void APIENTRY noopGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetConvolutionParameterfv");
}

static void APIENTRY noopGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetConvolutionParameteriv");
}

static void APIENTRY noopGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
   (void) target; (void) format; (void) type; (void) row; (void) column; (void) span;
   noop_warn("glGetSeparableFilter");
}

static void APIENTRY noopSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
   (void) target; (void) internalformat; (void) width; (void) height; (void) format; (void) type; (void) row; (void) column;
   noop_warn("glSeparableFilter2D");
}

static void APIENTRY noopGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) values;
   noop_warn("glGetHistogram");
}

static void APIENTRY noopGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetHistogramParameterfv");
}

static void APIENTRY noopGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetHistogramParameteriv");
}

static void APIENTRY noopGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) values;
   noop_warn("glGetMinmax");
}

static void APIENTRY noopGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetMinmaxParameterfv");
}

static void APIENTRY noopGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetMinmaxParameteriv");
}

static void APIENTRY noopHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
   (void) target; (void) width; (void) internalformat; (void) sink;
   noop_warn("glHistogram");
}

static void APIENTRY noopMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
   (void) target; (void) internalformat; (void) sink;
   noop_warn("glMinmax");
}

static void APIENTRY noopResetHistogram(GLenum target)
{
   (void) target;
   noop_warn("glResetHistogram");
}

static void APIENTRY noopResetMinmax(GLenum target)
{
   (void) target;
   noop_warn("glResetMinmax");
}

static void APIENTRY noopTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) depth; (void) border; (void) format; (void) type; (void) pixels;
   noop_warn("glTexImage3D");
}

static void APIENTRY noopTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) pixels;
   noop_warn("glTexSubImage3D");
}

static void APIENTRY noopCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) x; (void) y; (void) width; (void) height;
   noop_warn("glCopyTexSubImage3D");
}

static void APIENTRY noopActiveTexture(GLenum texture)
{
   (void) texture;
   noop_warn("glActiveTexture");
}

static void APIENTRY noopClientActiveTexture(GLenum texture)
{
   (void) texture;
   noop_warn("glClientActiveTexture");
}

static void APIENTRY noopMultiTexCoord1d(GLenum target, GLdouble s)
{
   (void) target; (void) s;
   noop_warn("glMultiTexCoord1d");
}

static void APIENTRY noopMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord1dv");
}

static void APIENTRY noopMultiTexCoord1fARB(GLenum target, GLfloat s)
{
   (void) target; (void) s;
   noop_warn("glMultiTexCoord1fARB");
}

static void APIENTRY noopMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord1fvARB");
}

static void APIENTRY noopMultiTexCoord1i(GLenum target, GLint s)
{
   (void) target; (void) s;
   noop_warn("glMultiTexCoord1i");
}

static void APIENTRY noopMultiTexCoord1iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord1iv");
}

static void APIENTRY noopMultiTexCoord1s(GLenum target, GLshort s)
{
   (void) target; (void) s;
   noop_warn("glMultiTexCoord1s");
}

static void APIENTRY noopMultiTexCoord1sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord1sv");
}

static void APIENTRY noopMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
   (void) target; (void) s; (void) t;
   noop_warn("glMultiTexCoord2d");
}

static void APIENTRY noopMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord2dv");
}

static void APIENTRY noopMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
   (void) target; (void) s; (void) t;
   noop_warn("glMultiTexCoord2fARB");
}

static void APIENTRY noopMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord2fvARB");
}

static void APIENTRY noopMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
   (void) target; (void) s; (void) t;
   noop_warn("glMultiTexCoord2i");
}

static void APIENTRY noopMultiTexCoord2iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord2iv");
}

static void APIENTRY noopMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
   (void) target; (void) s; (void) t;
   noop_warn("glMultiTexCoord2s");
}

static void APIENTRY noopMultiTexCoord2sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord2sv");
}

static void APIENTRY noopMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
   (void) target; (void) s; (void) t; (void) r;
   noop_warn("glMultiTexCoord3d");
}

static void APIENTRY noopMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord3dv");
}

static void APIENTRY noopMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
   (void) target; (void) s; (void) t; (void) r;
   noop_warn("glMultiTexCoord3fARB");
}

static void APIENTRY noopMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord3fvARB");
}

static void APIENTRY noopMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
   (void) target; (void) s; (void) t; (void) r;
   noop_warn("glMultiTexCoord3i");
}

static void APIENTRY noopMultiTexCoord3iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord3iv");
}

static void APIENTRY noopMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
   (void) target; (void) s; (void) t; (void) r;
   noop_warn("glMultiTexCoord3s");
}

static void APIENTRY noopMultiTexCoord3sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord3sv");
}

static void APIENTRY noopMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   noop_warn("glMultiTexCoord4d");
}

static void APIENTRY noopMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord4dv");
}

static void APIENTRY noopMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   noop_warn("glMultiTexCoord4fARB");
}

static void APIENTRY noopMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord4fvARB");
}

static void APIENTRY noopMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   noop_warn("glMultiTexCoord4i");
}

static void APIENTRY noopMultiTexCoord4iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord4iv");
}

static void APIENTRY noopMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   noop_warn("glMultiTexCoord4s");
}

static void APIENTRY noopMultiTexCoord4sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   noop_warn("glMultiTexCoord4sv");
}

static void APIENTRY noopCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) border; (void) imageSize; (void) data;
   noop_warn("glCompressedTexImage1D");
}

static void APIENTRY noopCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) border; (void) imageSize; (void) data;
   noop_warn("glCompressedTexImage2D");
}

static void APIENTRY noopCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) depth; (void) border; (void) imageSize; (void) data;
   noop_warn("glCompressedTexImage3D");
}

static void APIENTRY noopCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) imageSize; (void) data;
   noop_warn("glCompressedTexSubImage1D");
}

static void APIENTRY noopCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) imageSize; (void) data;
   noop_warn("glCompressedTexSubImage2D");
}

static void APIENTRY noopCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) imageSize; (void) data;
   noop_warn("glCompressedTexSubImage3D");
}

static void APIENTRY noopGetCompressedTexImage(GLenum target, GLint level, GLvoid *img)
{
   (void) target; (void) level; (void) img;
   noop_warn("glGetCompressedTexImage");
}

static void APIENTRY noopLoadTransposeMatrixd(const GLdouble *m)
{
   (void) m;
   noop_warn("glLoadTransposeMatrixd");
}

static void APIENTRY noopLoadTransposeMatrixf(const GLfloat *m)
{
   (void) m;
   noop_warn("glLoadTransposeMatrixf");
}

static void APIENTRY noopMultTransposeMatrixd(const GLdouble *m)
{
   (void) m;
   noop_warn("glMultTransposeMatrixd");
}

static void APIENTRY noopMultTransposeMatrixf(const GLfloat *m)
{
   (void) m;
   noop_warn("glMultTransposeMatrixf");
}

static void APIENTRY noopSampleCoverage(GLclampf value, GLboolean invert)
{
   (void) value; (void) invert;
   noop_warn("glSampleCoverage");
}

static void APIENTRY noopBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   (void) sfactorRGB; (void) dfactorRGB; (void) sfactorAlpha; (void) dfactorAlpha;
   noop_warn("glBlendFuncSeparate");
}

static void APIENTRY noopFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   noop_warn("glFogCoordPointer");
}

static void APIENTRY noopFogCoordd(GLdouble coord)
{
   (void) coord;
   noop_warn("glFogCoordd");
}

static void APIENTRY noopFogCoorddv(const GLdouble *coord)
{
   (void) coord;
   noop_warn("glFogCoorddv");
}

static void APIENTRY noopMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   (void) mode; (void) first; (void) count; (void) primcount;
   noop_warn("glMultiDrawArrays");
}

static void APIENTRY noopPointParameterf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   noop_warn("glPointParameterf");
}

static void APIENTRY noopPointParameterfv(GLenum pname, const GLfloat *params)
{
   (void) pname; (void) params;
   noop_warn("glPointParameterfv");
}

static void APIENTRY noopPointParameteri(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   noop_warn("glPointParameteri");
}

static void APIENTRY noopPointParameteriv(GLenum pname, const GLint *params)
{
   (void) pname; (void) params;
   noop_warn("glPointParameteriv");
}

static void APIENTRY noopSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3b");
}

static void APIENTRY noopSecondaryColor3bv(const GLbyte *v)
{
   (void) v;
   noop_warn("glSecondaryColor3bv");
}

static void APIENTRY noopSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3d");
}

static void APIENTRY noopSecondaryColor3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glSecondaryColor3dv");
}

static void APIENTRY noopSecondaryColor3i(GLint red, GLint green, GLint blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3i");
}

static void APIENTRY noopSecondaryColor3iv(const GLint *v)
{
   (void) v;
   noop_warn("glSecondaryColor3iv");
}

static void APIENTRY noopSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3s");
}

static void APIENTRY noopSecondaryColor3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glSecondaryColor3sv");
}

static void APIENTRY noopSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3ub");
}

static void APIENTRY noopSecondaryColor3ubv(const GLubyte *v)
{
   (void) v;
   noop_warn("glSecondaryColor3ubv");
}

static void APIENTRY noopSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3ui");
}

static void APIENTRY noopSecondaryColor3uiv(const GLuint *v)
{
   (void) v;
   noop_warn("glSecondaryColor3uiv");
}

static void APIENTRY noopSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3us");
}

static void APIENTRY noopSecondaryColor3usv(const GLushort *v)
{
   (void) v;
   noop_warn("glSecondaryColor3usv");
}

static void APIENTRY noopSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   noop_warn("glSecondaryColorPointer");
}

static void APIENTRY noopWindowPos2d(GLdouble x, GLdouble y)
{
   (void) x; (void) y;
   noop_warn("glWindowPos2d");
}

static void APIENTRY noopWindowPos2dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glWindowPos2dv");
}

static void APIENTRY noopWindowPos2f(GLfloat x, GLfloat y)
{
   (void) x; (void) y;
   noop_warn("glWindowPos2f");
}

static void APIENTRY noopWindowPos2fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glWindowPos2fv");
}

static void APIENTRY noopWindowPos2i(GLint x, GLint y)
{
   (void) x; (void) y;
   noop_warn("glWindowPos2i");
}

static void APIENTRY noopWindowPos2iv(const GLint *v)
{
   (void) v;
   noop_warn("glWindowPos2iv");
}

static void APIENTRY noopWindowPos2s(GLshort x, GLshort y)
{
   (void) x; (void) y;
   noop_warn("glWindowPos2s");
}

static void APIENTRY noopWindowPos2sv(const GLshort *v)
{
   (void) v;
   noop_warn("glWindowPos2sv");
}

static void APIENTRY noopWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glWindowPos3d");
}

static void APIENTRY noopWindowPos3dv(const GLdouble *v)
{
   (void) v;
   noop_warn("glWindowPos3dv");
}

static void APIENTRY noopWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glWindowPos3f");
}

static void APIENTRY noopWindowPos3fv(const GLfloat *v)
{
   (void) v;
   noop_warn("glWindowPos3fv");
}

static void APIENTRY noopWindowPos3i(GLint x, GLint y, GLint z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glWindowPos3i");
}

static void APIENTRY noopWindowPos3iv(const GLint *v)
{
   (void) v;
   noop_warn("glWindowPos3iv");
}

static void APIENTRY noopWindowPos3s(GLshort x, GLshort y, GLshort z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glWindowPos3s");
}

static void APIENTRY noopWindowPos3sv(const GLshort *v)
{
   (void) v;
   noop_warn("glWindowPos3sv");
}

static void APIENTRY noopBeginQuery(GLenum target, GLuint id)
{
   (void) target; (void) id;
   noop_warn("glBeginQuery");
}

static void APIENTRY noopBindBuffer(GLenum target, GLuint buffer)
{
   (void) target; (void) buffer;
   noop_warn("glBindBuffer");
}

static void APIENTRY noopBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   (void) target; (void) size; (void) data; (void) usage;
   noop_warn("glBufferData");
}

static void APIENTRY noopBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   (void) target; (void) offset; (void) size; (void) data;
   noop_warn("glBufferSubData");
}

static void APIENTRY noopDeleteBuffers(GLsizei n, const GLuint *buffer)
{
   (void) n; (void) buffer;
   noop_warn("glDeleteBuffers");
}

static void APIENTRY noopDeleteQueries(GLsizei n, const GLuint *ids)
{
   (void) n; (void) ids;
   noop_warn("glDeleteQueries");
}

static void APIENTRY noopEndQuery(GLenum target)
{
   (void) target;
   noop_warn("glEndQuery");
}

static void APIENTRY noopGenBuffers(GLsizei n, GLuint *buffer)
{
   (void) n; (void) buffer;
   noop_warn("glGenBuffers");
}

static void APIENTRY noopGenQueries(GLsizei n, GLuint *ids)
{
   (void) n; (void) ids;
   noop_warn("glGenQueries");
}

static void APIENTRY noopGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetBufferParameteriv");
}

static void APIENTRY noopGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetBufferPointerv");
}

static void APIENTRY noopGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   (void) target; (void) offset; (void) size; (void) data;
   noop_warn("glGetBufferSubData");
}

static void APIENTRY noopGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
   (void) id; (void) pname; (void) params;
   noop_warn("glGetQueryObjectiv");
}

static void APIENTRY noopGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
   (void) id; (void) pname; (void) params;
   noop_warn("glGetQueryObjectuiv");
}

static void APIENTRY noopGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetQueryiv");
}

static GLboolean APIENTRY noopIsBuffer(GLuint buffer)
{
   (void) buffer;
   noop_warn("glIsBuffer");
   return (GLboolean) 0;
}

static GLboolean APIENTRY noopIsQuery(GLuint id)
{
   (void) id;
   noop_warn("glIsQuery");
   return (GLboolean) 0;
}

static GLvoid * APIENTRY noopMapBuffer(GLenum target, GLenum access)
{
   (void) target; (void) access;
   noop_warn("glMapBuffer");
   return (GLvoid *) 0;
}

static GLboolean APIENTRY noopUnmapBuffer(GLenum target)
{
   (void) target;
   noop_warn("glUnmapBuffer");
   return (GLboolean) 0;
}

static void APIENTRY noopAttachShader(GLuint program, GLuint shader)
{
   (void) program; (void) shader;
   noop_warn("glAttachShader");
}

static void APIENTRY noopBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
   (void) program; (void) index; (void) name;
   noop_warn("glBindAttribLocation");
}

static void APIENTRY noopBlendEquationSeparate(GLenum modeRGB, GLenum modeA)
{
   (void) modeRGB; (void) modeA;
   noop_warn("glBlendEquationSeparate");
}

static void APIENTRY noopCompileShader(GLuint shader)
{
   (void) shader;
   noop_warn("glCompileShader");
}

static GLuint APIENTRY noopCreateProgram(void)
{
      noop_warn("glCreateProgram");
   return (GLuint) 0;
}

static GLuint APIENTRY noopCreateShader(GLenum type)
{
   (void) type;
   noop_warn("glCreateShader");
   return (GLuint) 0;
}

static void APIENTRY noopDeleteProgram(GLuint program)
{
   (void) program;
   noop_warn("glDeleteProgram");
}

static void APIENTRY noopDeleteShader(GLuint program)
{
   (void) program;
   noop_warn("glDeleteShader");
}

static void APIENTRY noopDetachShader(GLuint program, GLuint shader)
{
   (void) program; (void) shader;
   noop_warn("glDetachShader");
}

static void APIENTRY noopDisableVertexAttribArray(GLuint index)
{
   (void) index;
   noop_warn("glDisableVertexAttribArray");
}

static void APIENTRY noopDrawBuffers(GLsizei n, const GLenum *bufs)
{
   (void) n; (void) bufs;
   noop_warn("glDrawBuffers");
}

static void APIENTRY noopEnableVertexAttribArray(GLuint index)
{
   (void) index;
   noop_warn("glEnableVertexAttribArray");
}

static void APIENTRY noopGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   (void) program; (void) index; (void) bufSize; (void) length; (void) size; (void) type; (void) name;
   noop_warn("glGetActiveAttrib");
}

static void APIENTRY noopGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   (void) program; (void) index; (void) bufSize; (void) length; (void) size; (void) type; (void) name;
   noop_warn("glGetActiveUniform");
}

static void APIENTRY noopGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
{
   (void) program; (void) maxCount; (void) count; (void) obj;
   noop_warn("glGetAttachedShaders");
}

static GLint APIENTRY noopGetAttribLocation(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   noop_warn("glGetAttribLocation");
   return (GLint) 0;
}

static void APIENTRY noopGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   (void) program; (void) bufSize; (void) length; (void) infoLog;
   noop_warn("glGetProgramInfoLog");
}

static void APIENTRY noopGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
   (void) program; (void) pname; (void) params;
   noop_warn("glGetProgramiv");
}

static void APIENTRY noopGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   (void) shader; (void) bufSize; (void) length; (void) infoLog;
   noop_warn("glGetShaderInfoLog");
}

static void APIENTRY noopGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
   (void) shader; (void) bufSize; (void) length; (void) source;
   noop_warn("glGetShaderSource");
}

static void APIENTRY noopGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
   (void) shader; (void) pname; (void) params;
   noop_warn("glGetShaderiv");
}

static GLint APIENTRY noopGetUniformLocation(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   noop_warn("glGetUniformLocation");
   return (GLint) 0;
}

static void APIENTRY noopGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
   (void) program; (void) location; (void) params;
   noop_warn("glGetUniformfv");
}

static void APIENTRY noopGetUniformiv(GLuint program, GLint location, GLint *params)
{
   (void) program; (void) location; (void) params;
   noop_warn("glGetUniformiv");
}

static void APIENTRY noopGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
   (void) index; (void) pname; (void) pointer;
   noop_warn("glGetVertexAttribPointerv");
}

static void APIENTRY noopGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribdv");
}

static void APIENTRY noopGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribfv");
}

static void APIENTRY noopGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribiv");
}

static GLboolean APIENTRY noopIsProgram(GLuint program)
{
   (void) program;
   noop_warn("glIsProgram");
   return (GLboolean) 0;
}

static GLboolean APIENTRY noopIsShader(GLuint shader)
{
   (void) shader;
   noop_warn("glIsShader");
   return (GLboolean) 0;
}

static void APIENTRY noopLinkProgram(GLuint program)
{
   (void) program;
   noop_warn("glLinkProgram");
}

static void APIENTRY noopShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
   (void) shader; (void) count; (void) string; (void) length;
   noop_warn("glShaderSource");
}

static void APIENTRY noopStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   (void) face; (void) func; (void) ref; (void) mask;
   noop_warn("glStencilFuncSeparate");
}

static void APIENTRY noopStencilMaskSeparate(GLenum face, GLuint mask)
{
   (void) face; (void) mask;
   noop_warn("glStencilMaskSeparate");
}

static void APIENTRY noopStencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)
{
   (void) face; (void) sfail; (void) zfail; (void) zpass;
   noop_warn("glStencilOpSeparate");
}

static void APIENTRY noopUniform1f(GLint location, GLfloat v0)
{
   (void) location; (void) v0;
   noop_warn("glUniform1f");
}

static void APIENTRY noopUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform1fv");
}

static void APIENTRY noopUniform1i(GLint location, GLint v0)
{
   (void) location; (void) v0;
   noop_warn("glUniform1i");
}

static void APIENTRY noopUniform1iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform1iv");
}

static void APIENTRY noopUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
   (void) location; (void) v0; (void) v1;
   noop_warn("glUniform2f");
}

static void APIENTRY noopUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform2fv");
}

static void APIENTRY noopUniform2i(GLint location, GLint v0, GLint v1)
{
   (void) location; (void) v0; (void) v1;
   noop_warn("glUniform2i");
}

static void APIENTRY noopUniform2iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform2iv");
}

static void APIENTRY noopUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   (void) location; (void) v0; (void) v1; (void) v2;
   noop_warn("glUniform3f");
}

static void APIENTRY noopUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform3fv");
}

static void APIENTRY noopUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
   (void) location; (void) v0; (void) v1; (void) v2;
   noop_warn("glUniform3i");
}

static void APIENTRY noopUniform3iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform3iv");
}

static void APIENTRY noopUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   (void) location; (void) v0; (void) v1; (void) v2; (void) v3;
   noop_warn("glUniform4f");
}

static void APIENTRY noopUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform4fv");
}

static void APIENTRY noopUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   (void) location; (void) v0; (void) v1; (void) v2; (void) v3;
   noop_warn("glUniform4i");
}

static void APIENTRY noopUniform4iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform4iv");
}

static void APIENTRY noopUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix2fv");
}

static void APIENTRY noopUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix3fv");
}

static void APIENTRY noopUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix4fv");
}

static void APIENTRY noopUseProgram(GLuint program)
{
   (void) program;
   noop_warn("glUseProgram");
}

static void APIENTRY noopValidateProgram(GLuint program)
{
   (void) program;
   noop_warn("glValidateProgram");
}

static void APIENTRY noopVertexAttrib1d(GLuint index, GLdouble x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttrib1d");
}

static void APIENTRY noopVertexAttrib1dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib1dv");
}

static void APIENTRY noopVertexAttrib1s(GLuint index, GLshort x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttrib1s");
}

static void APIENTRY noopVertexAttrib1sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib1sv");
}

static void APIENTRY noopVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttrib2d");
}

static void APIENTRY noopVertexAttrib2dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib2dv");
}

static void APIENTRY noopVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttrib2s");
}

static void APIENTRY noopVertexAttrib2sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib2sv");
}

static void APIENTRY noopVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttrib3d");
}

static void APIENTRY noopVertexAttrib3dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib3dv");
}

static void APIENTRY noopVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttrib3s");
}

static void APIENTRY noopVertexAttrib3sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib3sv");
}

static void APIENTRY noopVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4Nbv");
}

static void APIENTRY noopVertexAttrib4Niv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4Niv");
}

static void APIENTRY noopVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4Nsv");
}

static void APIENTRY noopVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4Nub");
}

static void APIENTRY noopVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4Nubv");
}

static void APIENTRY noopVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4Nuiv");
}

static void APIENTRY noopVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4Nusv");
}

static void APIENTRY noopVertexAttrib4bv(GLuint index, const GLbyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4bv");
}

static void APIENTRY noopVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4d");
}

static void APIENTRY noopVertexAttrib4dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4dv");
}

static void APIENTRY noopVertexAttrib4iv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4iv");
}

static void APIENTRY noopVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4s");
}

static void APIENTRY noopVertexAttrib4sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4sv");
}

static void APIENTRY noopVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4ubv");
}

static void APIENTRY noopVertexAttrib4uiv(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4uiv");
}

static void APIENTRY noopVertexAttrib4usv(GLuint index, const GLushort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4usv");
}

static void APIENTRY noopVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   (void) index; (void) size; (void) type; (void) normalized; (void) stride; (void) pointer;
   noop_warn("glVertexAttribPointer");
}

static void APIENTRY noopUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix2x3fv");
}

static void APIENTRY noopUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix2x4fv");
}

static void APIENTRY noopUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix3x2fv");
}

static void APIENTRY noopUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix3x4fv");
}

static void APIENTRY noopUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix4x2fv");
}

static void APIENTRY noopUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   noop_warn("glUniformMatrix4x3fv");
}

static void APIENTRY noopBeginConditionalRender(GLuint query, GLenum mode)
{
   (void) query; (void) mode;
   noop_warn("glBeginConditionalRender");
}

static void APIENTRY noopBeginTransformFeedback(GLenum mode)
{
   (void) mode;
   noop_warn("glBeginTransformFeedback");
}

static void APIENTRY noopBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
   (void) target; (void) index; (void) buffer;
   noop_warn("glBindBufferBase");
}

static void APIENTRY noopBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) target; (void) index; (void) buffer; (void) offset; (void) size;
   noop_warn("glBindBufferRange");
}

static void APIENTRY noopBindFragDataLocation(GLuint program, GLuint colorNumber, const GLchar *name)
{
   (void) program; (void) colorNumber; (void) name;
   noop_warn("glBindFragDataLocation");
}

static void APIENTRY noopClampColor(GLenum target, GLenum clamp)
{
   (void) target; (void) clamp;
   noop_warn("glClampColor");
}

static void APIENTRY noopClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   (void) buffer; (void) drawbuffer; (void) depth; (void) stencil;
   noop_warn("glClearBufferfi");
}

static void APIENTRY noopClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   (void) buffer; (void) drawbuffer; (void) value;
   noop_warn("glClearBufferfv");
}

static void APIENTRY noopClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
   (void) buffer; (void) drawbuffer; (void) value;
   noop_warn("glClearBufferiv");
}

static void APIENTRY noopClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   (void) buffer; (void) drawbuffer; (void) value;
   noop_warn("glClearBufferuiv");
}

static void APIENTRY noopColorMaski(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
   (void) buf; (void) r; (void) g; (void) b; (void) a;
   noop_warn("glColorMaski");
}

static void APIENTRY noopDisablei(GLenum target, GLuint index)
{
   (void) target; (void) index;
   noop_warn("glDisablei");
}

static void APIENTRY noopEnablei(GLenum target, GLuint index)
{
   (void) target; (void) index;
   noop_warn("glEnablei");
}

static void APIENTRY noopEndConditionalRender(void)
{
      noop_warn("glEndConditionalRender");
}

static void APIENTRY noopEndTransformFeedback(void)
{
      noop_warn("glEndTransformFeedback");
}

static void APIENTRY noopGetBooleani_v(GLenum value, GLuint index, GLboolean *data)
{
   (void) value; (void) index; (void) data;
   noop_warn("glGetBooleani_v");
}

static GLint APIENTRY noopGetFragDataLocation(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   noop_warn("glGetFragDataLocation");
   return (GLint) 0;
}

static void APIENTRY noopGetIntegeri_v(GLenum value, GLuint index, GLint *data)
{
   (void) value; (void) index; (void) data;
   noop_warn("glGetIntegeri_v");
}

static const GLubyte * APIENTRY noopGetStringi(GLenum name, GLuint index)
{
   (void) name; (void) index;
   noop_warn("glGetStringi");
   return (const GLubyte *) 0;
}

static void APIENTRY noopGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexParameterIiv");
}

static void APIENTRY noopGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexParameterIuiv");
}

static void APIENTRY noopGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
   (void) program; (void) index; (void) bufSize; (void) length; (void) size; (void) type; (void) name;
   noop_warn("glGetTransformFeedbackVarying");
}

static void APIENTRY noopGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
   (void) program; (void) location; (void) params;
   noop_warn("glGetUniformuiv");
}

static void APIENTRY noopGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribIiv");
}

static void APIENTRY noopGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribIuiv");
}

static GLboolean APIENTRY noopIsEnabledi(GLenum target, GLuint index)
{
   (void) target; (void) index;
   noop_warn("glIsEnabledi");
   return (GLboolean) 0;
}

static void APIENTRY noopTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexParameterIiv");
}

static void APIENTRY noopTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexParameterIuiv");
}

static void APIENTRY noopTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
   (void) program; (void) count; (void) varyings; (void) bufferMode;
   noop_warn("glTransformFeedbackVaryings");
}

static void APIENTRY noopUniform1ui(GLint location, GLuint x)
{
   (void) location; (void) x;
   noop_warn("glUniform1ui");
}

static void APIENTRY noopUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform1uiv");
}

static void APIENTRY noopUniform2ui(GLint location, GLuint x, GLuint y)
{
   (void) location; (void) x; (void) y;
   noop_warn("glUniform2ui");
}

static void APIENTRY noopUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform2uiv");
}

static void APIENTRY noopUniform3ui(GLint location, GLuint x, GLuint y, GLuint z)
{
   (void) location; (void) x; (void) y; (void) z;
   noop_warn("glUniform3ui");
}

static void APIENTRY noopUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform3uiv");
}

static void APIENTRY noopUniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   (void) location; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glUniform4ui");
}

static void APIENTRY noopUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   noop_warn("glUniform4uiv");
}

static void APIENTRY noopVertexAttribI1iv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI1iv");
}

static void APIENTRY noopVertexAttribI1uiv(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI1uiv");
}

static void APIENTRY noopVertexAttribI4bv(GLuint index, const GLbyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI4bv");
}

static void APIENTRY noopVertexAttribI4sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI4sv");
}

static void APIENTRY noopVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI4ubv");
}

static void APIENTRY noopVertexAttribI4usv(GLuint index, const GLushort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI4usv");
}

static void APIENTRY noopVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) index; (void) size; (void) type; (void) stride; (void) pointer;
   noop_warn("glVertexAttribIPointer");
}

static void APIENTRY noopPrimitiveRestartIndex(GLuint index)
{
   (void) index;
   noop_warn("glPrimitiveRestartIndex");
}

static void APIENTRY noopTexBuffer(GLenum target, GLenum internalFormat, GLuint buffer)
{
   (void) target; (void) internalFormat; (void) buffer;
   noop_warn("glTexBuffer");
}

static void APIENTRY noopFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   (void) target; (void) attachment; (void) texture; (void) level;
   noop_warn("glFramebufferTexture");
}

static void APIENTRY noopGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetBufferParameteri64v");
}

static void APIENTRY noopGetInteger64i_v(GLenum cap, GLuint index, GLint64 *data)
{
   (void) cap; (void) index; (void) data;
   noop_warn("glGetInteger64i_v");
}

static void APIENTRY noopVertexAttribDivisor(GLuint index, GLuint divisor)
{
   (void) index; (void) divisor;
   noop_warn("glVertexAttribDivisor");
}

static void APIENTRY noopBindProgramARB(GLenum target, GLuint program)
{
   (void) target; (void) program;
   noop_warn("glBindProgramARB");
}

static void APIENTRY noopDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
   (void) n; (void) programs;
   noop_warn("glDeleteProgramsARB");
}

static void APIENTRY noopGenProgramsARB(GLsizei n, GLuint *programs)
{
   (void) n; (void) programs;
   noop_warn("glGenProgramsARB");
}

static void APIENTRY noopGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glGetProgramEnvParameterdvARB");
}

static void APIENTRY noopGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glGetProgramEnvParameterfvARB");
}

static void APIENTRY noopGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glGetProgramLocalParameterdvARB");
}

static void APIENTRY noopGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glGetProgramLocalParameterfvARB");
}

static void APIENTRY noopGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
   (void) target; (void) pname; (void) string;
   noop_warn("glGetProgramStringARB");
}

static void APIENTRY noopGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetProgramivARB");
}

static GLboolean APIENTRY noopIsProgramARB(GLuint program)
{
   (void) program;
   noop_warn("glIsProgramARB");
   return (GLboolean) 0;
}

static void APIENTRY noopProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glProgramEnvParameter4dARB");
}

static void APIENTRY noopProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glProgramEnvParameter4dvARB");
}

static void APIENTRY noopProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glProgramEnvParameter4fARB");
}

static void APIENTRY noopProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glProgramEnvParameter4fvARB");
}

static void APIENTRY noopProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glProgramLocalParameter4dARB");
}

static void APIENTRY noopProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glProgramLocalParameter4dvARB");
}

static void APIENTRY noopProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glProgramLocalParameter4fARB");
}

static void APIENTRY noopProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   (void) target; (void) index; (void) params;
   noop_warn("glProgramLocalParameter4fvARB");
}

static void APIENTRY noopProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
   (void) target; (void) format; (void) len; (void) string;
   noop_warn("glProgramStringARB");
}

static void APIENTRY noopVertexAttrib1fARB(GLuint index, GLfloat x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttrib1fARB");
}

static void APIENTRY noopVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib1fvARB");
}

static void APIENTRY noopVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttrib2fARB");
}

static void APIENTRY noopVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib2fvARB");
}

static void APIENTRY noopVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttrib3fARB");
}

static void APIENTRY noopVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib3fvARB");
}

static void APIENTRY noopVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4fARB");
}

static void APIENTRY noopVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4fvARB");
}

static void APIENTRY noopAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
   (void) containerObj; (void) obj;
   noop_warn("glAttachObjectARB");
}

static GLhandleARB APIENTRY noopCreateProgramObjectARB(void)
{
      noop_warn("glCreateProgramObjectARB");
   return (GLhandleARB) 0;
}

static GLhandleARB APIENTRY noopCreateShaderObjectARB(GLenum shaderType)
{
   (void) shaderType;
   noop_warn("glCreateShaderObjectARB");
   return (GLhandleARB) 0;
}

static void APIENTRY noopDeleteObjectARB(GLhandleARB obj)
{
   (void) obj;
   noop_warn("glDeleteObjectARB");
}

static void APIENTRY noopDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
   (void) containerObj; (void) attachedObj;
   noop_warn("glDetachObjectARB");
}

static void APIENTRY noopGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog)
{
   (void) containerObj; (void) maxLength; (void) length; (void) infoLog;
   noop_warn("glGetAttachedObjectsARB");
}

static GLhandleARB APIENTRY noopGetHandleARB(GLenum pname)
{
   (void) pname;
   noop_warn("glGetHandleARB");
   return (GLhandleARB) 0;
}

static void APIENTRY noopGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
   (void) obj; (void) maxLength; (void) length; (void) infoLog;
   noop_warn("glGetInfoLogARB");
}

static void APIENTRY noopGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
   (void) obj; (void) pname; (void) params;
   noop_warn("glGetObjectParameterfvARB");
}

static void APIENTRY noopGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
   (void) obj; (void) pname; (void) params;
   noop_warn("glGetObjectParameterivARB");
}

static void APIENTRY noopDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
   (void) mode; (void) first; (void) count; (void) primcount;
   noop_warn("glDrawArraysInstancedARB");
}

static void APIENTRY noopDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount;
   noop_warn("glDrawElementsInstancedARB");
}

static void APIENTRY noopBindFramebuffer(GLenum target, GLuint framebuffer)
{
   (void) target; (void) framebuffer;
   noop_warn("glBindFramebuffer");
}

static void APIENTRY noopBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
   (void) target; (void) renderbuffer;
   noop_warn("glBindRenderbuffer");
}

static void APIENTRY noopBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   (void) srcX0; (void) srcY0; (void) srcX1; (void) srcY1; (void) dstX0; (void) dstY0; (void) dstX1; (void) dstY1; (void) mask; (void) filter;
   noop_warn("glBlitFramebuffer");
}

static GLenum APIENTRY noopCheckFramebufferStatus(GLenum target)
{
   (void) target;
   noop_warn("glCheckFramebufferStatus");
   return (GLenum) 0;
}

static void APIENTRY noopDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
   (void) n; (void) framebuffers;
   noop_warn("glDeleteFramebuffers");
}

static void APIENTRY noopDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
   (void) n; (void) renderbuffers;
   noop_warn("glDeleteRenderbuffers");
}

static void APIENTRY noopFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   (void) target; (void) attachment; (void) renderbuffertarget; (void) renderbuffer;
   noop_warn("glFramebufferRenderbuffer");
}

static void APIENTRY noopFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level;
   noop_warn("glFramebufferTexture1D");
}

static void APIENTRY noopFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level;
   noop_warn("glFramebufferTexture2D");
}

static void APIENTRY noopFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level; (void) zoffset;
   noop_warn("glFramebufferTexture3D");
}

static void APIENTRY noopFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   (void) target; (void) attachment; (void) texture; (void) level; (void) layer;
   noop_warn("glFramebufferTextureLayer");
}

static void APIENTRY noopGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
   (void) n; (void) framebuffers;
   noop_warn("glGenFramebuffers");
}

static void APIENTRY noopGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   (void) n; (void) renderbuffers;
   noop_warn("glGenRenderbuffers");
}

static void APIENTRY noopGenerateMipmap(GLenum target)
{
   (void) target;
   noop_warn("glGenerateMipmap");
}

static void APIENTRY noopGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   (void) target; (void) attachment; (void) pname; (void) params;
   noop_warn("glGetFramebufferAttachmentParameteriv");
}

static void APIENTRY noopGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetRenderbufferParameteriv");
}

static GLboolean APIENTRY noopIsFramebuffer(GLuint framebuffer)
{
   (void) framebuffer;
   noop_warn("glIsFramebuffer");
   return (GLboolean) 0;
}

static GLboolean APIENTRY noopIsRenderbuffer(GLuint renderbuffer)
{
   (void) renderbuffer;
   noop_warn("glIsRenderbuffer");
   return (GLboolean) 0;
}

static void APIENTRY noopRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) target; (void) internalformat; (void) width; (void) height;
   noop_warn("glRenderbufferStorage");
}

static void APIENTRY noopRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height;
   noop_warn("glRenderbufferStorageMultisample");
}

static void APIENTRY noopFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
   (void) target; (void) attachment; (void) texture; (void) level; (void) face;
   noop_warn("glFramebufferTextureFaceARB");
}

static void APIENTRY noopFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
   (void) target; (void) offset; (void) length;
   noop_warn("glFlushMappedBufferRange");
}

static GLvoid * APIENTRY noopMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   (void) target; (void) offset; (void) length; (void) access;
   noop_warn("glMapBufferRange");
   return (GLvoid *) 0;
}

static void APIENTRY noopBindVertexArray(GLuint array)
{
   (void) array;
   noop_warn("glBindVertexArray");
}

static void APIENTRY noopDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
   (void) n; (void) arrays;
   noop_warn("glDeleteVertexArrays");
}

static void APIENTRY noopGenVertexArrays(GLsizei n, GLuint *arrays)
{
   (void) n; (void) arrays;
   noop_warn("glGenVertexArrays");
}

static GLboolean APIENTRY noopIsVertexArray(GLuint array)
{
   (void) array;
   noop_warn("glIsVertexArray");
   return (GLboolean) 0;
}

static void APIENTRY noopGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
   (void) program; (void) uniformBlockIndex; (void) bufSize; (void) length; (void) uniformBlockName;
   noop_warn("glGetActiveUniformBlockName");
}

static void APIENTRY noopGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
   (void) program; (void) uniformBlockIndex; (void) pname; (void) params;
   noop_warn("glGetActiveUniformBlockiv");
}

static void APIENTRY noopGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
   (void) program; (void) uniformIndex; (void) bufSize; (void) length; (void) uniformName;
   noop_warn("glGetActiveUniformName");
}

static void APIENTRY noopGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
   (void) program; (void) uniformCount; (void) uniformIndices; (void) pname; (void) params;
   noop_warn("glGetActiveUniformsiv");
}

static GLuint APIENTRY noopGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
   (void) program; (void) uniformBlockName;
   noop_warn("glGetUniformBlockIndex");
   return (GLuint) 0;
}

static void APIENTRY noopGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
   (void) program; (void) uniformCount; (void) uniformNames; (void) uniformIndices;
   noop_warn("glGetUniformIndices");
}

static void APIENTRY noopUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
   (void) program; (void) uniformBlockIndex; (void) uniformBlockBinding;
   noop_warn("glUniformBlockBinding");
}

static void APIENTRY noopCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   (void) readTarget; (void) writeTarget; (void) readOffset; (void) writeOffset; (void) size;
   noop_warn("glCopyBufferSubData");
}

static GLenum APIENTRY noopClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   (void) sync; (void) flags; (void) timeout;
   noop_warn("glClientWaitSync");
   return (GLenum) 0;
}

static void APIENTRY noopDeleteSync(GLsync sync)
{
   (void) sync;
   noop_warn("glDeleteSync");
}

static GLsync APIENTRY noopFenceSync(GLenum condition, GLbitfield flags)
{
   (void) condition; (void) flags;
   noop_warn("glFenceSync");
   return (GLsync) 0;
}

static void APIENTRY noopGetInteger64v(GLenum pname, GLint64 *params)
{
   (void) pname; (void) params;
   noop_warn("glGetInteger64v");
}

static void APIENTRY noopGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   (void) sync; (void) pname; (void) bufSize; (void) length; (void) values;
   noop_warn("glGetSynciv");
}

static GLboolean APIENTRY noopIsSync(GLsync sync)
{
   (void) sync;
   noop_warn("glIsSync");
   return (GLboolean) 0;
}

static void APIENTRY noopWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   (void) sync; (void) flags; (void) timeout;
   noop_warn("glWaitSync");
}

static void APIENTRY noopDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) basevertex;
   noop_warn("glDrawElementsBaseVertex");
}

static void APIENTRY noopDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) basevertex;
   noop_warn("glDrawElementsInstancedBaseVertex");
}

static void APIENTRY noopDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   (void) mode; (void) start; (void) end; (void) count; (void) type; (void) indices; (void) basevertex;
   noop_warn("glDrawRangeElementsBaseVertex");
}

static void APIENTRY noopMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) basevertex;
   noop_warn("glMultiDrawElementsBaseVertex");
}

static void APIENTRY noopProvokingVertex(GLenum mode)
{
   (void) mode;
   noop_warn("glProvokingVertex");
}

static void APIENTRY noopGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
   (void) pname; (void) index; (void) val;
   noop_warn("glGetMultisamplefv");
}

static void APIENTRY noopSampleMaski(GLuint index, GLbitfield mask)
{
   (void) index; (void) mask;
   noop_warn("glSampleMaski");
}

static void APIENTRY noopTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) fixedsamplelocations;
   noop_warn("glTexImage2DMultisample");
}

static void APIENTRY noopTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) depth; (void) fixedsamplelocations;
   noop_warn("glTexImage3DMultisample");
}

static void APIENTRY noopBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeA)
{
   (void) buf; (void) modeRGB; (void) modeA;
   noop_warn("glBlendEquationSeparateiARB");
}

static void APIENTRY noopBlendEquationiARB(GLuint buf, GLenum mode)
{
   (void) buf; (void) mode;
   noop_warn("glBlendEquationiARB");
}

static void APIENTRY noopBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA)
{
   (void) buf; (void) srcRGB; (void) dstRGB; (void) srcA; (void) dstA;
   noop_warn("glBlendFuncSeparateiARB");
}

static void APIENTRY noopBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
   (void) buf; (void) src; (void) dst;
   noop_warn("glBlendFunciARB");
}

static void APIENTRY noopBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
   (void) program; (void) colorNumber; (void) index; (void) name;
   noop_warn("glBindFragDataLocationIndexed");
}

static GLint APIENTRY noopGetFragDataIndex(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   noop_warn("glGetFragDataIndex");
   return (GLint) 0;
}

static void APIENTRY noopBindSampler(GLuint unit, GLuint sampler)
{
   (void) unit; (void) sampler;
   noop_warn("glBindSampler");
}

static void APIENTRY noopDeleteSamplers(GLsizei count, const GLuint *samplers)
{
   (void) count; (void) samplers;
   noop_warn("glDeleteSamplers");
}

static void APIENTRY noopGenSamplers(GLsizei count, GLuint *samplers)
{
   (void) count; (void) samplers;
   noop_warn("glGenSamplers");
}

static void APIENTRY noopGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glGetSamplerParameterIiv");
}

static void APIENTRY noopGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glGetSamplerParameterIuiv");
}

static void APIENTRY noopGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glGetSamplerParameterfv");
}

static void APIENTRY noopGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glGetSamplerParameteriv");
}

static GLboolean APIENTRY noopIsSampler(GLuint sampler)
{
   (void) sampler;
   noop_warn("glIsSampler");
   return (GLboolean) 0;
}

static void APIENTRY noopSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glSamplerParameterIiv");
}

static void APIENTRY noopSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glSamplerParameterIuiv");
}

static void APIENTRY noopSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
   (void) sampler; (void) pname; (void) param;
   noop_warn("glSamplerParameterf");
}

static void APIENTRY noopSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glSamplerParameterfv");
}

static void APIENTRY noopSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
   (void) sampler; (void) pname; (void) param;
   noop_warn("glSamplerParameteri");
}

static void APIENTRY noopSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   noop_warn("glSamplerParameteriv");
}

static void APIENTRY noopGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
   (void) id; (void) pname; (void) params;
   noop_warn("glGetQueryObjecti64v");
}

static void APIENTRY noopGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
   (void) id; (void) pname; (void) params;
   noop_warn("glGetQueryObjectui64v");
}

static void APIENTRY noopQueryCounter(GLuint id, GLenum target)
{
   (void) id; (void) target;
   noop_warn("glQueryCounter");
}

static void APIENTRY noopColorP3ui(GLenum type, GLuint color)
{
   (void) type; (void) color;
   noop_warn("glColorP3ui");
}

static void APIENTRY noopColorP3uiv(GLenum type, const GLuint *color)
{
   (void) type; (void) color;
   noop_warn("glColorP3uiv");
}

static void APIENTRY noopColorP4ui(GLenum type, GLuint color)
{
   (void) type; (void) color;
   noop_warn("glColorP4ui");
}

static void APIENTRY noopColorP4uiv(GLenum type, const GLuint *color)
{
   (void) type; (void) color;
   noop_warn("glColorP4uiv");
}

static void APIENTRY noopMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP1ui");
}

static void APIENTRY noopMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP1uiv");
}

static void APIENTRY noopMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP2ui");
}

static void APIENTRY noopMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP2uiv");
}

static void APIENTRY noopMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP3ui");
}

static void APIENTRY noopMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP3uiv");
}

static void APIENTRY noopMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP4ui");
}

static void APIENTRY noopMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   noop_warn("glMultiTexCoordP4uiv");
}

static void APIENTRY noopNormalP3ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   noop_warn("glNormalP3ui");
}

static void APIENTRY noopNormalP3uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   noop_warn("glNormalP3uiv");
}

static void APIENTRY noopSecondaryColorP3ui(GLenum type, GLuint color)
{
   (void) type; (void) color;
   noop_warn("glSecondaryColorP3ui");
}

static void APIENTRY noopSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
   (void) type; (void) color;
   noop_warn("glSecondaryColorP3uiv");
}

static void APIENTRY noopTexCoordP1ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP1ui");
}

static void APIENTRY noopTexCoordP1uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP1uiv");
}

static void APIENTRY noopTexCoordP2ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP2ui");
}

static void APIENTRY noopTexCoordP2uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP2uiv");
}

static void APIENTRY noopTexCoordP3ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP3ui");
}

static void APIENTRY noopTexCoordP3uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP3uiv");
}

static void APIENTRY noopTexCoordP4ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP4ui");
}

static void APIENTRY noopTexCoordP4uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   noop_warn("glTexCoordP4uiv");
}

static void APIENTRY noopVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP1ui");
}

static void APIENTRY noopVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP1uiv");
}

static void APIENTRY noopVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP2ui");
}

static void APIENTRY noopVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP2uiv");
}

static void APIENTRY noopVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP3ui");
}

static void APIENTRY noopVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP3uiv");
}

static void APIENTRY noopVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP4ui");
}

static void APIENTRY noopVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   noop_warn("glVertexAttribP4uiv");
}

static void APIENTRY noopVertexP2ui(GLenum type, GLuint value)
{
   (void) type; (void) value;
   noop_warn("glVertexP2ui");
}

static void APIENTRY noopVertexP2uiv(GLenum type, const GLuint *value)
{
   (void) type; (void) value;
   noop_warn("glVertexP2uiv");
}

static void APIENTRY noopVertexP3ui(GLenum type, GLuint value)
{
   (void) type; (void) value;
   noop_warn("glVertexP3ui");
}

static void APIENTRY noopVertexP3uiv(GLenum type, const GLuint *value)
{
   (void) type; (void) value;
   noop_warn("glVertexP3uiv");
}

static void APIENTRY noopVertexP4ui(GLenum type, GLuint value)
{
   (void) type; (void) value;
   noop_warn("glVertexP4ui");
}

static void APIENTRY noopVertexP4uiv(GLenum type, const GLuint *value)
{
   (void) type; (void) value;
   noop_warn("glVertexP4uiv");
}

static void APIENTRY noopBindTransformFeedback(GLenum target, GLuint id)
{
   (void) target; (void) id;
   noop_warn("glBindTransformFeedback");
}

static void APIENTRY noopDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
   (void) n; (void) ids;
   noop_warn("glDeleteTransformFeedbacks");
}

static void APIENTRY noopDrawTransformFeedback(GLenum mode, GLuint id)
{
   (void) mode; (void) id;
   noop_warn("glDrawTransformFeedback");
}

static void APIENTRY noopGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
   (void) n; (void) ids;
   noop_warn("glGenTransformFeedbacks");
}

static GLboolean APIENTRY noopIsTransformFeedback(GLuint id)
{
   (void) id;
   noop_warn("glIsTransformFeedback");
   return (GLboolean) 0;
}

static void APIENTRY noopPauseTransformFeedback(void)
{
      noop_warn("glPauseTransformFeedback");
}

static void APIENTRY noopResumeTransformFeedback(void)
{
      noop_warn("glResumeTransformFeedback");
}

static void APIENTRY noopBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
   (void) target; (void) index; (void) id;
   noop_warn("glBeginQueryIndexed");
}

static void APIENTRY noopDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
   (void) mode; (void) id; (void) stream;
   noop_warn("glDrawTransformFeedbackStream");
}

static void APIENTRY noopEndQueryIndexed(GLenum target, GLuint index)
{
   (void) target; (void) index;
   noop_warn("glEndQueryIndexed");
}

static void APIENTRY noopGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
   (void) target; (void) index; (void) pname; (void) params;
   noop_warn("glGetQueryIndexediv");
}

static void APIENTRY noopClearDepthf(GLclampf depth)
{
   (void) depth;
   noop_warn("glClearDepthf");
}

static void APIENTRY noopDepthRangef(GLclampf zNear, GLclampf zFar)
{
   (void) zNear; (void) zFar;
   noop_warn("glDepthRangef");
}

static void APIENTRY noopGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
   (void) shadertype; (void) precisiontype; (void) range; (void) precision;
   noop_warn("glGetShaderPrecisionFormat");
}

static void APIENTRY noopReleaseShaderCompiler(void)
{
      noop_warn("glReleaseShaderCompiler");
}

static void APIENTRY noopShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
   (void) n; (void) shaders; (void) binaryformat; (void) binary; (void) length;
   noop_warn("glShaderBinary");
}

static void APIENTRY noopGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
   (void) program; (void) bufSize; (void) length; (void) binaryFormat; (void) binary;
   noop_warn("glGetProgramBinary");
}

static void APIENTRY noopProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
   (void) program; (void) binaryFormat; (void) binary; (void) length;
   noop_warn("glProgramBinary");
}

static void APIENTRY noopProgramParameteri(GLuint program, GLenum pname, GLint value)
{
   (void) program; (void) pname; (void) value;
   noop_warn("glProgramParameteri");
}

static void APIENTRY noopDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam)
{
   (void) callback; (void) userParam;
   noop_warn("glDebugMessageCallbackARB");
}

static void APIENTRY noopDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
   (void) source; (void) type; (void) severity; (void) count; (void) ids; (void) enabled;
   noop_warn("glDebugMessageControlARB");
}

static void APIENTRY noopDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLcharARB *buf)
{
   (void) source; (void) type; (void) id; (void) severity; (void) length; (void) buf;
   noop_warn("glDebugMessageInsertARB");
}

static GLuint APIENTRY noopGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLcharARB *messageLog)
{
   (void) count; (void) bufsize; (void) sources; (void) types; (void) ids; (void) severities; (void) lengths; (void) messageLog;
   noop_warn("glGetDebugMessageLogARB");
   return (GLuint) 0;
}

static GLenum APIENTRY noopGetGraphicsResetStatusARB(void)
{
      noop_warn("glGetGraphicsResetStatusARB");
   return (GLenum) 0;
}

static void APIENTRY noopGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
   (void) target; (void) format; (void) type; (void) bufSize; (void) table;
   noop_warn("glGetnColorTableARB");
}

static void APIENTRY noopGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
   (void) target; (void) lod; (void) bufSize; (void) img;
   noop_warn("glGetnCompressedTexImageARB");
}

static void APIENTRY noopGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
   (void) target; (void) format; (void) type; (void) bufSize; (void) image;
   noop_warn("glGetnConvolutionFilterARB");
}

static void APIENTRY noopGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) bufSize; (void) values;
   noop_warn("glGetnHistogramARB");
}

static void APIENTRY noopGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
   (void) target; (void) query; (void) bufSize; (void) v;
   noop_warn("glGetnMapdvARB");
}

static void APIENTRY noopGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
   (void) target; (void) query; (void) bufSize; (void) v;
   noop_warn("glGetnMapfvARB");
}

static void APIENTRY noopGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
   (void) target; (void) query; (void) bufSize; (void) v;
   noop_warn("glGetnMapivARB");
}

static void APIENTRY noopGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) bufSize; (void) values;
   noop_warn("glGetnMinmaxARB");
}

static void APIENTRY noopGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
   (void) map; (void) bufSize; (void) values;
   noop_warn("glGetnPixelMapfvARB");
}

static void APIENTRY noopGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
   (void) map; (void) bufSize; (void) values;
   noop_warn("glGetnPixelMapuivARB");
}

static void APIENTRY noopGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
   (void) map; (void) bufSize; (void) values;
   noop_warn("glGetnPixelMapusvARB");
}

static void APIENTRY noopGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
   (void) bufSize; (void) pattern;
   noop_warn("glGetnPolygonStippleARB");
}

static void APIENTRY noopGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
   (void) target; (void) format; (void) type; (void) rowBufSize; (void) row; (void) columnBufSize; (void) column; (void) span;
   noop_warn("glGetnSeparableFilterARB");
}

static void APIENTRY noopGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
   (void) target; (void) level; (void) format; (void) type; (void) bufSize; (void) img;
   noop_warn("glGetnTexImageARB");
}

static void APIENTRY noopGetnUniformdvARB(GLhandleARB program, GLint location, GLsizei bufSize, GLdouble *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   noop_warn("glGetnUniformdvARB");
}

static void APIENTRY noopGetnUniformfvARB(GLhandleARB program, GLint location, GLsizei bufSize, GLfloat *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   noop_warn("glGetnUniformfvARB");
}

static void APIENTRY noopGetnUniformivARB(GLhandleARB program, GLint location, GLsizei bufSize, GLint *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   noop_warn("glGetnUniformivARB");
}

static void APIENTRY noopGetnUniformuivARB(GLhandleARB program, GLint location, GLsizei bufSize, GLuint *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   noop_warn("glGetnUniformuivARB");
}

static void APIENTRY noopReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
   (void) x; (void) y; (void) width; (void) height; (void) format; (void) type; (void) bufSize; (void) data;
   noop_warn("glReadnPixelsARB");
}

static void APIENTRY noopDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
   (void) mode; (void) first; (void) count; (void) primcount; (void) baseinstance;
   noop_warn("glDrawArraysInstancedBaseInstance");
}

static void APIENTRY noopDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) baseinstance;
   noop_warn("glDrawElementsInstancedBaseInstance");
}

static void APIENTRY noopDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) basevertex; (void) baseinstance;
   noop_warn("glDrawElementsInstancedBaseVertexBaseInstance");
}

static void APIENTRY noopDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
   (void) mode; (void) id; (void) primcount;
   noop_warn("glDrawTransformFeedbackInstanced");
}

static void APIENTRY noopDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
   (void) mode; (void) id; (void) stream; (void) primcount;
   noop_warn("glDrawTransformFeedbackStreamInstanced");
}

static void APIENTRY noopGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
   (void) target; (void) internalformat; (void) pname; (void) bufSize; (void) params;
   noop_warn("glGetInternalformativ");
}

static void APIENTRY noopTexStorage1D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   (void) target; (void) levels; (void) internalFormat; (void) width;
   noop_warn("glTexStorage1D");
}

static void APIENTRY noopTexStorage2D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height;
   noop_warn("glTexStorage2D");
}

static void APIENTRY noopTexStorage3D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth;
   noop_warn("glTexStorage3D");
}

static void APIENTRY noopTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   (void) texture; (void) target; (void) levels; (void) internalFormat; (void) width;
   noop_warn("glTextureStorage1DEXT");
}

static void APIENTRY noopTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   (void) texture; (void) target; (void) levels; (void) internalFormat; (void) width; (void) height;
   noop_warn("glTextureStorage2DEXT");
}

static void APIENTRY noopTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) texture; (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth;
   noop_warn("glTextureStorage3DEXT");
}

static void APIENTRY noopTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) target; (void) internalformat; (void) buffer; (void) offset; (void) size;
   noop_warn("glTexBufferRange");
}

static void APIENTRY noopTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) fixedsamplelocations;
   noop_warn("glTexStorage2DMultisample");
}

static void APIENTRY noopTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) depth; (void) fixedsamplelocations;
   noop_warn("glTexStorage3DMultisample");
}

static void APIENTRY noopInvalidateBufferData(GLuint buffer)
{
   (void) buffer;
   noop_warn("glInvalidateBufferData");
}

static void APIENTRY noopInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   (void) buffer; (void) offset; (void) length;
   noop_warn("glInvalidateBufferSubData");
}

static void APIENTRY noopInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   (void) target; (void) numAttachments; (void) attachments;
   noop_warn("glInvalidateFramebuffer");
}

static void APIENTRY noopInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) numAttachments; (void) attachments; (void) x; (void) y; (void) width; (void) height;
   noop_warn("glInvalidateSubFramebuffer");
}

static void APIENTRY noopInvalidateTexImage(GLuint texture, GLint level)
{
   (void) texture; (void) level;
   noop_warn("glInvalidateTexImage");
}

static void APIENTRY noopInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth;
   noop_warn("glInvalidateTexSubImage");
}

static void APIENTRY noopPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
   (void) factor; (void) bias;
   noop_warn("glPolygonOffsetEXT");
}

static void APIENTRY noopDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   noop_warn("glDrawTexfOES");
}

static void APIENTRY noopDrawTexfvOES(const GLfloat *coords)
{
   (void) coords;
   noop_warn("glDrawTexfvOES");
}

static void APIENTRY noopDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   noop_warn("glDrawTexiOES");
}

static void APIENTRY noopDrawTexivOES(const GLint *coords)
{
   (void) coords;
   noop_warn("glDrawTexivOES");
}

static void APIENTRY noopDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   noop_warn("glDrawTexsOES");
}

static void APIENTRY noopDrawTexsvOES(const GLshort *coords)
{
   (void) coords;
   noop_warn("glDrawTexsvOES");
}

static void APIENTRY noopDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   noop_warn("glDrawTexxOES");
}

static void APIENTRY noopDrawTexxvOES(const GLfixed *coords)
{
   (void) coords;
   noop_warn("glDrawTexxvOES");
}

static void APIENTRY noopPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   noop_warn("glPointSizePointerOES");
}

static GLbitfield APIENTRY noopQueryMatrixxOES(GLfixed *mantissa, GLint *exponent)
{
   (void) mantissa; (void) exponent;
   noop_warn("glQueryMatrixxOES");
   return (GLbitfield) 0;
}

static void APIENTRY noopSampleMaskSGIS(GLclampf value, GLboolean invert)
{
   (void) value; (void) invert;
   noop_warn("glSampleMaskSGIS");
}

static void APIENTRY noopSamplePatternSGIS(GLenum pattern)
{
   (void) pattern;
   noop_warn("glSamplePatternSGIS");
}

static void APIENTRY noopColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) count; (void) pointer;
   noop_warn("glColorPointerEXT");
}

static void APIENTRY noopEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
   (void) stride; (void) count; (void) pointer;
   noop_warn("glEdgeFlagPointerEXT");
}

static void APIENTRY noopIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) count; (void) pointer;
   noop_warn("glIndexPointerEXT");
}

static void APIENTRY noopNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) count; (void) pointer;
   noop_warn("glNormalPointerEXT");
}

static void APIENTRY noopTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) count; (void) pointer;
   noop_warn("glTexCoordPointerEXT");
}

static void APIENTRY noopVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) count; (void) pointer;
   noop_warn("glVertexPointerEXT");
}

static void APIENTRY noopDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   (void) target; (void) numAttachments; (void) attachments;
   noop_warn("glDiscardFramebufferEXT");
}

static void APIENTRY noopLockArraysEXT(GLint first, GLsizei count)
{
   (void) first; (void) count;
   noop_warn("glLockArraysEXT");
}

static void APIENTRY noopUnlockArraysEXT(void)
{
      noop_warn("glUnlockArraysEXT");
}

static void APIENTRY noopSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
   (void) red; (void) green; (void) blue;
   noop_warn("glSecondaryColor3fEXT");
}

static void APIENTRY noopSecondaryColor3fvEXT(const GLfloat *v)
{
   (void) v;
   noop_warn("glSecondaryColor3fvEXT");
}

static void APIENTRY noopMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount;
   noop_warn("glMultiDrawElementsEXT");
}

static void APIENTRY noopFogCoordfEXT(GLfloat coord)
{
   (void) coord;
   noop_warn("glFogCoordfEXT");
}

static void APIENTRY noopFogCoordfvEXT(const GLfloat *coord)
{
   (void) coord;
   noop_warn("glFogCoordfvEXT");
}

static void APIENTRY noopResizeBuffersMESA(void)
{
      noop_warn("glResizeBuffersMESA");
}

static void APIENTRY noopWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glWindowPos4dMESA");
}

static void APIENTRY noopWindowPos4dvMESA(const GLdouble *v)
{
   (void) v;
   noop_warn("glWindowPos4dvMESA");
}

static void APIENTRY noopWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glWindowPos4fMESA");
}

static void APIENTRY noopWindowPos4fvMESA(const GLfloat *v)
{
   (void) v;
   noop_warn("glWindowPos4fvMESA");
}

static void APIENTRY noopWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glWindowPos4iMESA");
}

static void APIENTRY noopWindowPos4ivMESA(const GLint *v)
{
   (void) v;
   noop_warn("glWindowPos4ivMESA");
}

static void APIENTRY noopWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) x; (void) y; (void) z; (void) w;
   noop_warn("glWindowPos4sMESA");
}

static void APIENTRY noopWindowPos4svMESA(const GLshort *v)
{
   (void) v;
   noop_warn("glWindowPos4svMESA");
}

static void APIENTRY noopMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
   (void) mode; (void) first; (void) count; (void) primcount; (void) modestride;
   noop_warn("glMultiModeDrawArraysIBM");
}

static void APIENTRY noopMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) modestride;
   noop_warn("glMultiModeDrawElementsIBM");
}

static GLboolean APIENTRY noopAreProgramsResidentNV(GLsizei n, const GLuint *ids, GLboolean *residences)
{
   (void) n; (void) ids; (void) residences;
   noop_warn("glAreProgramsResidentNV");
   return (GLboolean) 0;
}

static void APIENTRY noopExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
   (void) target; (void) id; (void) params;
   noop_warn("glExecuteProgramNV");
}

static void APIENTRY noopGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
   (void) target; (void) index; (void) pname; (void) params;
   noop_warn("glGetProgramParameterdvNV");
}

static void APIENTRY noopGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
   (void) target; (void) index; (void) pname; (void) params;
   noop_warn("glGetProgramParameterfvNV");
}

static void APIENTRY noopGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
   (void) id; (void) pname; (void) program;
   noop_warn("glGetProgramStringNV");
}

static void APIENTRY noopGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
   (void) id; (void) pname; (void) params;
   noop_warn("glGetProgramivNV");
}

static void APIENTRY noopGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
   (void) target; (void) address; (void) pname; (void) params;
   noop_warn("glGetTrackMatrixivNV");
}

static void APIENTRY noopGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribdvNV");
}

static void APIENTRY noopGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribfvNV");
}

static void APIENTRY noopGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
   (void) index; (void) pname; (void) params;
   noop_warn("glGetVertexAttribivNV");
}

static void APIENTRY noopLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
   (void) target; (void) id; (void) len; (void) program;
   noop_warn("glLoadProgramNV");
}

static void APIENTRY noopProgramParameters4dvNV(GLenum target, GLuint index, GLsizei num, const GLdouble *params)
{
   (void) target; (void) index; (void) num; (void) params;
   noop_warn("glProgramParameters4dvNV");
}

static void APIENTRY noopProgramParameters4fvNV(GLenum target, GLuint index, GLsizei num, const GLfloat *params)
{
   (void) target; (void) index; (void) num; (void) params;
   noop_warn("glProgramParameters4fvNV");
}

static void APIENTRY noopRequestResidentProgramsNV(GLsizei n, const GLuint *ids)
{
   (void) n; (void) ids;
   noop_warn("glRequestResidentProgramsNV");
}

static void APIENTRY noopTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
   (void) target; (void) address; (void) matrix; (void) transform;
   noop_warn("glTrackMatrixNV");
}

static void APIENTRY noopVertexAttrib1dNV(GLuint index, GLdouble x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttrib1dNV");
}

static void APIENTRY noopVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib1dvNV");
}

static void APIENTRY noopVertexAttrib1fNV(GLuint index, GLfloat x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttrib1fNV");
}

static void APIENTRY noopVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib1fvNV");
}

static void APIENTRY noopVertexAttrib1sNV(GLuint index, GLshort x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttrib1sNV");
}

static void APIENTRY noopVertexAttrib1svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib1svNV");
}

static void APIENTRY noopVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttrib2dNV");
}

static void APIENTRY noopVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib2dvNV");
}

static void APIENTRY noopVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttrib2fNV");
}

static void APIENTRY noopVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib2fvNV");
}

static void APIENTRY noopVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttrib2sNV");
}

static void APIENTRY noopVertexAttrib2svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib2svNV");
}

static void APIENTRY noopVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttrib3dNV");
}

static void APIENTRY noopVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib3dvNV");
}

static void APIENTRY noopVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttrib3fNV");
}

static void APIENTRY noopVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib3fvNV");
}

static void APIENTRY noopVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttrib3sNV");
}

static void APIENTRY noopVertexAttrib3svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib3svNV");
}

static void APIENTRY noopVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4dNV");
}

static void APIENTRY noopVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4dvNV");
}

static void APIENTRY noopVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4fNV");
}

static void APIENTRY noopVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4fvNV");
}

static void APIENTRY noopVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4sNV");
}

static void APIENTRY noopVertexAttrib4svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4svNV");
}

static void APIENTRY noopVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttrib4ubNV");
}

static void APIENTRY noopVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttrib4ubvNV");
}

static void APIENTRY noopVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) index; (void) size; (void) type; (void) stride; (void) pointer;
   noop_warn("glVertexAttribPointerNV");
}

static void APIENTRY noopVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs1dvNV");
}

static void APIENTRY noopVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs1fvNV");
}

static void APIENTRY noopVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs1svNV");
}

static void APIENTRY noopVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs2dvNV");
}

static void APIENTRY noopVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs2fvNV");
}

static void APIENTRY noopVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs2svNV");
}

static void APIENTRY noopVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs3dvNV");
}

static void APIENTRY noopVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs3fvNV");
}

static void APIENTRY noopVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs3svNV");
}

static void APIENTRY noopVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs4dvNV");
}

static void APIENTRY noopVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs4fvNV");
}

static void APIENTRY noopVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs4svNV");
}

static void APIENTRY noopVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
   (void) index; (void) n; (void) v;
   noop_warn("glVertexAttribs4ubvNV");
}

static void APIENTRY noopGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
   (void) pname; (void) param;
   noop_warn("glGetTexBumpParameterfvATI");
}

static void APIENTRY noopGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
   (void) pname; (void) param;
   noop_warn("glGetTexBumpParameterivATI");
}

static void APIENTRY noopTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
{
   (void) pname; (void) param;
   noop_warn("glTexBumpParameterfvATI");
}

static void APIENTRY noopTexBumpParameterivATI(GLenum pname, const GLint *param)
{
   (void) pname; (void) param;
   noop_warn("glTexBumpParameterivATI");
}

static void APIENTRY noopAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   (void) op; (void) dst; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod;
   noop_warn("glAlphaFragmentOp1ATI");
}

static void APIENTRY noopAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   (void) op; (void) dst; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod;
   noop_warn("glAlphaFragmentOp2ATI");
}

static void APIENTRY noopAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   (void) op; (void) dst; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod; (void) arg3; (void) arg3Rep; (void) arg3Mod;
   noop_warn("glAlphaFragmentOp3ATI");
}

static void APIENTRY noopBeginFragmentShaderATI(void)
{
      noop_warn("glBeginFragmentShaderATI");
}

static void APIENTRY noopBindFragmentShaderATI(GLuint id)
{
   (void) id;
   noop_warn("glBindFragmentShaderATI");
}

static void APIENTRY noopColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   (void) op; (void) dst; (void) dstMask; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod;
   noop_warn("glColorFragmentOp1ATI");
}

static void APIENTRY noopColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   (void) op; (void) dst; (void) dstMask; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod;
   noop_warn("glColorFragmentOp2ATI");
}

static void APIENTRY noopColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   (void) op; (void) dst; (void) dstMask; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod; (void) arg3; (void) arg3Rep; (void) arg3Mod;
   noop_warn("glColorFragmentOp3ATI");
}

static void APIENTRY noopDeleteFragmentShaderATI(GLuint id)
{
   (void) id;
   noop_warn("glDeleteFragmentShaderATI");
}

static void APIENTRY noopEndFragmentShaderATI(void)
{
      noop_warn("glEndFragmentShaderATI");
}

static GLuint APIENTRY noopGenFragmentShadersATI(GLuint range)
{
   (void) range;
   noop_warn("glGenFragmentShadersATI");
   return (GLuint) 0;
}

static void APIENTRY noopPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
   (void) dst; (void) coord; (void) swizzle;
   noop_warn("glPassTexCoordATI");
}

static void APIENTRY noopSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
   (void) dst; (void) interp; (void) swizzle;
   noop_warn("glSampleMapATI");
}

static void APIENTRY noopSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
   (void) dst; (void) value;
   noop_warn("glSetFragmentShaderConstantATI");
}

static void APIENTRY noopActiveStencilFaceEXT(GLenum face)
{
   (void) face;
   noop_warn("glActiveStencilFaceEXT");
}

static void APIENTRY noopBindVertexArrayAPPLE(GLuint array)
{
   (void) array;
   noop_warn("glBindVertexArrayAPPLE");
}

static void APIENTRY noopGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
{
   (void) n; (void) arrays;
   noop_warn("glGenVertexArraysAPPLE");
}

static void APIENTRY noopGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
   (void) id; (void) len; (void) name; (void) params;
   noop_warn("glGetProgramNamedParameterdvNV");
}

static void APIENTRY noopGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
   (void) id; (void) len; (void) name; (void) params;
   noop_warn("glGetProgramNamedParameterfvNV");
}

static void APIENTRY noopProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) id; (void) len; (void) name; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glProgramNamedParameter4dNV");
}

static void APIENTRY noopProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
   (void) id; (void) len; (void) name; (void) v;
   noop_warn("glProgramNamedParameter4dvNV");
}

static void APIENTRY noopProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) id; (void) len; (void) name; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glProgramNamedParameter4fNV");
}

static void APIENTRY noopProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
   (void) id; (void) len; (void) name; (void) v;
   noop_warn("glProgramNamedParameter4fvNV");
}

static void APIENTRY noopPrimitiveRestartNV(void)
{
      noop_warn("glPrimitiveRestartNV");
}

static void APIENTRY noopGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glGetTexGenxvOES");
}

static void APIENTRY noopTexGenxOES(GLenum coord, GLenum pname, GLint param)
{
   (void) coord; (void) pname; (void) param;
   noop_warn("glTexGenxOES");
}

static void APIENTRY noopTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
   (void) coord; (void) pname; (void) params;
   noop_warn("glTexGenxvOES");
}

static void APIENTRY noopDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
   (void) zmin; (void) zmax;
   noop_warn("glDepthBoundsEXT");
}

static void APIENTRY noopBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
   (void) target; (void) framebuffer;
   noop_warn("glBindFramebufferEXT");
}

static void APIENTRY noopBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
   (void) target; (void) renderbuffer;
   noop_warn("glBindRenderbufferEXT");
}

static void APIENTRY noopBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glBufferParameteriAPPLE");
}

static void APIENTRY noopFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
   (void) target; (void) offset; (void) size;
   noop_warn("glFlushMappedBufferRangeAPPLE");
}

static void APIENTRY noopVertexAttribI1iEXT(GLuint index, GLint x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttribI1iEXT");
}

static void APIENTRY noopVertexAttribI1uiEXT(GLuint index, GLuint x)
{
   (void) index; (void) x;
   noop_warn("glVertexAttribI1uiEXT");
}

static void APIENTRY noopVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttribI2iEXT");
}

static void APIENTRY noopVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI2ivEXT");
}

static void APIENTRY noopVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
   (void) index; (void) x; (void) y;
   noop_warn("glVertexAttribI2uiEXT");
}

static void APIENTRY noopVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI2uivEXT");
}

static void APIENTRY noopVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttribI3iEXT");
}

static void APIENTRY noopVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI3ivEXT");
}

static void APIENTRY noopVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
   (void) index; (void) x; (void) y; (void) z;
   noop_warn("glVertexAttribI3uiEXT");
}

static void APIENTRY noopVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI3uivEXT");
}

static void APIENTRY noopVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttribI4iEXT");
}

static void APIENTRY noopVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI4ivEXT");
}

static void APIENTRY noopVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   noop_warn("glVertexAttribI4uiEXT");
}

static void APIENTRY noopVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   noop_warn("glVertexAttribI4uivEXT");
}

static void APIENTRY noopClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
{
   (void) r; (void) g; (void) b; (void) a;
   noop_warn("glClearColorIiEXT");
}

static void APIENTRY noopClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
{
   (void) r; (void) g; (void) b; (void) a;
   noop_warn("glClearColorIuiEXT");
}

static void APIENTRY noopBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
   (void) target; (void) index; (void) buffer; (void) offset;
   noop_warn("glBindBufferOffsetEXT");
}

static void APIENTRY noopGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *value)
{
   (void) objectType; (void) name; (void) pname; (void) value;
   noop_warn("glGetObjectParameterivAPPLE");
}

static GLenum APIENTRY noopObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
   (void) objectType; (void) name; (void) option;
   noop_warn("glObjectPurgeableAPPLE");
   return (GLenum) 0;
}

static GLenum APIENTRY noopObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
   (void) objectType; (void) name; (void) option;
   noop_warn("glObjectUnpurgeableAPPLE");
   return (GLenum) 0;
}

static void APIENTRY noopActiveProgramEXT(GLuint program)
{
   (void) program;
   noop_warn("glActiveProgramEXT");
}

static GLuint APIENTRY noopCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
   (void) type; (void) string;
   noop_warn("glCreateShaderProgramEXT");
   return (GLuint) 0;
}

static void APIENTRY noopUseShaderProgramEXT(GLenum type, GLuint program)
{
   (void) type; (void) program;
   noop_warn("glUseShaderProgramEXT");
}

static void APIENTRY noopTextureBarrierNV(void)
{
      noop_warn("glTextureBarrierNV");
}

static void APIENTRY noopStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
   (void) frontfunc; (void) backfunc; (void) ref; (void) mask;
   noop_warn("glStencilFuncSeparateATI");
}

static void APIENTRY noopProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   (void) target; (void) index; (void) count; (void) params;
   noop_warn("glProgramEnvParameters4fvEXT");
}

static void APIENTRY noopProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   (void) target; (void) index; (void) count; (void) params;
   noop_warn("glProgramLocalParameters4fvEXT");
}

static void APIENTRY noopEGLImageTargetRenderbufferStorageOES(GLenum target, GLvoid *writeOffset)
{
   (void) target; (void) writeOffset;
   noop_warn("glEGLImageTargetRenderbufferStorageOES");
}

static void APIENTRY noopEGLImageTargetTexture2DOES(GLenum target, GLvoid *writeOffset)
{
   (void) target; (void) writeOffset;
   noop_warn("glEGLImageTargetTexture2DOES");
}

static void APIENTRY noopAlphaFuncx(GLenum func, GLclampx ref)
{
   (void) func; (void) ref;
   noop_warn("glAlphaFuncx");
}

static void APIENTRY noopClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glClearColorx");
}

static void APIENTRY noopClearDepthx(GLclampx depth)
{
   (void) depth;
   noop_warn("glClearDepthx");
}

static void APIENTRY noopColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   noop_warn("glColor4x");
}

static void APIENTRY noopDepthRangex(GLclampx zNear, GLclampx zFar)
{
   (void) zNear; (void) zFar;
   noop_warn("glDepthRangex");
}

static void APIENTRY noopFogx(GLenum pname, GLfixed param)
{
   (void) pname; (void) param;
   noop_warn("glFogx");
}

static void APIENTRY noopFogxv(GLenum pname, const GLfixed *params)
{
   (void) pname; (void) params;
   noop_warn("glFogxv");
}

static void APIENTRY noopFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   noop_warn("glFrustumf");
}

static void APIENTRY noopFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   noop_warn("glFrustumx");
}

static void APIENTRY noopLightModelx(GLenum pname, GLfixed param)
{
   (void) pname; (void) param;
   noop_warn("glLightModelx");
}

static void APIENTRY noopLightModelxv(GLenum pname, const GLfixed *params)
{
   (void) pname; (void) params;
   noop_warn("glLightModelxv");
}

static void APIENTRY noopLightx(GLenum light, GLenum pname, GLfixed param)
{
   (void) light; (void) pname; (void) param;
   noop_warn("glLightx");
}

static void APIENTRY noopLightxv(GLenum light, GLenum pname, const GLfixed *params)
{
   (void) light; (void) pname; (void) params;
   noop_warn("glLightxv");
}

static void APIENTRY noopLineWidthx(GLfixed width)
{
   (void) width;
   noop_warn("glLineWidthx");
}

static void APIENTRY noopLoadMatrixx(const GLfixed *m)
{
   (void) m;
   noop_warn("glLoadMatrixx");
}

static void APIENTRY noopMaterialx(GLenum face, GLenum pname, GLfixed param)
{
   (void) face; (void) pname; (void) param;
   noop_warn("glMaterialx");
}

static void APIENTRY noopMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
{
   (void) face; (void) pname; (void) params;
   noop_warn("glMaterialxv");
}

static void APIENTRY noopMultMatrixx(const GLfixed *m)
{
   (void) m;
   noop_warn("glMultMatrixx");
}

static void APIENTRY noopMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   noop_warn("glMultiTexCoord4x");
}

static void APIENTRY noopNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
   (void) nx; (void) ny; (void) nz;
   noop_warn("glNormal3x");
}

static void APIENTRY noopOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   noop_warn("glOrthof");
}

static void APIENTRY noopOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   noop_warn("glOrthox");
}

static void APIENTRY noopPointSizex(GLfixed size)
{
   (void) size;
   noop_warn("glPointSizex");
}

static void APIENTRY noopPolygonOffsetx(GLfixed factor, GLfixed units)
{
   (void) factor; (void) units;
   noop_warn("glPolygonOffsetx");
}

static void APIENTRY noopRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   (void) angle; (void) x; (void) y; (void) z;
   noop_warn("glRotatex");
}

static void APIENTRY noopSampleCoveragex(GLclampx value, GLboolean invert)
{
   (void) value; (void) invert;
   noop_warn("glSampleCoveragex");
}

static void APIENTRY noopScalex(GLfixed x, GLfixed y, GLfixed z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glScalex");
}

static void APIENTRY noopTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glTexEnvx");
}

static void APIENTRY noopTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexEnvxv");
}

static void APIENTRY noopTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
   (void) target; (void) pname; (void) param;
   noop_warn("glTexParameterx");
}

static void APIENTRY noopTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
   (void) x; (void) y; (void) z;
   noop_warn("glTranslatex");
}

static void APIENTRY noopClipPlanef(GLenum plane, const GLfloat *equation)
{
   (void) plane; (void) equation;
   noop_warn("glClipPlanef");
}

static void APIENTRY noopClipPlanex(GLenum plane, const GLfixed *equation)
{
   (void) plane; (void) equation;
   noop_warn("glClipPlanex");
}

static void APIENTRY noopGetClipPlanef(GLenum plane, GLfloat *equation)
{
   (void) plane; (void) equation;
   noop_warn("glGetClipPlanef");
}

static void APIENTRY noopGetClipPlanex(GLenum plane, GLfixed *equation)
{
   (void) plane; (void) equation;
   noop_warn("glGetClipPlanex");
}

static void APIENTRY noopGetFixedv(GLenum pname, GLfixed *params)
{
   (void) pname; (void) params;
   noop_warn("glGetFixedv");
}

static void APIENTRY noopGetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
   (void) light; (void) pname; (void) params;
   noop_warn("glGetLightxv");
}

static void APIENTRY noopGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
   (void) face; (void) pname; (void) params;
   noop_warn("glGetMaterialxv");
}

static void APIENTRY noopGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexEnvxv");
}

static void APIENTRY noopGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glGetTexParameterxv");
}

static void APIENTRY noopPointParameterx(GLenum pname, GLfixed param)
{
   (void) pname; (void) param;
   noop_warn("glPointParameterx");
}

static void APIENTRY noopPointParameterxv(GLenum pname, const GLfixed *params)
{
   (void) pname; (void) params;
   noop_warn("glPointParameterxv");
}

static void APIENTRY noopTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   noop_warn("glTexParameterxv");
}

const mapi_func table_noop_array[] = {
   (mapi_func) noopNewList,
   (mapi_func) noopEndList,
   (mapi_func) noopCallList,
   (mapi_func) noopCallLists,
   (mapi_func) noopDeleteLists,
   (mapi_func) noopGenLists,
   (mapi_func) noopListBase,
   (mapi_func) noopBegin,
   (mapi_func) noopBitmap,
   (mapi_func) noopColor3b,
   (mapi_func) noopColor3bv,
   (mapi_func) noopColor3d,
   (mapi_func) noopColor3dv,
   (mapi_func) noopColor3f,
   (mapi_func) noopColor3fv,
   (mapi_func) noopColor3i,
   (mapi_func) noopColor3iv,
   (mapi_func) noopColor3s,
   (mapi_func) noopColor3sv,
   (mapi_func) noopColor3ub,
   (mapi_func) noopColor3ubv,
   (mapi_func) noopColor3ui,
   (mapi_func) noopColor3uiv,
   (mapi_func) noopColor3us,
   (mapi_func) noopColor3usv,
   (mapi_func) noopColor4b,
   (mapi_func) noopColor4bv,
   (mapi_func) noopColor4d,
   (mapi_func) noopColor4dv,
   (mapi_func) noopColor4f,
   (mapi_func) noopColor4fv,
   (mapi_func) noopColor4i,
   (mapi_func) noopColor4iv,
   (mapi_func) noopColor4s,
   (mapi_func) noopColor4sv,
   (mapi_func) noopColor4ub,
   (mapi_func) noopColor4ubv,
   (mapi_func) noopColor4ui,
   (mapi_func) noopColor4uiv,
   (mapi_func) noopColor4us,
   (mapi_func) noopColor4usv,
   (mapi_func) noopEdgeFlag,
   (mapi_func) noopEdgeFlagv,
   (mapi_func) noopEnd,
   (mapi_func) noopIndexd,
   (mapi_func) noopIndexdv,
   (mapi_func) noopIndexf,
   (mapi_func) noopIndexfv,
   (mapi_func) noopIndexi,
   (mapi_func) noopIndexiv,
   (mapi_func) noopIndexs,
   (mapi_func) noopIndexsv,
   (mapi_func) noopNormal3b,
   (mapi_func) noopNormal3bv,
   (mapi_func) noopNormal3d,
   (mapi_func) noopNormal3dv,
   (mapi_func) noopNormal3f,
   (mapi_func) noopNormal3fv,
   (mapi_func) noopNormal3i,
   (mapi_func) noopNormal3iv,
   (mapi_func) noopNormal3s,
   (mapi_func) noopNormal3sv,
   (mapi_func) noopRasterPos2d,
   (mapi_func) noopRasterPos2dv,
   (mapi_func) noopRasterPos2f,
   (mapi_func) noopRasterPos2fv,
   (mapi_func) noopRasterPos2i,
   (mapi_func) noopRasterPos2iv,
   (mapi_func) noopRasterPos2s,
   (mapi_func) noopRasterPos2sv,
   (mapi_func) noopRasterPos3d,
   (mapi_func) noopRasterPos3dv,
   (mapi_func) noopRasterPos3f,
   (mapi_func) noopRasterPos3fv,
   (mapi_func) noopRasterPos3i,
   (mapi_func) noopRasterPos3iv,
   (mapi_func) noopRasterPos3s,
   (mapi_func) noopRasterPos3sv,
   (mapi_func) noopRasterPos4d,
   (mapi_func) noopRasterPos4dv,
   (mapi_func) noopRasterPos4f,
   (mapi_func) noopRasterPos4fv,
   (mapi_func) noopRasterPos4i,
   (mapi_func) noopRasterPos4iv,
   (mapi_func) noopRasterPos4s,
   (mapi_func) noopRasterPos4sv,
   (mapi_func) noopRectd,
   (mapi_func) noopRectdv,
   (mapi_func) noopRectf,
   (mapi_func) noopRectfv,
   (mapi_func) noopRecti,
   (mapi_func) noopRectiv,
   (mapi_func) noopRects,
   (mapi_func) noopRectsv,
   (mapi_func) noopTexCoord1d,
   (mapi_func) noopTexCoord1dv,
   (mapi_func) noopTexCoord1f,
   (mapi_func) noopTexCoord1fv,
   (mapi_func) noopTexCoord1i,
   (mapi_func) noopTexCoord1iv,
   (mapi_func) noopTexCoord1s,
   (mapi_func) noopTexCoord1sv,
   (mapi_func) noopTexCoord2d,
   (mapi_func) noopTexCoord2dv,
   (mapi_func) noopTexCoord2f,
   (mapi_func) noopTexCoord2fv,
   (mapi_func) noopTexCoord2i,
   (mapi_func) noopTexCoord2iv,
   (mapi_func) noopTexCoord2s,
   (mapi_func) noopTexCoord2sv,
   (mapi_func) noopTexCoord3d,
   (mapi_func) noopTexCoord3dv,
   (mapi_func) noopTexCoord3f,
   (mapi_func) noopTexCoord3fv,
   (mapi_func) noopTexCoord3i,
   (mapi_func) noopTexCoord3iv,
   (mapi_func) noopTexCoord3s,
   (mapi_func) noopTexCoord3sv,
   (mapi_func) noopTexCoord4d,
   (mapi_func) noopTexCoord4dv,
   (mapi_func) noopTexCoord4f,
   (mapi_func) noopTexCoord4fv,
   (mapi_func) noopTexCoord4i,
   (mapi_func) noopTexCoord4iv,
   (mapi_func) noopTexCoord4s,
   (mapi_func) noopTexCoord4sv,
   (mapi_func) noopVertex2d,
   (mapi_func) noopVertex2dv,
   (mapi_func) noopVertex2f,
   (mapi_func) noopVertex2fv,
   (mapi_func) noopVertex2i,
   (mapi_func) noopVertex2iv,
   (mapi_func) noopVertex2s,
   (mapi_func) noopVertex2sv,
   (mapi_func) noopVertex3d,
   (mapi_func) noopVertex3dv,
   (mapi_func) noopVertex3f,
   (mapi_func) noopVertex3fv,
   (mapi_func) noopVertex3i,
   (mapi_func) noopVertex3iv,
   (mapi_func) noopVertex3s,
   (mapi_func) noopVertex3sv,
   (mapi_func) noopVertex4d,
   (mapi_func) noopVertex4dv,
   (mapi_func) noopVertex4f,
   (mapi_func) noopVertex4fv,
   (mapi_func) noopVertex4i,
   (mapi_func) noopVertex4iv,
   (mapi_func) noopVertex4s,
   (mapi_func) noopVertex4sv,
   (mapi_func) noopClipPlane,
   (mapi_func) noopColorMaterial,
   (mapi_func) noopCullFace,
   (mapi_func) noopFogf,
   (mapi_func) noopFogfv,
   (mapi_func) noopFogi,
   (mapi_func) noopFogiv,
   (mapi_func) noopFrontFace,
   (mapi_func) noopHint,
   (mapi_func) noopLightf,
   (mapi_func) noopLightfv,
   (mapi_func) noopLighti,
   (mapi_func) noopLightiv,
   (mapi_func) noopLightModelf,
   (mapi_func) noopLightModelfv,
   (mapi_func) noopLightModeli,
   (mapi_func) noopLightModeliv,
   (mapi_func) noopLineStipple,
   (mapi_func) noopLineWidth,
   (mapi_func) noopMaterialf,
   (mapi_func) noopMaterialfv,
   (mapi_func) noopMateriali,
   (mapi_func) noopMaterialiv,
   (mapi_func) noopPointSize,
   (mapi_func) noopPolygonMode,
   (mapi_func) noopPolygonStipple,
   (mapi_func) noopScissor,
   (mapi_func) noopShadeModel,
   (mapi_func) noopTexParameterf,
   (mapi_func) noopTexParameterfv,
   (mapi_func) noopTexParameteri,
   (mapi_func) noopTexParameteriv,
   (mapi_func) noopTexImage1D,
   (mapi_func) noopTexImage2D,
   (mapi_func) noopTexEnvf,
   (mapi_func) noopTexEnvfv,
   (mapi_func) noopTexEnvi,
   (mapi_func) noopTexEnviv,
   (mapi_func) noopTexGend,
   (mapi_func) noopTexGendv,
   (mapi_func) noopTexGenf,
   (mapi_func) noopTexGenfv,
   (mapi_func) noopTexGeni,
   (mapi_func) noopTexGeniv,
   (mapi_func) noopFeedbackBuffer,
   (mapi_func) noopSelectBuffer,
   (mapi_func) noopRenderMode,
   (mapi_func) noopInitNames,
   (mapi_func) noopLoadName,
   (mapi_func) noopPassThrough,
   (mapi_func) noopPopName,
   (mapi_func) noopPushName,
   (mapi_func) noopDrawBuffer,
   (mapi_func) noopClear,
   (mapi_func) noopClearAccum,
   (mapi_func) noopClearIndex,
   (mapi_func) noopClearColor,
   (mapi_func) noopClearStencil,
   (mapi_func) noopClearDepth,
   (mapi_func) noopStencilMask,
   (mapi_func) noopColorMask,
   (mapi_func) noopDepthMask,
   (mapi_func) noopIndexMask,
   (mapi_func) noopAccum,
   (mapi_func) noopDisable,
   (mapi_func) noopEnable,
   (mapi_func) noopFinish,
   (mapi_func) noopFlush,
   (mapi_func) noopPopAttrib,
   (mapi_func) noopPushAttrib,
   (mapi_func) noopMap1d,
   (mapi_func) noopMap1f,
   (mapi_func) noopMap2d,
   (mapi_func) noopMap2f,
   (mapi_func) noopMapGrid1d,
   (mapi_func) noopMapGrid1f,
   (mapi_func) noopMapGrid2d,
   (mapi_func) noopMapGrid2f,
   (mapi_func) noopEvalCoord1d,
   (mapi_func) noopEvalCoord1dv,
   (mapi_func) noopEvalCoord1f,
   (mapi_func) noopEvalCoord1fv,
   (mapi_func) noopEvalCoord2d,
   (mapi_func) noopEvalCoord2dv,
   (mapi_func) noopEvalCoord2f,
   (mapi_func) noopEvalCoord2fv,
   (mapi_func) noopEvalMesh1,
   (mapi_func) noopEvalPoint1,
   (mapi_func) noopEvalMesh2,
   (mapi_func) noopEvalPoint2,
   (mapi_func) noopAlphaFunc,
   (mapi_func) noopBlendFunc,
   (mapi_func) noopLogicOp,
   (mapi_func) noopStencilFunc,
   (mapi_func) noopStencilOp,
   (mapi_func) noopDepthFunc,
   (mapi_func) noopPixelZoom,
   (mapi_func) noopPixelTransferf,
   (mapi_func) noopPixelTransferi,
   (mapi_func) noopPixelStoref,
   (mapi_func) noopPixelStorei,
   (mapi_func) noopPixelMapfv,
   (mapi_func) noopPixelMapuiv,
   (mapi_func) noopPixelMapusv,
   (mapi_func) noopReadBuffer,
   (mapi_func) noopCopyPixels,
   (mapi_func) noopReadPixels,
   (mapi_func) noopDrawPixels,
   (mapi_func) noopGetBooleanv,
   (mapi_func) noopGetClipPlane,
   (mapi_func) noopGetDoublev,
   (mapi_func) noopGetError,
   (mapi_func) noopGetFloatv,
   (mapi_func) noopGetIntegerv,
   (mapi_func) noopGetLightfv,
   (mapi_func) noopGetLightiv,
   (mapi_func) noopGetMapdv,
   (mapi_func) noopGetMapfv,
   (mapi_func) noopGetMapiv,
   (mapi_func) noopGetMaterialfv,
   (mapi_func) noopGetMaterialiv,
   (mapi_func) noopGetPixelMapfv,
   (mapi_func) noopGetPixelMapuiv,
   (mapi_func) noopGetPixelMapusv,
   (mapi_func) noopGetPolygonStipple,
   (mapi_func) noopGetString,
   (mapi_func) noopGetTexEnvfv,
   (mapi_func) noopGetTexEnviv,
   (mapi_func) noopGetTexGendv,
   (mapi_func) noopGetTexGenfv,
   (mapi_func) noopGetTexGeniv,
   (mapi_func) noopGetTexImage,
   (mapi_func) noopGetTexParameterfv,
   (mapi_func) noopGetTexParameteriv,
   (mapi_func) noopGetTexLevelParameterfv,
   (mapi_func) noopGetTexLevelParameteriv,
   (mapi_func) noopIsEnabled,
   (mapi_func) noopIsList,
   (mapi_func) noopDepthRange,
   (mapi_func) noopFrustum,
   (mapi_func) noopLoadIdentity,
   (mapi_func) noopLoadMatrixf,
   (mapi_func) noopLoadMatrixd,
   (mapi_func) noopMatrixMode,
   (mapi_func) noopMultMatrixf,
   (mapi_func) noopMultMatrixd,
   (mapi_func) noopOrtho,
   (mapi_func) noopPopMatrix,
   (mapi_func) noopPushMatrix,
   (mapi_func) noopRotated,
   (mapi_func) noopRotatef,
   (mapi_func) noopScaled,
   (mapi_func) noopScalef,
   (mapi_func) noopTranslated,
   (mapi_func) noopTranslatef,
   (mapi_func) noopViewport,
   (mapi_func) noopArrayElement,
   (mapi_func) noopBindTexture,
   (mapi_func) noopColorPointer,
   (mapi_func) noopDisableClientState,
   (mapi_func) noopDrawArrays,
   (mapi_func) noopDrawElements,
   (mapi_func) noopEdgeFlagPointer,
   (mapi_func) noopEnableClientState,
   (mapi_func) noopIndexPointer,
   (mapi_func) noopIndexub,
   (mapi_func) noopIndexubv,
   (mapi_func) noopInterleavedArrays,
   (mapi_func) noopNormalPointer,
   (mapi_func) noopPolygonOffset,
   (mapi_func) noopTexCoordPointer,
   (mapi_func) noopVertexPointer,
   (mapi_func) noopAreTexturesResident,
   (mapi_func) noopCopyTexImage1D,
   (mapi_func) noopCopyTexImage2D,
   (mapi_func) noopCopyTexSubImage1D,
   (mapi_func) noopCopyTexSubImage2D,
   (mapi_func) noopDeleteTextures,
   (mapi_func) noopGenTextures,
   (mapi_func) noopGetPointerv,
   (mapi_func) noopIsTexture,
   (mapi_func) noopPrioritizeTextures,
   (mapi_func) noopTexSubImage1D,
   (mapi_func) noopTexSubImage2D,
   (mapi_func) noopPopClientAttrib,
   (mapi_func) noopPushClientAttrib,
   (mapi_func) noopBlendColor,
   (mapi_func) noopBlendEquation,
   (mapi_func) noopDrawRangeElements,
   (mapi_func) noopColorTable,
   (mapi_func) noopColorTableParameterfv,
   (mapi_func) noopColorTableParameteriv,
   (mapi_func) noopCopyColorTable,
   (mapi_func) noopGetColorTable,
   (mapi_func) noopGetColorTableParameterfv,
   (mapi_func) noopGetColorTableParameteriv,
   (mapi_func) noopColorSubTable,
   (mapi_func) noopCopyColorSubTable,
   (mapi_func) noopConvolutionFilter1D,
   (mapi_func) noopConvolutionFilter2D,
   (mapi_func) noopConvolutionParameterf,
   (mapi_func) noopConvolutionParameterfv,
   (mapi_func) noopConvolutionParameteri,
   (mapi_func) noopConvolutionParameteriv,
   (mapi_func) noopCopyConvolutionFilter1D,
   (mapi_func) noopCopyConvolutionFilter2D,
   (mapi_func) noopGetConvolutionFilter,
   (mapi_func) noopGetConvolutionParameterfv,
   (mapi_func) noopGetConvolutionParameteriv,
   (mapi_func) noopGetSeparableFilter,
   (mapi_func) noopSeparableFilter2D,
   (mapi_func) noopGetHistogram,
   (mapi_func) noopGetHistogramParameterfv,
   (mapi_func) noopGetHistogramParameteriv,
   (mapi_func) noopGetMinmax,
   (mapi_func) noopGetMinmaxParameterfv,
   (mapi_func) noopGetMinmaxParameteriv,
   (mapi_func) noopHistogram,
   (mapi_func) noopMinmax,
   (mapi_func) noopResetHistogram,
   (mapi_func) noopResetMinmax,
   (mapi_func) noopTexImage3D,
   (mapi_func) noopTexSubImage3D,
   (mapi_func) noopCopyTexSubImage3D,
   (mapi_func) noopActiveTexture,
   (mapi_func) noopClientActiveTexture,
   (mapi_func) noopMultiTexCoord1d,
   (mapi_func) noopMultiTexCoord1dv,
   (mapi_func) noopMultiTexCoord1fARB,
   (mapi_func) noopMultiTexCoord1fvARB,
   (mapi_func) noopMultiTexCoord1i,
   (mapi_func) noopMultiTexCoord1iv,
   (mapi_func) noopMultiTexCoord1s,
   (mapi_func) noopMultiTexCoord1sv,
   (mapi_func) noopMultiTexCoord2d,
   (mapi_func) noopMultiTexCoord2dv,
   (mapi_func) noopMultiTexCoord2fARB,
   (mapi_func) noopMultiTexCoord2fvARB,
   (mapi_func) noopMultiTexCoord2i,
   (mapi_func) noopMultiTexCoord2iv,
   (mapi_func) noopMultiTexCoord2s,
   (mapi_func) noopMultiTexCoord2sv,
   (mapi_func) noopMultiTexCoord3d,
   (mapi_func) noopMultiTexCoord3dv,
   (mapi_func) noopMultiTexCoord3fARB,
   (mapi_func) noopMultiTexCoord3fvARB,
   (mapi_func) noopMultiTexCoord3i,
   (mapi_func) noopMultiTexCoord3iv,
   (mapi_func) noopMultiTexCoord3s,
   (mapi_func) noopMultiTexCoord3sv,
   (mapi_func) noopMultiTexCoord4d,
   (mapi_func) noopMultiTexCoord4dv,
   (mapi_func) noopMultiTexCoord4fARB,
   (mapi_func) noopMultiTexCoord4fvARB,
   (mapi_func) noopMultiTexCoord4i,
   (mapi_func) noopMultiTexCoord4iv,
   (mapi_func) noopMultiTexCoord4s,
   (mapi_func) noopMultiTexCoord4sv,
   (mapi_func) noopCompressedTexImage1D,
   (mapi_func) noopCompressedTexImage2D,
   (mapi_func) noopCompressedTexImage3D,
   (mapi_func) noopCompressedTexSubImage1D,
   (mapi_func) noopCompressedTexSubImage2D,
   (mapi_func) noopCompressedTexSubImage3D,
   (mapi_func) noopGetCompressedTexImage,
   (mapi_func) noopLoadTransposeMatrixd,
   (mapi_func) noopLoadTransposeMatrixf,
   (mapi_func) noopMultTransposeMatrixd,
   (mapi_func) noopMultTransposeMatrixf,
   (mapi_func) noopSampleCoverage,
   (mapi_func) noopBlendFuncSeparate,
   (mapi_func) noopFogCoordPointer,
   (mapi_func) noopFogCoordd,
   (mapi_func) noopFogCoorddv,
   (mapi_func) noopMultiDrawArrays,
   (mapi_func) noopPointParameterf,
   (mapi_func) noopPointParameterfv,
   (mapi_func) noopPointParameteri,
   (mapi_func) noopPointParameteriv,
   (mapi_func) noopSecondaryColor3b,
   (mapi_func) noopSecondaryColor3bv,
   (mapi_func) noopSecondaryColor3d,
   (mapi_func) noopSecondaryColor3dv,
   (mapi_func) noopSecondaryColor3i,
   (mapi_func) noopSecondaryColor3iv,
   (mapi_func) noopSecondaryColor3s,
   (mapi_func) noopSecondaryColor3sv,
   (mapi_func) noopSecondaryColor3ub,
   (mapi_func) noopSecondaryColor3ubv,
   (mapi_func) noopSecondaryColor3ui,
   (mapi_func) noopSecondaryColor3uiv,
   (mapi_func) noopSecondaryColor3us,
   (mapi_func) noopSecondaryColor3usv,
   (mapi_func) noopSecondaryColorPointer,
   (mapi_func) noopWindowPos2d,
   (mapi_func) noopWindowPos2dv,
   (mapi_func) noopWindowPos2f,
   (mapi_func) noopWindowPos2fv,
   (mapi_func) noopWindowPos2i,
   (mapi_func) noopWindowPos2iv,
   (mapi_func) noopWindowPos2s,
   (mapi_func) noopWindowPos2sv,
   (mapi_func) noopWindowPos3d,
   (mapi_func) noopWindowPos3dv,
   (mapi_func) noopWindowPos3f,
   (mapi_func) noopWindowPos3fv,
   (mapi_func) noopWindowPos3i,
   (mapi_func) noopWindowPos3iv,
   (mapi_func) noopWindowPos3s,
   (mapi_func) noopWindowPos3sv,
   (mapi_func) noopBeginQuery,
   (mapi_func) noopBindBuffer,
   (mapi_func) noopBufferData,
   (mapi_func) noopBufferSubData,
   (mapi_func) noopDeleteBuffers,
   (mapi_func) noopDeleteQueries,
   (mapi_func) noopEndQuery,
   (mapi_func) noopGenBuffers,
   (mapi_func) noopGenQueries,
   (mapi_func) noopGetBufferParameteriv,
   (mapi_func) noopGetBufferPointerv,
   (mapi_func) noopGetBufferSubData,
   (mapi_func) noopGetQueryObjectiv,
   (mapi_func) noopGetQueryObjectuiv,
   (mapi_func) noopGetQueryiv,
   (mapi_func) noopIsBuffer,
   (mapi_func) noopIsQuery,
   (mapi_func) noopMapBuffer,
   (mapi_func) noopUnmapBuffer,
   (mapi_func) noopAttachShader,
   (mapi_func) noopBindAttribLocation,
   (mapi_func) noopBlendEquationSeparate,
   (mapi_func) noopCompileShader,
   (mapi_func) noopCreateProgram,
   (mapi_func) noopCreateShader,
   (mapi_func) noopDeleteProgram,
   (mapi_func) noopDeleteShader,
   (mapi_func) noopDetachShader,
   (mapi_func) noopDisableVertexAttribArray,
   (mapi_func) noopDrawBuffers,
   (mapi_func) noopEnableVertexAttribArray,
   (mapi_func) noopGetActiveAttrib,
   (mapi_func) noopGetActiveUniform,
   (mapi_func) noopGetAttachedShaders,
   (mapi_func) noopGetAttribLocation,
   (mapi_func) noopGetProgramInfoLog,
   (mapi_func) noopGetProgramiv,
   (mapi_func) noopGetShaderInfoLog,
   (mapi_func) noopGetShaderSource,
   (mapi_func) noopGetShaderiv,
   (mapi_func) noopGetUniformLocation,
   (mapi_func) noopGetUniformfv,
   (mapi_func) noopGetUniformiv,
   (mapi_func) noopGetVertexAttribPointerv,
   (mapi_func) noopGetVertexAttribdv,
   (mapi_func) noopGetVertexAttribfv,
   (mapi_func) noopGetVertexAttribiv,
   (mapi_func) noopIsProgram,
   (mapi_func) noopIsShader,
   (mapi_func) noopLinkProgram,
   (mapi_func) noopShaderSource,
   (mapi_func) noopStencilFuncSeparate,
   (mapi_func) noopStencilMaskSeparate,
   (mapi_func) noopStencilOpSeparate,
   (mapi_func) noopUniform1f,
   (mapi_func) noopUniform1fv,
   (mapi_func) noopUniform1i,
   (mapi_func) noopUniform1iv,
   (mapi_func) noopUniform2f,
   (mapi_func) noopUniform2fv,
   (mapi_func) noopUniform2i,
   (mapi_func) noopUniform2iv,
   (mapi_func) noopUniform3f,
   (mapi_func) noopUniform3fv,
   (mapi_func) noopUniform3i,
   (mapi_func) noopUniform3iv,
   (mapi_func) noopUniform4f,
   (mapi_func) noopUniform4fv,
   (mapi_func) noopUniform4i,
   (mapi_func) noopUniform4iv,
   (mapi_func) noopUniformMatrix2fv,
   (mapi_func) noopUniformMatrix3fv,
   (mapi_func) noopUniformMatrix4fv,
   (mapi_func) noopUseProgram,
   (mapi_func) noopValidateProgram,
   (mapi_func) noopVertexAttrib1d,
   (mapi_func) noopVertexAttrib1dv,
   (mapi_func) noopVertexAttrib1s,
   (mapi_func) noopVertexAttrib1sv,
   (mapi_func) noopVertexAttrib2d,
   (mapi_func) noopVertexAttrib2dv,
   (mapi_func) noopVertexAttrib2s,
   (mapi_func) noopVertexAttrib2sv,
   (mapi_func) noopVertexAttrib3d,
   (mapi_func) noopVertexAttrib3dv,
   (mapi_func) noopVertexAttrib3s,
   (mapi_func) noopVertexAttrib3sv,
   (mapi_func) noopVertexAttrib4Nbv,
   (mapi_func) noopVertexAttrib4Niv,
   (mapi_func) noopVertexAttrib4Nsv,
   (mapi_func) noopVertexAttrib4Nub,
   (mapi_func) noopVertexAttrib4Nubv,
   (mapi_func) noopVertexAttrib4Nuiv,
   (mapi_func) noopVertexAttrib4Nusv,
   (mapi_func) noopVertexAttrib4bv,
   (mapi_func) noopVertexAttrib4d,
   (mapi_func) noopVertexAttrib4dv,
   (mapi_func) noopVertexAttrib4iv,
   (mapi_func) noopVertexAttrib4s,
   (mapi_func) noopVertexAttrib4sv,
   (mapi_func) noopVertexAttrib4ubv,
   (mapi_func) noopVertexAttrib4uiv,
   (mapi_func) noopVertexAttrib4usv,
   (mapi_func) noopVertexAttribPointer,
   (mapi_func) noopUniformMatrix2x3fv,
   (mapi_func) noopUniformMatrix2x4fv,
   (mapi_func) noopUniformMatrix3x2fv,
   (mapi_func) noopUniformMatrix3x4fv,
   (mapi_func) noopUniformMatrix4x2fv,
   (mapi_func) noopUniformMatrix4x3fv,
   (mapi_func) noopBeginConditionalRender,
   (mapi_func) noopBeginTransformFeedback,
   (mapi_func) noopBindBufferBase,
   (mapi_func) noopBindBufferRange,
   (mapi_func) noopBindFragDataLocation,
   (mapi_func) noopClampColor,
   (mapi_func) noopClearBufferfi,
   (mapi_func) noopClearBufferfv,
   (mapi_func) noopClearBufferiv,
   (mapi_func) noopClearBufferuiv,
   (mapi_func) noopColorMaski,
   (mapi_func) noopDisablei,
   (mapi_func) noopEnablei,
   (mapi_func) noopEndConditionalRender,
   (mapi_func) noopEndTransformFeedback,
   (mapi_func) noopGetBooleani_v,
   (mapi_func) noopGetFragDataLocation,
   (mapi_func) noopGetIntegeri_v,
   (mapi_func) noopGetStringi,
   (mapi_func) noopGetTexParameterIiv,
   (mapi_func) noopGetTexParameterIuiv,
   (mapi_func) noopGetTransformFeedbackVarying,
   (mapi_func) noopGetUniformuiv,
   (mapi_func) noopGetVertexAttribIiv,
   (mapi_func) noopGetVertexAttribIuiv,
   (mapi_func) noopIsEnabledi,
   (mapi_func) noopTexParameterIiv,
   (mapi_func) noopTexParameterIuiv,
   (mapi_func) noopTransformFeedbackVaryings,
   (mapi_func) noopUniform1ui,
   (mapi_func) noopUniform1uiv,
   (mapi_func) noopUniform2ui,
   (mapi_func) noopUniform2uiv,
   (mapi_func) noopUniform3ui,
   (mapi_func) noopUniform3uiv,
   (mapi_func) noopUniform4ui,
   (mapi_func) noopUniform4uiv,
   (mapi_func) noopVertexAttribI1iv,
   (mapi_func) noopVertexAttribI1uiv,
   (mapi_func) noopVertexAttribI4bv,
   (mapi_func) noopVertexAttribI4sv,
   (mapi_func) noopVertexAttribI4ubv,
   (mapi_func) noopVertexAttribI4usv,
   (mapi_func) noopVertexAttribIPointer,
   (mapi_func) noopPrimitiveRestartIndex,
   (mapi_func) noopTexBuffer,
   (mapi_func) noopFramebufferTexture,
   (mapi_func) noopGetBufferParameteri64v,
   (mapi_func) noopGetInteger64i_v,
   (mapi_func) noopVertexAttribDivisor,
   (mapi_func) noopBindProgramARB,
   (mapi_func) noopDeleteProgramsARB,
   (mapi_func) noopGenProgramsARB,
   (mapi_func) noopGetProgramEnvParameterdvARB,
   (mapi_func) noopGetProgramEnvParameterfvARB,
   (mapi_func) noopGetProgramLocalParameterdvARB,
   (mapi_func) noopGetProgramLocalParameterfvARB,
   (mapi_func) noopGetProgramStringARB,
   (mapi_func) noopGetProgramivARB,
   (mapi_func) noopIsProgramARB,
   (mapi_func) noopProgramEnvParameter4dARB,
   (mapi_func) noopProgramEnvParameter4dvARB,
   (mapi_func) noopProgramEnvParameter4fARB,
   (mapi_func) noopProgramEnvParameter4fvARB,
   (mapi_func) noopProgramLocalParameter4dARB,
   (mapi_func) noopProgramLocalParameter4dvARB,
   (mapi_func) noopProgramLocalParameter4fARB,
   (mapi_func) noopProgramLocalParameter4fvARB,
   (mapi_func) noopProgramStringARB,
   (mapi_func) noopVertexAttrib1fARB,
   (mapi_func) noopVertexAttrib1fvARB,
   (mapi_func) noopVertexAttrib2fARB,
   (mapi_func) noopVertexAttrib2fvARB,
   (mapi_func) noopVertexAttrib3fARB,
   (mapi_func) noopVertexAttrib3fvARB,
   (mapi_func) noopVertexAttrib4fARB,
   (mapi_func) noopVertexAttrib4fvARB,
   (mapi_func) noopAttachObjectARB,
   (mapi_func) noopCreateProgramObjectARB,
   (mapi_func) noopCreateShaderObjectARB,
   (mapi_func) noopDeleteObjectARB,
   (mapi_func) noopDetachObjectARB,
   (mapi_func) noopGetAttachedObjectsARB,
   (mapi_func) noopGetHandleARB,
   (mapi_func) noopGetInfoLogARB,
   (mapi_func) noopGetObjectParameterfvARB,
   (mapi_func) noopGetObjectParameterivARB,
   (mapi_func) noopDrawArraysInstancedARB,
   (mapi_func) noopDrawElementsInstancedARB,
   (mapi_func) noopBindFramebuffer,
   (mapi_func) noopBindRenderbuffer,
   (mapi_func) noopBlitFramebuffer,
   (mapi_func) noopCheckFramebufferStatus,
   (mapi_func) noopDeleteFramebuffers,
   (mapi_func) noopDeleteRenderbuffers,
   (mapi_func) noopFramebufferRenderbuffer,
   (mapi_func) noopFramebufferTexture1D,
   (mapi_func) noopFramebufferTexture2D,
   (mapi_func) noopFramebufferTexture3D,
   (mapi_func) noopFramebufferTextureLayer,
   (mapi_func) noopGenFramebuffers,
   (mapi_func) noopGenRenderbuffers,
   (mapi_func) noopGenerateMipmap,
   (mapi_func) noopGetFramebufferAttachmentParameteriv,
   (mapi_func) noopGetRenderbufferParameteriv,
   (mapi_func) noopIsFramebuffer,
   (mapi_func) noopIsRenderbuffer,
   (mapi_func) noopRenderbufferStorage,
   (mapi_func) noopRenderbufferStorageMultisample,
   (mapi_func) noopFramebufferTextureFaceARB,
   (mapi_func) noopFlushMappedBufferRange,
   (mapi_func) noopMapBufferRange,
   (mapi_func) noopBindVertexArray,
   (mapi_func) noopDeleteVertexArrays,
   (mapi_func) noopGenVertexArrays,
   (mapi_func) noopIsVertexArray,
   (mapi_func) noopGetActiveUniformBlockName,
   (mapi_func) noopGetActiveUniformBlockiv,
   (mapi_func) noopGetActiveUniformName,
   (mapi_func) noopGetActiveUniformsiv,
   (mapi_func) noopGetUniformBlockIndex,
   (mapi_func) noopGetUniformIndices,
   (mapi_func) noopUniformBlockBinding,
   (mapi_func) noopCopyBufferSubData,
   (mapi_func) noopClientWaitSync,
   (mapi_func) noopDeleteSync,
   (mapi_func) noopFenceSync,
   (mapi_func) noopGetInteger64v,
   (mapi_func) noopGetSynciv,
   (mapi_func) noopIsSync,
   (mapi_func) noopWaitSync,
   (mapi_func) noopDrawElementsBaseVertex,
   (mapi_func) noopDrawElementsInstancedBaseVertex,
   (mapi_func) noopDrawRangeElementsBaseVertex,
   (mapi_func) noopMultiDrawElementsBaseVertex,
   (mapi_func) noopProvokingVertex,
   (mapi_func) noopGetMultisamplefv,
   (mapi_func) noopSampleMaski,
   (mapi_func) noopTexImage2DMultisample,
   (mapi_func) noopTexImage3DMultisample,
   (mapi_func) noopBlendEquationSeparateiARB,
   (mapi_func) noopBlendEquationiARB,
   (mapi_func) noopBlendFuncSeparateiARB,
   (mapi_func) noopBlendFunciARB,
   (mapi_func) noopBindFragDataLocationIndexed,
   (mapi_func) noopGetFragDataIndex,
   (mapi_func) noopBindSampler,
   (mapi_func) noopDeleteSamplers,
   (mapi_func) noopGenSamplers,
   (mapi_func) noopGetSamplerParameterIiv,
   (mapi_func) noopGetSamplerParameterIuiv,
   (mapi_func) noopGetSamplerParameterfv,
   (mapi_func) noopGetSamplerParameteriv,
   (mapi_func) noopIsSampler,
   (mapi_func) noopSamplerParameterIiv,
   (mapi_func) noopSamplerParameterIuiv,
   (mapi_func) noopSamplerParameterf,
   (mapi_func) noopSamplerParameterfv,
   (mapi_func) noopSamplerParameteri,
   (mapi_func) noopSamplerParameteriv,
   (mapi_func) noopGetQueryObjecti64v,
   (mapi_func) noopGetQueryObjectui64v,
   (mapi_func) noopQueryCounter,
   (mapi_func) noopColorP3ui,
   (mapi_func) noopColorP3uiv,
   (mapi_func) noopColorP4ui,
   (mapi_func) noopColorP4uiv,
   (mapi_func) noopMultiTexCoordP1ui,
   (mapi_func) noopMultiTexCoordP1uiv,
   (mapi_func) noopMultiTexCoordP2ui,
   (mapi_func) noopMultiTexCoordP2uiv,
   (mapi_func) noopMultiTexCoordP3ui,
   (mapi_func) noopMultiTexCoordP3uiv,
   (mapi_func) noopMultiTexCoordP4ui,
   (mapi_func) noopMultiTexCoordP4uiv,
   (mapi_func) noopNormalP3ui,
   (mapi_func) noopNormalP3uiv,
   (mapi_func) noopSecondaryColorP3ui,
   (mapi_func) noopSecondaryColorP3uiv,
   (mapi_func) noopTexCoordP1ui,
   (mapi_func) noopTexCoordP1uiv,
   (mapi_func) noopTexCoordP2ui,
   (mapi_func) noopTexCoordP2uiv,
   (mapi_func) noopTexCoordP3ui,
   (mapi_func) noopTexCoordP3uiv,
   (mapi_func) noopTexCoordP4ui,
   (mapi_func) noopTexCoordP4uiv,
   (mapi_func) noopVertexAttribP1ui,
   (mapi_func) noopVertexAttribP1uiv,
   (mapi_func) noopVertexAttribP2ui,
   (mapi_func) noopVertexAttribP2uiv,
   (mapi_func) noopVertexAttribP3ui,
   (mapi_func) noopVertexAttribP3uiv,
   (mapi_func) noopVertexAttribP4ui,
   (mapi_func) noopVertexAttribP4uiv,
   (mapi_func) noopVertexP2ui,
   (mapi_func) noopVertexP2uiv,
   (mapi_func) noopVertexP3ui,
   (mapi_func) noopVertexP3uiv,
   (mapi_func) noopVertexP4ui,
   (mapi_func) noopVertexP4uiv,
   (mapi_func) noopBindTransformFeedback,
   (mapi_func) noopDeleteTransformFeedbacks,
   (mapi_func) noopDrawTransformFeedback,
   (mapi_func) noopGenTransformFeedbacks,
   (mapi_func) noopIsTransformFeedback,
   (mapi_func) noopPauseTransformFeedback,
   (mapi_func) noopResumeTransformFeedback,
   (mapi_func) noopBeginQueryIndexed,
   (mapi_func) noopDrawTransformFeedbackStream,
   (mapi_func) noopEndQueryIndexed,
   (mapi_func) noopGetQueryIndexediv,
   (mapi_func) noopClearDepthf,
   (mapi_func) noopDepthRangef,
   (mapi_func) noopGetShaderPrecisionFormat,
   (mapi_func) noopReleaseShaderCompiler,
   (mapi_func) noopShaderBinary,
   (mapi_func) noopGetProgramBinary,
   (mapi_func) noopProgramBinary,
   (mapi_func) noopProgramParameteri,
   (mapi_func) noopDebugMessageCallbackARB,
   (mapi_func) noopDebugMessageControlARB,
   (mapi_func) noopDebugMessageInsertARB,
   (mapi_func) noopGetDebugMessageLogARB,
   (mapi_func) noopGetGraphicsResetStatusARB,
   (mapi_func) noopGetnColorTableARB,
   (mapi_func) noopGetnCompressedTexImageARB,
   (mapi_func) noopGetnConvolutionFilterARB,
   (mapi_func) noopGetnHistogramARB,
   (mapi_func) noopGetnMapdvARB,
   (mapi_func) noopGetnMapfvARB,
   (mapi_func) noopGetnMapivARB,
   (mapi_func) noopGetnMinmaxARB,
   (mapi_func) noopGetnPixelMapfvARB,
   (mapi_func) noopGetnPixelMapuivARB,
   (mapi_func) noopGetnPixelMapusvARB,
   (mapi_func) noopGetnPolygonStippleARB,
   (mapi_func) noopGetnSeparableFilterARB,
   (mapi_func) noopGetnTexImageARB,
   (mapi_func) noopGetnUniformdvARB,
   (mapi_func) noopGetnUniformfvARB,
   (mapi_func) noopGetnUniformivARB,
   (mapi_func) noopGetnUniformuivARB,
   (mapi_func) noopReadnPixelsARB,
   (mapi_func) noopDrawArraysInstancedBaseInstance,
   (mapi_func) noopDrawElementsInstancedBaseInstance,
   (mapi_func) noopDrawElementsInstancedBaseVertexBaseInstance,
   (mapi_func) noopDrawTransformFeedbackInstanced,
   (mapi_func) noopDrawTransformFeedbackStreamInstanced,
   (mapi_func) noopGetInternalformativ,
   (mapi_func) noopTexStorage1D,
   (mapi_func) noopTexStorage2D,
   (mapi_func) noopTexStorage3D,
   (mapi_func) noopTextureStorage1DEXT,
   (mapi_func) noopTextureStorage2DEXT,
   (mapi_func) noopTextureStorage3DEXT,
   (mapi_func) noopTexBufferRange,
   (mapi_func) noopTexStorage2DMultisample,
   (mapi_func) noopTexStorage3DMultisample,
   (mapi_func) noopInvalidateBufferData,
   (mapi_func) noopInvalidateBufferSubData,
   (mapi_func) noopInvalidateFramebuffer,
   (mapi_func) noopInvalidateSubFramebuffer,
   (mapi_func) noopInvalidateTexImage,
   (mapi_func) noopInvalidateTexSubImage,
   (mapi_func) noopPolygonOffsetEXT,
   (mapi_func) noopDrawTexfOES,
   (mapi_func) noopDrawTexfvOES,
   (mapi_func) noopDrawTexiOES,
   (mapi_func) noopDrawTexivOES,
   (mapi_func) noopDrawTexsOES,
   (mapi_func) noopDrawTexsvOES,
   (mapi_func) noopDrawTexxOES,
   (mapi_func) noopDrawTexxvOES,
   (mapi_func) noopPointSizePointerOES,
   (mapi_func) noopQueryMatrixxOES,
   (mapi_func) noopSampleMaskSGIS,
   (mapi_func) noopSamplePatternSGIS,
   (mapi_func) noopColorPointerEXT,
   (mapi_func) noopEdgeFlagPointerEXT,
   (mapi_func) noopIndexPointerEXT,
   (mapi_func) noopNormalPointerEXT,
   (mapi_func) noopTexCoordPointerEXT,
   (mapi_func) noopVertexPointerEXT,
   (mapi_func) noopDiscardFramebufferEXT,
   (mapi_func) noopLockArraysEXT,
   (mapi_func) noopUnlockArraysEXT,
   (mapi_func) noopSecondaryColor3fEXT,
   (mapi_func) noopSecondaryColor3fvEXT,
   (mapi_func) noopMultiDrawElementsEXT,
   (mapi_func) noopFogCoordfEXT,
   (mapi_func) noopFogCoordfvEXT,
   (mapi_func) noopResizeBuffersMESA,
   (mapi_func) noopWindowPos4dMESA,
   (mapi_func) noopWindowPos4dvMESA,
   (mapi_func) noopWindowPos4fMESA,
   (mapi_func) noopWindowPos4fvMESA,
   (mapi_func) noopWindowPos4iMESA,
   (mapi_func) noopWindowPos4ivMESA,
   (mapi_func) noopWindowPos4sMESA,
   (mapi_func) noopWindowPos4svMESA,
   (mapi_func) noopMultiModeDrawArraysIBM,
   (mapi_func) noopMultiModeDrawElementsIBM,
   (mapi_func) noopAreProgramsResidentNV,
   (mapi_func) noopExecuteProgramNV,
   (mapi_func) noopGetProgramParameterdvNV,
   (mapi_func) noopGetProgramParameterfvNV,
   (mapi_func) noopGetProgramStringNV,
   (mapi_func) noopGetProgramivNV,
   (mapi_func) noopGetTrackMatrixivNV,
   (mapi_func) noopGetVertexAttribdvNV,
   (mapi_func) noopGetVertexAttribfvNV,
   (mapi_func) noopGetVertexAttribivNV,
   (mapi_func) noopLoadProgramNV,
   (mapi_func) noopProgramParameters4dvNV,
   (mapi_func) noopProgramParameters4fvNV,
   (mapi_func) noopRequestResidentProgramsNV,
   (mapi_func) noopTrackMatrixNV,
   (mapi_func) noopVertexAttrib1dNV,
   (mapi_func) noopVertexAttrib1dvNV,
   (mapi_func) noopVertexAttrib1fNV,
   (mapi_func) noopVertexAttrib1fvNV,
   (mapi_func) noopVertexAttrib1sNV,
   (mapi_func) noopVertexAttrib1svNV,
   (mapi_func) noopVertexAttrib2dNV,
   (mapi_func) noopVertexAttrib2dvNV,
   (mapi_func) noopVertexAttrib2fNV,
   (mapi_func) noopVertexAttrib2fvNV,
   (mapi_func) noopVertexAttrib2sNV,
   (mapi_func) noopVertexAttrib2svNV,
   (mapi_func) noopVertexAttrib3dNV,
   (mapi_func) noopVertexAttrib3dvNV,
   (mapi_func) noopVertexAttrib3fNV,
   (mapi_func) noopVertexAttrib3fvNV,
   (mapi_func) noopVertexAttrib3sNV,
   (mapi_func) noopVertexAttrib3svNV,
   (mapi_func) noopVertexAttrib4dNV,
   (mapi_func) noopVertexAttrib4dvNV,
   (mapi_func) noopVertexAttrib4fNV,
   (mapi_func) noopVertexAttrib4fvNV,
   (mapi_func) noopVertexAttrib4sNV,
   (mapi_func) noopVertexAttrib4svNV,
   (mapi_func) noopVertexAttrib4ubNV,
   (mapi_func) noopVertexAttrib4ubvNV,
   (mapi_func) noopVertexAttribPointerNV,
   (mapi_func) noopVertexAttribs1dvNV,
   (mapi_func) noopVertexAttribs1fvNV,
   (mapi_func) noopVertexAttribs1svNV,
   (mapi_func) noopVertexAttribs2dvNV,
   (mapi_func) noopVertexAttribs2fvNV,
   (mapi_func) noopVertexAttribs2svNV,
   (mapi_func) noopVertexAttribs3dvNV,
   (mapi_func) noopVertexAttribs3fvNV,
   (mapi_func) noopVertexAttribs3svNV,
   (mapi_func) noopVertexAttribs4dvNV,
   (mapi_func) noopVertexAttribs4fvNV,
   (mapi_func) noopVertexAttribs4svNV,
   (mapi_func) noopVertexAttribs4ubvNV,
   (mapi_func) noopGetTexBumpParameterfvATI,
   (mapi_func) noopGetTexBumpParameterivATI,
   (mapi_func) noopTexBumpParameterfvATI,
   (mapi_func) noopTexBumpParameterivATI,
   (mapi_func) noopAlphaFragmentOp1ATI,
   (mapi_func) noopAlphaFragmentOp2ATI,
   (mapi_func) noopAlphaFragmentOp3ATI,
   (mapi_func) noopBeginFragmentShaderATI,
   (mapi_func) noopBindFragmentShaderATI,
   (mapi_func) noopColorFragmentOp1ATI,
   (mapi_func) noopColorFragmentOp2ATI,
   (mapi_func) noopColorFragmentOp3ATI,
   (mapi_func) noopDeleteFragmentShaderATI,
   (mapi_func) noopEndFragmentShaderATI,
   (mapi_func) noopGenFragmentShadersATI,
   (mapi_func) noopPassTexCoordATI,
   (mapi_func) noopSampleMapATI,
   (mapi_func) noopSetFragmentShaderConstantATI,
   (mapi_func) noopActiveStencilFaceEXT,
   (mapi_func) noopBindVertexArrayAPPLE,
   (mapi_func) noopGenVertexArraysAPPLE,
   (mapi_func) noopGetProgramNamedParameterdvNV,
   (mapi_func) noopGetProgramNamedParameterfvNV,
   (mapi_func) noopProgramNamedParameter4dNV,
   (mapi_func) noopProgramNamedParameter4dvNV,
   (mapi_func) noopProgramNamedParameter4fNV,
   (mapi_func) noopProgramNamedParameter4fvNV,
   (mapi_func) noopPrimitiveRestartNV,
   (mapi_func) noopGetTexGenxvOES,
   (mapi_func) noopTexGenxOES,
   (mapi_func) noopTexGenxvOES,
   (mapi_func) noopDepthBoundsEXT,
   (mapi_func) noopBindFramebufferEXT,
   (mapi_func) noopBindRenderbufferEXT,
   (mapi_func) noopBufferParameteriAPPLE,
   (mapi_func) noopFlushMappedBufferRangeAPPLE,
   (mapi_func) noopVertexAttribI1iEXT,
   (mapi_func) noopVertexAttribI1uiEXT,
   (mapi_func) noopVertexAttribI2iEXT,
   (mapi_func) noopVertexAttribI2ivEXT,
   (mapi_func) noopVertexAttribI2uiEXT,
   (mapi_func) noopVertexAttribI2uivEXT,
   (mapi_func) noopVertexAttribI3iEXT,
   (mapi_func) noopVertexAttribI3ivEXT,
   (mapi_func) noopVertexAttribI3uiEXT,
   (mapi_func) noopVertexAttribI3uivEXT,
   (mapi_func) noopVertexAttribI4iEXT,
   (mapi_func) noopVertexAttribI4ivEXT,
   (mapi_func) noopVertexAttribI4uiEXT,
   (mapi_func) noopVertexAttribI4uivEXT,
   (mapi_func) noopClearColorIiEXT,
   (mapi_func) noopClearColorIuiEXT,
   (mapi_func) noopBindBufferOffsetEXT,
   (mapi_func) noopGetObjectParameterivAPPLE,
   (mapi_func) noopObjectPurgeableAPPLE,
   (mapi_func) noopObjectUnpurgeableAPPLE,
   (mapi_func) noopActiveProgramEXT,
   (mapi_func) noopCreateShaderProgramEXT,
   (mapi_func) noopUseShaderProgramEXT,
   (mapi_func) noopTextureBarrierNV,
   (mapi_func) noopStencilFuncSeparateATI,
   (mapi_func) noopProgramEnvParameters4fvEXT,
   (mapi_func) noopProgramLocalParameters4fvEXT,
   (mapi_func) noopEGLImageTargetRenderbufferStorageOES,
   (mapi_func) noopEGLImageTargetTexture2DOES,
   (mapi_func) noopAlphaFuncx,
   (mapi_func) noopClearColorx,
   (mapi_func) noopClearDepthx,
   (mapi_func) noopColor4x,
   (mapi_func) noopDepthRangex,
   (mapi_func) noopFogx,
   (mapi_func) noopFogxv,
   (mapi_func) noopFrustumf,
   (mapi_func) noopFrustumx,
   (mapi_func) noopLightModelx,
   (mapi_func) noopLightModelxv,
   (mapi_func) noopLightx,
   (mapi_func) noopLightxv,
   (mapi_func) noopLineWidthx,
   (mapi_func) noopLoadMatrixx,
   (mapi_func) noopMaterialx,
   (mapi_func) noopMaterialxv,
   (mapi_func) noopMultMatrixx,
   (mapi_func) noopMultiTexCoord4x,
   (mapi_func) noopNormal3x,
   (mapi_func) noopOrthof,
   (mapi_func) noopOrthox,
   (mapi_func) noopPointSizex,
   (mapi_func) noopPolygonOffsetx,
   (mapi_func) noopRotatex,
   (mapi_func) noopSampleCoveragex,
   (mapi_func) noopScalex,
   (mapi_func) noopTexEnvx,
   (mapi_func) noopTexEnvxv,
   (mapi_func) noopTexParameterx,
   (mapi_func) noopTranslatex,
   (mapi_func) noopClipPlanef,
   (mapi_func) noopClipPlanex,
   (mapi_func) noopGetClipPlanef,
   (mapi_func) noopGetClipPlanex,
   (mapi_func) noopGetFixedv,
   (mapi_func) noopGetLightxv,
   (mapi_func) noopGetMaterialxv,
   (mapi_func) noopGetTexEnvxv,
   (mapi_func) noopGetTexParameterxv,
   (mapi_func) noopPointParameterx,
   (mapi_func) noopPointParameterxv,
   (mapi_func) noopTexParameterxv,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic
};

#else /* DEBUG */

const mapi_func table_noop_array[] = {
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic,
   (mapi_func) noop_generic
};

#endif /* DEBUG */
#undef MAPI_TMP_NOOP_ARRAY
#endif /* MAPI_TMP_NOOP_ARRAY */

#ifdef MAPI_TMP_PUBLIC_STUBS
static const char public_string_pool[] =
   "Accum\0"
   "ActiveProgramEXT\0"
   "ActiveStencilFaceEXT\0"
   "ActiveTexture\0"
   "ActiveTextureARB\0"
   "AlphaFragmentOp1ATI\0"
   "AlphaFragmentOp2ATI\0"
   "AlphaFragmentOp3ATI\0"
   "AlphaFunc\0"
   "AlphaFuncx\0"
   "AlphaFuncxOES\0"
   "AreProgramsResidentNV\0"
   "AreTexturesResident\0"
   "AreTexturesResidentEXT\0"
   "ArrayElement\0"
   "ArrayElementEXT\0"
   "AttachObjectARB\0"
   "AttachShader\0"
   "Begin\0"
   "BeginConditionalRender\0"
   "BeginConditionalRenderNV\0"
   "BeginFragmentShaderATI\0"
   "BeginQuery\0"
   "BeginQueryARB\0"
   "BeginQueryIndexed\0"
   "BeginTransformFeedback\0"
   "BeginTransformFeedbackEXT\0"
   "BindAttribLocation\0"
   "BindAttribLocationARB\0"
   "BindBuffer\0"
   "BindBufferARB\0"
   "BindBufferBase\0"
   "BindBufferBaseEXT\0"
   "BindBufferOffsetEXT\0"
   "BindBufferRange\0"
   "BindBufferRangeEXT\0"
   "BindFragDataLocation\0"
   "BindFragDataLocationEXT\0"
   "BindFragDataLocationIndexed\0"
   "BindFragmentShaderATI\0"
   "BindFramebuffer\0"
   "BindFramebufferEXT\0"
   "BindFramebufferOES\0"
   "BindProgramARB\0"
   "BindProgramNV\0"
   "BindRenderbuffer\0"
   "BindRenderbufferEXT\0"
   "BindRenderbufferOES\0"
   "BindSampler\0"
   "BindTexture\0"
   "BindTextureEXT\0"
   "BindTransformFeedback\0"
   "BindVertexArray\0"
   "BindVertexArrayAPPLE\0"
   "BindVertexArrayOES\0"
   "Bitmap\0"
   "BlendColor\0"
   "BlendColorEXT\0"
   "BlendEquation\0"
   "BlendEquationEXT\0"
   "BlendEquationIndexedAMD\0"
   "BlendEquationOES\0"
   "BlendEquationSeparate\0"
   "BlendEquationSeparateATI\0"
   "BlendEquationSeparateEXT\0"
   "BlendEquationSeparateIndexedAMD\0"
   "BlendEquationSeparateOES\0"
   "BlendEquationSeparateiARB\0"
   "BlendEquationiARB\0"
   "BlendFunc\0"
   "BlendFuncIndexedAMD\0"
   "BlendFuncSeparate\0"
   "BlendFuncSeparateEXT\0"
   "BlendFuncSeparateINGR\0"
   "BlendFuncSeparateIndexedAMD\0"
   "BlendFuncSeparateOES\0"
   "BlendFuncSeparateiARB\0"
   "BlendFunciARB\0"
   "BlitFramebuffer\0"
   "BlitFramebufferEXT\0"
   "BufferData\0"
   "BufferDataARB\0"
   "BufferParameteriAPPLE\0"
   "BufferSubData\0"
   "BufferSubDataARB\0"
   "CallList\0"
   "CallLists\0"
   "CheckFramebufferStatus\0"
   "CheckFramebufferStatusEXT\0"
   "CheckFramebufferStatusOES\0"
   "ClampColor\0"
   "ClampColorARB\0"
   "Clear\0"
   "ClearAccum\0"
   "ClearBufferfi\0"
   "ClearBufferfv\0"
   "ClearBufferiv\0"
   "ClearBufferuiv\0"
   "ClearColor\0"
   "ClearColorIiEXT\0"
   "ClearColorIuiEXT\0"
   "ClearColorx\0"
   "ClearColorxOES\0"
   "ClearDepth\0"
   "ClearDepthf\0"
   "ClearDepthfOES\0"
   "ClearDepthx\0"
   "ClearDepthxOES\0"
   "ClearIndex\0"
   "ClearStencil\0"
   "ClientActiveTexture\0"
   "ClientActiveTextureARB\0"
   "ClientWaitSync\0"
   "ClipPlane\0"
   "ClipPlanef\0"
   "ClipPlanefOES\0"
   "ClipPlanex\0"
   "ClipPlanexOES\0"
   "Color3b\0"
   "Color3bv\0"
   "Color3d\0"
   "Color3dv\0"
   "Color3f\0"
   "Color3fv\0"
   "Color3i\0"
   "Color3iv\0"
   "Color3s\0"
   "Color3sv\0"
   "Color3ub\0"
   "Color3ubv\0"
   "Color3ui\0"
   "Color3uiv\0"
   "Color3us\0"
   "Color3usv\0"
   "Color4b\0"
   "Color4bv\0"
   "Color4d\0"
   "Color4dv\0"
   "Color4f\0"
   "Color4fv\0"
   "Color4i\0"
   "Color4iv\0"
   "Color4s\0"
   "Color4sv\0"
   "Color4ub\0"
   "Color4ubv\0"
   "Color4ui\0"
   "Color4uiv\0"
   "Color4us\0"
   "Color4usv\0"
   "Color4x\0"
   "Color4xOES\0"
   "ColorFragmentOp1ATI\0"
   "ColorFragmentOp2ATI\0"
   "ColorFragmentOp3ATI\0"
   "ColorMask\0"
   "ColorMaskIndexedEXT\0"
   "ColorMaski\0"
   "ColorMaterial\0"
   "ColorP3ui\0"
   "ColorP3uiv\0"
   "ColorP4ui\0"
   "ColorP4uiv\0"
   "ColorPointer\0"
   "ColorPointerEXT\0"
   "ColorSubTable\0"
   "ColorSubTableEXT\0"
   "ColorTable\0"
   "ColorTableEXT\0"
   "ColorTableParameterfv\0"
   "ColorTableParameterfvSGI\0"
   "ColorTableParameteriv\0"
   "ColorTableParameterivSGI\0"
   "ColorTableSGI\0"
   "CompileShader\0"
   "CompileShaderARB\0"
   "CompressedTexImage1D\0"
   "CompressedTexImage1DARB\0"
   "CompressedTexImage2D\0"
   "CompressedTexImage2DARB\0"
   "CompressedTexImage3D\0"
   "CompressedTexImage3DARB\0"
   "CompressedTexImage3DOES\0"
   "CompressedTexSubImage1D\0"
   "CompressedTexSubImage1DARB\0"
   "CompressedTexSubImage2D\0"
   "CompressedTexSubImage2DARB\0"
   "CompressedTexSubImage3D\0"
   "CompressedTexSubImage3DARB\0"
   "CompressedTexSubImage3DOES\0"
   "ConvolutionFilter1D\0"
   "ConvolutionFilter1DEXT\0"
   "ConvolutionFilter2D\0"
   "ConvolutionFilter2DEXT\0"
   "ConvolutionParameterf\0"
   "ConvolutionParameterfEXT\0"
   "ConvolutionParameterfv\0"
   "ConvolutionParameterfvEXT\0"
   "ConvolutionParameteri\0"
   "ConvolutionParameteriEXT\0"
   "ConvolutionParameteriv\0"
   "ConvolutionParameterivEXT\0"
   "CopyBufferSubData\0"
   "CopyColorSubTable\0"
   "CopyColorSubTableEXT\0"
   "CopyColorTable\0"
   "CopyColorTableSGI\0"
   "CopyConvolutionFilter1D\0"
   "CopyConvolutionFilter1DEXT\0"
   "CopyConvolutionFilter2D\0"
   "CopyConvolutionFilter2DEXT\0"
   "CopyPixels\0"
   "CopyTexImage1D\0"
   "CopyTexImage1DEXT\0"
   "CopyTexImage2D\0"
   "CopyTexImage2DEXT\0"
   "CopyTexSubImage1D\0"
   "CopyTexSubImage1DEXT\0"
   "CopyTexSubImage2D\0"
   "CopyTexSubImage2DEXT\0"
   "CopyTexSubImage3D\0"
   "CopyTexSubImage3DEXT\0"
   "CopyTexSubImage3DOES\0"
   "CreateProgram\0"
   "CreateProgramObjectARB\0"
   "CreateShader\0"
   "CreateShaderObjectARB\0"
   "CreateShaderProgramEXT\0"
   "CullFace\0"
   "DebugMessageCallbackARB\0"
   "DebugMessageControlARB\0"
   "DebugMessageInsertARB\0"
   "DeleteBuffers\0"
   "DeleteBuffersARB\0"
   "DeleteFragmentShaderATI\0"
   "DeleteFramebuffers\0"
   "DeleteFramebuffersEXT\0"
   "DeleteFramebuffersOES\0"
   "DeleteLists\0"
   "DeleteObjectARB\0"
   "DeleteProgram\0"
   "DeleteProgramsARB\0"
   "DeleteProgramsNV\0"
   "DeleteQueries\0"
   "DeleteQueriesARB\0"
   "DeleteRenderbuffers\0"
   "DeleteRenderbuffersEXT\0"
   "DeleteRenderbuffersOES\0"
   "DeleteSamplers\0"
   "DeleteShader\0"
   "DeleteSync\0"
   "DeleteTextures\0"
   "DeleteTexturesEXT\0"
   "DeleteTransformFeedbacks\0"
   "DeleteVertexArrays\0"
   "DeleteVertexArraysAPPLE\0"
   "DeleteVertexArraysOES\0"
   "DepthBoundsEXT\0"
   "DepthFunc\0"
   "DepthMask\0"
   "DepthRange\0"
   "DepthRangef\0"
   "DepthRangefOES\0"
   "DepthRangex\0"
   "DepthRangexOES\0"
   "DetachObjectARB\0"
   "DetachShader\0"
   "Disable\0"
   "DisableClientState\0"
   "DisableIndexedEXT\0"
   "DisableVertexAttribArray\0"
   "DisableVertexAttribArrayARB\0"
   "Disablei\0"
   "DiscardFramebufferEXT\0"
   "DrawArrays\0"
   "DrawArraysEXT\0"
   "DrawArraysInstanced\0"
   "DrawArraysInstancedARB\0"
   "DrawArraysInstancedBaseInstance\0"
   "DrawArraysInstancedEXT\0"
   "DrawBuffer\0"
   "DrawBuffers\0"
   "DrawBuffersARB\0"
   "DrawBuffersATI\0"
   "DrawBuffersNV\0"
   "DrawElements\0"
   "DrawElementsBaseVertex\0"
   "DrawElementsInstanced\0"
   "DrawElementsInstancedARB\0"
   "DrawElementsInstancedBaseInstance\0"
   "DrawElementsInstancedBaseVertex\0"
   "DrawElementsInstancedBaseVertexBaseInstance\0"
   "DrawElementsInstancedEXT\0"
   "DrawPixels\0"
   "DrawRangeElements\0"
   "DrawRangeElementsBaseVertex\0"
   "DrawRangeElementsEXT\0"
   "DrawTexfOES\0"
   "DrawTexfvOES\0"
   "DrawTexiOES\0"
   "DrawTexivOES\0"
   "DrawTexsOES\0"
   "DrawTexsvOES\0"
   "DrawTexxOES\0"
   "DrawTexxvOES\0"
   "DrawTransformFeedback\0"
   "DrawTransformFeedbackInstanced\0"
   "DrawTransformFeedbackStream\0"
   "DrawTransformFeedbackStreamInstanced\0"
   "EGLImageTargetRenderbufferStorageOES\0"
   "EGLImageTargetTexture2DOES\0"
   "EdgeFlag\0"
   "EdgeFlagPointer\0"
   "EdgeFlagPointerEXT\0"
   "EdgeFlagv\0"
   "Enable\0"
   "EnableClientState\0"
   "EnableIndexedEXT\0"
   "EnableVertexAttribArray\0"
   "EnableVertexAttribArrayARB\0"
   "Enablei\0"
   "End\0"
   "EndConditionalRender\0"
   "EndConditionalRenderNV\0"
   "EndFragmentShaderATI\0"
   "EndList\0"
   "EndQuery\0"
   "EndQueryARB\0"
   "EndQueryIndexed\0"
   "EndTransformFeedback\0"
   "EndTransformFeedbackEXT\0"
   "EvalCoord1d\0"
   "EvalCoord1dv\0"
   "EvalCoord1f\0"
   "EvalCoord1fv\0"
   "EvalCoord2d\0"
   "EvalCoord2dv\0"
   "EvalCoord2f\0"
   "EvalCoord2fv\0"
   "EvalMesh1\0"
   "EvalMesh2\0"
   "EvalPoint1\0"
   "EvalPoint2\0"
   "ExecuteProgramNV\0"
   "FeedbackBuffer\0"
   "FenceSync\0"
   "Finish\0"
   "Flush\0"
   "FlushMappedBufferRange\0"
   "FlushMappedBufferRangeAPPLE\0"
   "FlushMappedBufferRangeEXT\0"
   "FogCoordPointer\0"
   "FogCoordPointerEXT\0"
   "FogCoordd\0"
   "FogCoorddEXT\0"
   "FogCoorddv\0"
   "FogCoorddvEXT\0"
   "FogCoordf\0"
   "FogCoordfEXT\0"
   "FogCoordfv\0"
   "FogCoordfvEXT\0"
   "Fogf\0"
   "Fogfv\0"
   "Fogi\0"
   "Fogiv\0"
   "Fogx\0"
   "FogxOES\0"
   "Fogxv\0"
   "FogxvOES\0"
   "FramebufferRenderbuffer\0"
   "FramebufferRenderbufferEXT\0"
   "FramebufferRenderbufferOES\0"
   "FramebufferTexture\0"
   "FramebufferTexture1D\0"
   "FramebufferTexture1DEXT\0"
   "FramebufferTexture2D\0"
   "FramebufferTexture2DEXT\0"
   "FramebufferTexture2DOES\0"
   "FramebufferTexture3D\0"
   "FramebufferTexture3DEXT\0"
   "FramebufferTexture3DOES\0"
   "FramebufferTextureARB\0"
   "FramebufferTextureFaceARB\0"
   "FramebufferTextureLayer\0"
   "FramebufferTextureLayerARB\0"
   "FramebufferTextureLayerEXT\0"
   "FrontFace\0"
   "Frustum\0"
   "Frustumf\0"
   "FrustumfOES\0"
   "Frustumx\0"
   "FrustumxOES\0"
   "GenBuffers\0"
   "GenBuffersARB\0"
   "GenFragmentShadersATI\0"
   "GenFramebuffers\0"
   "GenFramebuffersEXT\0"
   "GenFramebuffersOES\0"
   "GenLists\0"
   "GenProgramsARB\0"
   "GenProgramsNV\0"
   "GenQueries\0"
   "GenQueriesARB\0"
   "GenRenderbuffers\0"
   "GenRenderbuffersEXT\0"
   "GenRenderbuffersOES\0"
   "GenSamplers\0"
   "GenTextures\0"
   "GenTexturesEXT\0"
   "GenTransformFeedbacks\0"
   "GenVertexArrays\0"
   "GenVertexArraysAPPLE\0"
   "GenVertexArraysOES\0"
   "GenerateMipmap\0"
   "GenerateMipmapEXT\0"
   "GenerateMipmapOES\0"
   "GetActiveAttrib\0"
   "GetActiveAttribARB\0"
   "GetActiveUniform\0"
   "GetActiveUniformARB\0"
   "GetActiveUniformBlockName\0"
   "GetActiveUniformBlockiv\0"
   "GetActiveUniformName\0"
   "GetActiveUniformsiv\0"
   "GetAttachedObjectsARB\0"
   "GetAttachedShaders\0"
   "GetAttribLocation\0"
   "GetAttribLocationARB\0"
   "GetBooleanIndexedvEXT\0"
   "GetBooleani_v\0"
   "GetBooleanv\0"
   "GetBufferParameteri64v\0"
   "GetBufferParameteriv\0"
   "GetBufferParameterivARB\0"
   "GetBufferPointerv\0"
   "GetBufferPointervARB\0"
   "GetBufferPointervOES\0"
   "GetBufferSubData\0"
   "GetBufferSubDataARB\0"
   "GetClipPlane\0"
   "GetClipPlanef\0"
   "GetClipPlanefOES\0"
   "GetClipPlanex\0"
   "GetClipPlanexOES\0"
   "GetColorTable\0"
   "GetColorTableEXT\0"
   "GetColorTableParameterfv\0"
   "GetColorTableParameterfvEXT\0"
   "GetColorTableParameterfvSGI\0"
   "GetColorTableParameteriv\0"
   "GetColorTableParameterivEXT\0"
   "GetColorTableParameterivSGI\0"
   "GetColorTableSGI\0"
   "GetCompressedTexImage\0"
   "GetCompressedTexImageARB\0"
   "GetConvolutionFilter\0"
   "GetConvolutionFilterEXT\0"
   "GetConvolutionParameterfv\0"
   "GetConvolutionParameterfvEXT\0"
   "GetConvolutionParameteriv\0"
   "GetConvolutionParameterivEXT\0"
   "GetDebugMessageLogARB\0"
   "GetDoublev\0"
   "GetError\0"
   "GetFixedv\0"
   "GetFixedvOES\0"
   "GetFloatv\0"
   "GetFragDataIndex\0"
   "GetFragDataLocation\0"
   "GetFragDataLocationEXT\0"
   "GetFramebufferAttachmentParameteriv\0"
   "GetFramebufferAttachmentParameterivEXT\0"
   "GetFramebufferAttachmentParameterivOES\0"
   "GetGraphicsResetStatusARB\0"
   "GetHandleARB\0"
   "GetHistogram\0"
   "GetHistogramEXT\0"
   "GetHistogramParameterfv\0"
   "GetHistogramParameterfvEXT\0"
   "GetHistogramParameteriv\0"
   "GetHistogramParameterivEXT\0"
   "GetInfoLogARB\0"
   "GetInteger64i_v\0"
   "GetInteger64v\0"
   "GetIntegerIndexedvEXT\0"
   "GetIntegeri_v\0"
   "GetIntegerv\0"
   "GetInternalformativ\0"
   "GetLightfv\0"
   "GetLightiv\0"
   "GetLightxv\0"
   "GetLightxvOES\0"
   "GetMapdv\0"
   "GetMapfv\0"
   "GetMapiv\0"
   "GetMaterialfv\0"
   "GetMaterialiv\0"
   "GetMaterialxv\0"
   "GetMaterialxvOES\0"
   "GetMinmax\0"
   "GetMinmaxEXT\0"
   "GetMinmaxParameterfv\0"
   "GetMinmaxParameterfvEXT\0"
   "GetMinmaxParameteriv\0"
   "GetMinmaxParameterivEXT\0"
   "GetMultisamplefv\0"
   "GetObjectParameterfvARB\0"
   "GetObjectParameterivAPPLE\0"
   "GetObjectParameterivARB\0"
   "GetPixelMapfv\0"
   "GetPixelMapuiv\0"
   "GetPixelMapusv\0"
   "GetPointerv\0"
   "GetPointervEXT\0"
   "GetPolygonStipple\0"
   "GetProgramBinary\0"
   "GetProgramBinaryOES\0"
   "GetProgramEnvParameterdvARB\0"
   "GetProgramEnvParameterfvARB\0"
   "GetProgramInfoLog\0"
   "GetProgramLocalParameterdvARB\0"
   "GetProgramLocalParameterfvARB\0"
   "GetProgramNamedParameterdvNV\0"
   "GetProgramNamedParameterfvNV\0"
   "GetProgramParameterdvNV\0"
   "GetProgramParameterfvNV\0"
   "GetProgramStringARB\0"
   "GetProgramStringNV\0"
   "GetProgramiv\0"
   "GetProgramivARB\0"
   "GetProgramivNV\0"
   "GetQueryIndexediv\0"
   "GetQueryObjecti64v\0"
   "GetQueryObjecti64vEXT\0"
   "GetQueryObjectiv\0"
   "GetQueryObjectivARB\0"
   "GetQueryObjectui64v\0"
   "GetQueryObjectui64vEXT\0"
   "GetQueryObjectuiv\0"
   "GetQueryObjectuivARB\0"
   "GetQueryiv\0"
   "GetQueryivARB\0"
   "GetRenderbufferParameteriv\0"
   "GetRenderbufferParameterivEXT\0"
   "GetRenderbufferParameterivOES\0"
   "GetSamplerParameterIiv\0"
   "GetSamplerParameterIuiv\0"
   "GetSamplerParameterfv\0"
   "GetSamplerParameteriv\0"
   "GetSeparableFilter\0"
   "GetSeparableFilterEXT\0"
   "GetShaderInfoLog\0"
   "GetShaderPrecisionFormat\0"
   "GetShaderSource\0"
   "GetShaderSourceARB\0"
   "GetShaderiv\0"
   "GetString\0"
   "GetStringi\0"
   "GetSynciv\0"
   "GetTexBumpParameterfvATI\0"
   "GetTexBumpParameterivATI\0"
   "GetTexEnvfv\0"
   "GetTexEnviv\0"
   "GetTexEnvxv\0"
   "GetTexEnvxvOES\0"
   "GetTexGendv\0"
   "GetTexGenfv\0"
   "GetTexGenfvOES\0"
   "GetTexGeniv\0"
   "GetTexGenivOES\0"
   "GetTexGenxvOES\0"
   "GetTexImage\0"
   "GetTexLevelParameterfv\0"
   "GetTexLevelParameteriv\0"
   "GetTexParameterIiv\0"
   "GetTexParameterIivEXT\0"
   "GetTexParameterIuiv\0"
   "GetTexParameterIuivEXT\0"
   "GetTexParameterfv\0"
   "GetTexParameteriv\0"
   "GetTexParameterxv\0"
   "GetTexParameterxvOES\0"
   "GetTrackMatrixivNV\0"
   "GetTransformFeedbackVarying\0"
   "GetTransformFeedbackVaryingEXT\0"
   "GetUniformBlockIndex\0"
   "GetUniformIndices\0"
   "GetUniformLocation\0"
   "GetUniformLocationARB\0"
   "GetUniformfv\0"
   "GetUniformfvARB\0"
   "GetUniformiv\0"
   "GetUniformivARB\0"
   "GetUniformuiv\0"
   "GetUniformuivEXT\0"
   "GetVertexAttribIiv\0"
   "GetVertexAttribIivEXT\0"
   "GetVertexAttribIuiv\0"
   "GetVertexAttribIuivEXT\0"
   "GetVertexAttribPointerv\0"
   "GetVertexAttribPointervARB\0"
   "GetVertexAttribPointervNV\0"
   "GetVertexAttribdv\0"
   "GetVertexAttribdvARB\0"
   "GetVertexAttribdvNV\0"
   "GetVertexAttribfv\0"
   "GetVertexAttribfvARB\0"
   "GetVertexAttribfvNV\0"
   "GetVertexAttribiv\0"
   "GetVertexAttribivARB\0"
   "GetVertexAttribivNV\0"
   "GetnColorTableARB\0"
   "GetnCompressedTexImageARB\0"
   "GetnConvolutionFilterARB\0"
   "GetnHistogramARB\0"
   "GetnMapdvARB\0"
   "GetnMapfvARB\0"
   "GetnMapivARB\0"
   "GetnMinmaxARB\0"
   "GetnPixelMapfvARB\0"
   "GetnPixelMapuivARB\0"
   "GetnPixelMapusvARB\0"
   "GetnPolygonStippleARB\0"
   "GetnSeparableFilterARB\0"
   "GetnTexImageARB\0"
   "GetnUniformdvARB\0"
   "GetnUniformfvARB\0"
   "GetnUniformivARB\0"
   "GetnUniformuivARB\0"
   "Hint\0"
   "Histogram\0"
   "HistogramEXT\0"
   "IndexMask\0"
   "IndexPointer\0"
   "IndexPointerEXT\0"
   "Indexd\0"
   "Indexdv\0"
   "Indexf\0"
   "Indexfv\0"
   "Indexi\0"
   "Indexiv\0"
   "Indexs\0"
   "Indexsv\0"
   "Indexub\0"
   "Indexubv\0"
   "InitNames\0"
   "InterleavedArrays\0"
   "InvalidateBufferData\0"
   "InvalidateBufferSubData\0"
   "InvalidateFramebuffer\0"
   "InvalidateSubFramebuffer\0"
   "InvalidateTexImage\0"
   "InvalidateTexSubImage\0"
   "IsBuffer\0"
   "IsBufferARB\0"
   "IsEnabled\0"
   "IsEnabledIndexedEXT\0"
   "IsEnabledi\0"
   "IsFramebuffer\0"
   "IsFramebufferEXT\0"
   "IsFramebufferOES\0"
   "IsList\0"
   "IsProgram\0"
   "IsProgramARB\0"
   "IsProgramNV\0"
   "IsQuery\0"
   "IsQueryARB\0"
   "IsRenderbuffer\0"
   "IsRenderbufferEXT\0"
   "IsRenderbufferOES\0"
   "IsSampler\0"
   "IsShader\0"
   "IsSync\0"
   "IsTexture\0"
   "IsTextureEXT\0"
   "IsTransformFeedback\0"
   "IsVertexArray\0"
   "IsVertexArrayAPPLE\0"
   "IsVertexArrayOES\0"
   "LightModelf\0"
   "LightModelfv\0"
   "LightModeli\0"
   "LightModeliv\0"
   "LightModelx\0"
   "LightModelxOES\0"
   "LightModelxv\0"
   "LightModelxvOES\0"
   "Lightf\0"
   "Lightfv\0"
   "Lighti\0"
   "Lightiv\0"
   "Lightx\0"
   "LightxOES\0"
   "Lightxv\0"
   "LightxvOES\0"
   "LineStipple\0"
   "LineWidth\0"
   "LineWidthx\0"
   "LineWidthxOES\0"
   "LinkProgram\0"
   "LinkProgramARB\0"
   "ListBase\0"
   "LoadIdentity\0"
   "LoadMatrixd\0"
   "LoadMatrixf\0"
   "LoadMatrixx\0"
   "LoadMatrixxOES\0"
   "LoadName\0"
   "LoadProgramNV\0"
   "LoadTransposeMatrixd\0"
   "LoadTransposeMatrixdARB\0"
   "LoadTransposeMatrixf\0"
   "LoadTransposeMatrixfARB\0"
   "LockArraysEXT\0"
   "LogicOp\0"
   "Map1d\0"
   "Map1f\0"
   "Map2d\0"
   "Map2f\0"
   "MapBuffer\0"
   "MapBufferARB\0"
   "MapBufferOES\0"
   "MapBufferRange\0"
   "MapBufferRangeEXT\0"
   "MapGrid1d\0"
   "MapGrid1f\0"
   "MapGrid2d\0"
   "MapGrid2f\0"
   "Materialf\0"
   "Materialfv\0"
   "Materiali\0"
   "Materialiv\0"
   "Materialx\0"
   "MaterialxOES\0"
   "Materialxv\0"
   "MaterialxvOES\0"
   "MatrixMode\0"
   "Minmax\0"
   "MinmaxEXT\0"
   "MultMatrixd\0"
   "MultMatrixf\0"
   "MultMatrixx\0"
   "MultMatrixxOES\0"
   "MultTransposeMatrixd\0"
   "MultTransposeMatrixdARB\0"
   "MultTransposeMatrixf\0"
   "MultTransposeMatrixfARB\0"
   "MultiDrawArrays\0"
   "MultiDrawArraysEXT\0"
   "MultiDrawElements\0"
   "MultiDrawElementsBaseVertex\0"
   "MultiDrawElementsEXT\0"
   "MultiModeDrawArraysIBM\0"
   "MultiModeDrawElementsIBM\0"
   "MultiTexCoord1d\0"
   "MultiTexCoord1dARB\0"
   "MultiTexCoord1dv\0"
   "MultiTexCoord1dvARB\0"
   "MultiTexCoord1f\0"
   "MultiTexCoord1fARB\0"
   "MultiTexCoord1fv\0"
   "MultiTexCoord1fvARB\0"
   "MultiTexCoord1i\0"
   "MultiTexCoord1iARB\0"
   "MultiTexCoord1iv\0"
   "MultiTexCoord1ivARB\0"
   "MultiTexCoord1s\0"
   "MultiTexCoord1sARB\0"
   "MultiTexCoord1sv\0"
   "MultiTexCoord1svARB\0"
   "MultiTexCoord2d\0"
   "MultiTexCoord2dARB\0"
   "MultiTexCoord2dv\0"
   "MultiTexCoord2dvARB\0"
   "MultiTexCoord2f\0"
   "MultiTexCoord2fARB\0"
   "MultiTexCoord2fv\0"
   "MultiTexCoord2fvARB\0"
   "MultiTexCoord2i\0"
   "MultiTexCoord2iARB\0"
   "MultiTexCoord2iv\0"
   "MultiTexCoord2ivARB\0"
   "MultiTexCoord2s\0"
   "MultiTexCoord2sARB\0"
   "MultiTexCoord2sv\0"
   "MultiTexCoord2svARB\0"
   "MultiTexCoord3d\0"
   "MultiTexCoord3dARB\0"
   "MultiTexCoord3dv\0"
   "MultiTexCoord3dvARB\0"
   "MultiTexCoord3f\0"
   "MultiTexCoord3fARB\0"
   "MultiTexCoord3fv\0"
   "MultiTexCoord3fvARB\0"
   "MultiTexCoord3i\0"
   "MultiTexCoord3iARB\0"
   "MultiTexCoord3iv\0"
   "MultiTexCoord3ivARB\0"
   "MultiTexCoord3s\0"
   "MultiTexCoord3sARB\0"
   "MultiTexCoord3sv\0"
   "MultiTexCoord3svARB\0"
   "MultiTexCoord4d\0"
   "MultiTexCoord4dARB\0"
   "MultiTexCoord4dv\0"
   "MultiTexCoord4dvARB\0"
   "MultiTexCoord4f\0"
   "MultiTexCoord4fARB\0"
   "MultiTexCoord4fv\0"
   "MultiTexCoord4fvARB\0"
   "MultiTexCoord4i\0"
   "MultiTexCoord4iARB\0"
   "MultiTexCoord4iv\0"
   "MultiTexCoord4ivARB\0"
   "MultiTexCoord4s\0"
   "MultiTexCoord4sARB\0"
   "MultiTexCoord4sv\0"
   "MultiTexCoord4svARB\0"
   "MultiTexCoord4x\0"
   "MultiTexCoord4xOES\0"
   "MultiTexCoordP1ui\0"
   "MultiTexCoordP1uiv\0"
   "MultiTexCoordP2ui\0"
   "MultiTexCoordP2uiv\0"
   "MultiTexCoordP3ui\0"
   "MultiTexCoordP3uiv\0"
   "MultiTexCoordP4ui\0"
   "MultiTexCoordP4uiv\0"
   "NewList\0"
   "Normal3b\0"
   "Normal3bv\0"
   "Normal3d\0"
   "Normal3dv\0"
   "Normal3f\0"
   "Normal3fv\0"
   "Normal3i\0"
   "Normal3iv\0"
   "Normal3s\0"
   "Normal3sv\0"
   "Normal3x\0"
   "Normal3xOES\0"
   "NormalP3ui\0"
   "NormalP3uiv\0"
   "NormalPointer\0"
   "NormalPointerEXT\0"
   "ObjectPurgeableAPPLE\0"
   "ObjectUnpurgeableAPPLE\0"
   "Ortho\0"
   "Orthof\0"
   "OrthofOES\0"
   "Orthox\0"
   "OrthoxOES\0"
   "PassTexCoordATI\0"
   "PassThrough\0"
   "PauseTransformFeedback\0"
   "PixelMapfv\0"
   "PixelMapuiv\0"
   "PixelMapusv\0"
   "PixelStoref\0"
   "PixelStorei\0"
   "PixelTransferf\0"
   "PixelTransferi\0"
   "PixelZoom\0"
   "PointParameterf\0"
   "PointParameterfARB\0"
   "PointParameterfEXT\0"
   "PointParameterfSGIS\0"
   "PointParameterfv\0"
   "PointParameterfvARB\0"
   "PointParameterfvEXT\0"
   "PointParameterfvSGIS\0"
   "PointParameteri\0"
   "PointParameteriNV\0"
   "PointParameteriv\0"
   "PointParameterivNV\0"
   "PointParameterx\0"
   "PointParameterxOES\0"
   "PointParameterxv\0"
   "PointParameterxvOES\0"
   "PointSize\0"
   "PointSizePointerOES\0"
   "PointSizex\0"
   "PointSizexOES\0"
   "PolygonMode\0"
   "PolygonOffset\0"
   "PolygonOffsetEXT\0"
   "PolygonOffsetx\0"
   "PolygonOffsetxOES\0"
   "PolygonStipple\0"
   "PopAttrib\0"
   "PopClientAttrib\0"
   "PopMatrix\0"
   "PopName\0"
   "PrimitiveRestartIndex\0"
   "PrimitiveRestartIndexNV\0"
   "PrimitiveRestartNV\0"
   "PrioritizeTextures\0"
   "PrioritizeTexturesEXT\0"
   "ProgramBinary\0"
   "ProgramBinaryOES\0"
   "ProgramEnvParameter4dARB\0"
   "ProgramEnvParameter4dvARB\0"
   "ProgramEnvParameter4fARB\0"
   "ProgramEnvParameter4fvARB\0"
   "ProgramEnvParameters4fvEXT\0"
   "ProgramLocalParameter4dARB\0"
   "ProgramLocalParameter4dvARB\0"
   "ProgramLocalParameter4fARB\0"
   "ProgramLocalParameter4fvARB\0"
   "ProgramLocalParameters4fvEXT\0"
   "ProgramNamedParameter4dNV\0"
   "ProgramNamedParameter4dvNV\0"
   "ProgramNamedParameter4fNV\0"
   "ProgramNamedParameter4fvNV\0"
   "ProgramParameter4dNV\0"
   "ProgramParameter4dvNV\0"
   "ProgramParameter4fNV\0"
   "ProgramParameter4fvNV\0"
   "ProgramParameteri\0"
   "ProgramParameteriARB\0"
   "ProgramParameters4dvNV\0"
   "ProgramParameters4fvNV\0"
   "ProgramStringARB\0"
   "ProvokingVertex\0"
   "ProvokingVertexEXT\0"
   "PushAttrib\0"
   "PushClientAttrib\0"
   "PushMatrix\0"
   "PushName\0"
   "QueryCounter\0"
   "QueryMatrixxOES\0"
   "RasterPos2d\0"
   "RasterPos2dv\0"
   "RasterPos2f\0"
   "RasterPos2fv\0"
   "RasterPos2i\0"
   "RasterPos2iv\0"
   "RasterPos2s\0"
   "RasterPos2sv\0"
   "RasterPos3d\0"
   "RasterPos3dv\0"
   "RasterPos3f\0"
   "RasterPos3fv\0"
   "RasterPos3i\0"
   "RasterPos3iv\0"
   "RasterPos3s\0"
   "RasterPos3sv\0"
   "RasterPos4d\0"
   "RasterPos4dv\0"
   "RasterPos4f\0"
   "RasterPos4fv\0"
   "RasterPos4i\0"
   "RasterPos4iv\0"
   "RasterPos4s\0"
   "RasterPos4sv\0"
   "ReadBuffer\0"
   "ReadBufferNV\0"
   "ReadPixels\0"
   "ReadnPixelsARB\0"
   "Rectd\0"
   "Rectdv\0"
   "Rectf\0"
   "Rectfv\0"
   "Recti\0"
   "Rectiv\0"
   "Rects\0"
   "Rectsv\0"
   "ReleaseShaderCompiler\0"
   "RenderMode\0"
   "RenderbufferStorage\0"
   "RenderbufferStorageEXT\0"
   "RenderbufferStorageMultisample\0"
   "RenderbufferStorageMultisampleEXT\0"
   "RenderbufferStorageOES\0"
   "RequestResidentProgramsNV\0"
   "ResetHistogram\0"
   "ResetHistogramEXT\0"
   "ResetMinmax\0"
   "ResetMinmaxEXT\0"
   "ResizeBuffersMESA\0"
   "ResumeTransformFeedback\0"
   "Rotated\0"
   "Rotatef\0"
   "Rotatex\0"
   "RotatexOES\0"
   "SampleCoverage\0"
   "SampleCoverageARB\0"
   "SampleCoveragex\0"
   "SampleCoveragexOES\0"
   "SampleMapATI\0"
   "SampleMaskEXT\0"
   "SampleMaskSGIS\0"
   "SampleMaski\0"
   "SamplePatternEXT\0"
   "SamplePatternSGIS\0"
   "SamplerParameterIiv\0"
   "SamplerParameterIuiv\0"
   "SamplerParameterf\0"
   "SamplerParameterfv\0"
   "SamplerParameteri\0"
   "SamplerParameteriv\0"
   "Scaled\0"
   "Scalef\0"
   "Scalex\0"
   "ScalexOES\0"
   "Scissor\0"
   "SecondaryColor3b\0"
   "SecondaryColor3bEXT\0"
   "SecondaryColor3bv\0"
   "SecondaryColor3bvEXT\0"
   "SecondaryColor3d\0"
   "SecondaryColor3dEXT\0"
   "SecondaryColor3dv\0"
   "SecondaryColor3dvEXT\0"
   "SecondaryColor3f\0"
   "SecondaryColor3fEXT\0"
   "SecondaryColor3fv\0"
   "SecondaryColor3fvEXT\0"
   "SecondaryColor3i\0"
   "SecondaryColor3iEXT\0"
   "SecondaryColor3iv\0"
   "SecondaryColor3ivEXT\0"
   "SecondaryColor3s\0"
   "SecondaryColor3sEXT\0"
   "SecondaryColor3sv\0"
   "SecondaryColor3svEXT\0"
   "SecondaryColor3ub\0"
   "SecondaryColor3ubEXT\0"
   "SecondaryColor3ubv\0"
   "SecondaryColor3ubvEXT\0"
   "SecondaryColor3ui\0"
   "SecondaryColor3uiEXT\0"
   "SecondaryColor3uiv\0"
   "SecondaryColor3uivEXT\0"
   "SecondaryColor3us\0"
   "SecondaryColor3usEXT\0"
   "SecondaryColor3usv\0"
   "SecondaryColor3usvEXT\0"
   "SecondaryColorP3ui\0"
   "SecondaryColorP3uiv\0"
   "SecondaryColorPointer\0"
   "SecondaryColorPointerEXT\0"
   "SelectBuffer\0"
   "SeparableFilter2D\0"
   "SeparableFilter2DEXT\0"
   "SetFragmentShaderConstantATI\0"
   "ShadeModel\0"
   "ShaderBinary\0"
   "ShaderSource\0"
   "ShaderSourceARB\0"
   "StencilFunc\0"
   "StencilFuncSeparate\0"
   "StencilFuncSeparateATI\0"
   "StencilMask\0"
   "StencilMaskSeparate\0"
   "StencilOp\0"
   "StencilOpSeparate\0"
   "StencilOpSeparateATI\0"
   "TexBuffer\0"
   "TexBufferARB\0"
   "TexBufferRange\0"
   "TexBumpParameterfvATI\0"
   "TexBumpParameterivATI\0"
   "TexCoord1d\0"
   "TexCoord1dv\0"
   "TexCoord1f\0"
   "TexCoord1fv\0"
   "TexCoord1i\0"
   "TexCoord1iv\0"
   "TexCoord1s\0"
   "TexCoord1sv\0"
   "TexCoord2d\0"
   "TexCoord2dv\0"
   "TexCoord2f\0"
   "TexCoord2fv\0"
   "TexCoord2i\0"
   "TexCoord2iv\0"
   "TexCoord2s\0"
   "TexCoord2sv\0"
   "TexCoord3d\0"
   "TexCoord3dv\0"
   "TexCoord3f\0"
   "TexCoord3fv\0"
   "TexCoord3i\0"
   "TexCoord3iv\0"
   "TexCoord3s\0"
   "TexCoord3sv\0"
   "TexCoord4d\0"
   "TexCoord4dv\0"
   "TexCoord4f\0"
   "TexCoord4fv\0"
   "TexCoord4i\0"
   "TexCoord4iv\0"
   "TexCoord4s\0"
   "TexCoord4sv\0"
   "TexCoordP1ui\0"
   "TexCoordP1uiv\0"
   "TexCoordP2ui\0"
   "TexCoordP2uiv\0"
   "TexCoordP3ui\0"
   "TexCoordP3uiv\0"
   "TexCoordP4ui\0"
   "TexCoordP4uiv\0"
   "TexCoordPointer\0"
   "TexCoordPointerEXT\0"
   "TexEnvf\0"
   "TexEnvfv\0"
   "TexEnvi\0"
   "TexEnviv\0"
   "TexEnvx\0"
   "TexEnvxOES\0"
   "TexEnvxv\0"
   "TexEnvxvOES\0"
   "TexGend\0"
   "TexGendv\0"
   "TexGenf\0"
   "TexGenfOES\0"
   "TexGenfv\0"
   "TexGenfvOES\0"
   "TexGeni\0"
   "TexGeniOES\0"
   "TexGeniv\0"
   "TexGenivOES\0"
   "TexGenxOES\0"
   "TexGenxvOES\0"
   "TexImage1D\0"
   "TexImage2D\0"
   "TexImage2DMultisample\0"
   "TexImage3D\0"
   "TexImage3DEXT\0"
   "TexImage3DMultisample\0"
   "TexImage3DOES\0"
   "TexParameterIiv\0"
   "TexParameterIivEXT\0"
   "TexParameterIuiv\0"
   "TexParameterIuivEXT\0"
   "TexParameterf\0"
   "TexParameterfv\0"
   "TexParameteri\0"
   "TexParameteriv\0"
   "TexParameterx\0"
   "TexParameterxOES\0"
   "TexParameterxv\0"
   "TexParameterxvOES\0"
   "TexStorage1D\0"
   "TexStorage2D\0"
   "TexStorage2DMultisample\0"
   "TexStorage3D\0"
   "TexStorage3DMultisample\0"
   "TexSubImage1D\0"
   "TexSubImage1DEXT\0"
   "TexSubImage2D\0"
   "TexSubImage2DEXT\0"
   "TexSubImage3D\0"
   "TexSubImage3DEXT\0"
   "TexSubImage3DOES\0"
   "TextureBarrierNV\0"
   "TextureStorage1DEXT\0"
   "TextureStorage2DEXT\0"
   "TextureStorage3DEXT\0"
   "TrackMatrixNV\0"
   "TransformFeedbackVaryings\0"
   "TransformFeedbackVaryingsEXT\0"
   "Translated\0"
   "Translatef\0"
   "Translatex\0"
   "TranslatexOES\0"
   "Uniform1f\0"
   "Uniform1fARB\0"
   "Uniform1fv\0"
   "Uniform1fvARB\0"
   "Uniform1i\0"
   "Uniform1iARB\0"
   "Uniform1iv\0"
   "Uniform1ivARB\0"
   "Uniform1ui\0"
   "Uniform1uiEXT\0"
   "Uniform1uiv\0"
   "Uniform1uivEXT\0"
   "Uniform2f\0"
   "Uniform2fARB\0"
   "Uniform2fv\0"
   "Uniform2fvARB\0"
   "Uniform2i\0"
   "Uniform2iARB\0"
   "Uniform2iv\0"
   "Uniform2ivARB\0"
   "Uniform2ui\0"
   "Uniform2uiEXT\0"
   "Uniform2uiv\0"
   "Uniform2uivEXT\0"
   "Uniform3f\0"
   "Uniform3fARB\0"
   "Uniform3fv\0"
   "Uniform3fvARB\0"
   "Uniform3i\0"
   "Uniform3iARB\0"
   "Uniform3iv\0"
   "Uniform3ivARB\0"
   "Uniform3ui\0"
   "Uniform3uiEXT\0"
   "Uniform3uiv\0"
   "Uniform3uivEXT\0"
   "Uniform4f\0"
   "Uniform4fARB\0"
   "Uniform4fv\0"
   "Uniform4fvARB\0"
   "Uniform4i\0"
   "Uniform4iARB\0"
   "Uniform4iv\0"
   "Uniform4ivARB\0"
   "Uniform4ui\0"
   "Uniform4uiEXT\0"
   "Uniform4uiv\0"
   "Uniform4uivEXT\0"
   "UniformBlockBinding\0"
   "UniformMatrix2fv\0"
   "UniformMatrix2fvARB\0"
   "UniformMatrix2x3fv\0"
   "UniformMatrix2x4fv\0"
   "UniformMatrix3fv\0"
   "UniformMatrix3fvARB\0"
   "UniformMatrix3x2fv\0"
   "UniformMatrix3x4fv\0"
   "UniformMatrix4fv\0"
   "UniformMatrix4fvARB\0"
   "UniformMatrix4x2fv\0"
   "UniformMatrix4x3fv\0"
   "UnlockArraysEXT\0"
   "UnmapBuffer\0"
   "UnmapBufferARB\0"
   "UnmapBufferOES\0"
   "UseProgram\0"
   "UseProgramObjectARB\0"
   "UseShaderProgramEXT\0"
   "ValidateProgram\0"
   "ValidateProgramARB\0"
   "Vertex2d\0"
   "Vertex2dv\0"
   "Vertex2f\0"
   "Vertex2fv\0"
   "Vertex2i\0"
   "Vertex2iv\0"
   "Vertex2s\0"
   "Vertex2sv\0"
   "Vertex3d\0"
   "Vertex3dv\0"
   "Vertex3f\0"
   "Vertex3fv\0"
   "Vertex3i\0"
   "Vertex3iv\0"
   "Vertex3s\0"
   "Vertex3sv\0"
   "Vertex4d\0"
   "Vertex4dv\0"
   "Vertex4f\0"
   "Vertex4fv\0"
   "Vertex4i\0"
   "Vertex4iv\0"
   "Vertex4s\0"
   "Vertex4sv\0"
   "VertexAttrib1d\0"
   "VertexAttrib1dARB\0"
   "VertexAttrib1dNV\0"
   "VertexAttrib1dv\0"
   "VertexAttrib1dvARB\0"
   "VertexAttrib1dvNV\0"
   "VertexAttrib1f\0"
   "VertexAttrib1fARB\0"
   "VertexAttrib1fNV\0"
   "VertexAttrib1fv\0"
   "VertexAttrib1fvARB\0"
   "VertexAttrib1fvNV\0"
   "VertexAttrib1s\0"
   "VertexAttrib1sARB\0"
   "VertexAttrib1sNV\0"
   "VertexAttrib1sv\0"
   "VertexAttrib1svARB\0"
   "VertexAttrib1svNV\0"
   "VertexAttrib2d\0"
   "VertexAttrib2dARB\0"
   "VertexAttrib2dNV\0"
   "VertexAttrib2dv\0"
   "VertexAttrib2dvARB\0"
   "VertexAttrib2dvNV\0"
   "VertexAttrib2f\0"
   "VertexAttrib2fARB\0"
   "VertexAttrib2fNV\0"
   "VertexAttrib2fv\0"
   "VertexAttrib2fvARB\0"
   "VertexAttrib2fvNV\0"
   "VertexAttrib2s\0"
   "VertexAttrib2sARB\0"
   "VertexAttrib2sNV\0"
   "VertexAttrib2sv\0"
   "VertexAttrib2svARB\0"
   "VertexAttrib2svNV\0"
   "VertexAttrib3d\0"
   "VertexAttrib3dARB\0"
   "VertexAttrib3dNV\0"
   "VertexAttrib3dv\0"
   "VertexAttrib3dvARB\0"
   "VertexAttrib3dvNV\0"
   "VertexAttrib3f\0"
   "VertexAttrib3fARB\0"
   "VertexAttrib3fNV\0"
   "VertexAttrib3fv\0"
   "VertexAttrib3fvARB\0"
   "VertexAttrib3fvNV\0"
   "VertexAttrib3s\0"
   "VertexAttrib3sARB\0"
   "VertexAttrib3sNV\0"
   "VertexAttrib3sv\0"
   "VertexAttrib3svARB\0"
   "VertexAttrib3svNV\0"
   "VertexAttrib4Nbv\0"
   "VertexAttrib4NbvARB\0"
   "VertexAttrib4Niv\0"
   "VertexAttrib4NivARB\0"
   "VertexAttrib4Nsv\0"
   "VertexAttrib4NsvARB\0"
   "VertexAttrib4Nub\0"
   "VertexAttrib4NubARB\0"
   "VertexAttrib4Nubv\0"
   "VertexAttrib4NubvARB\0"
   "VertexAttrib4Nuiv\0"
   "VertexAttrib4NuivARB\0"
   "VertexAttrib4Nusv\0"
   "VertexAttrib4NusvARB\0"
   "VertexAttrib4bv\0"
   "VertexAttrib4bvARB\0"
   "VertexAttrib4d\0"
   "VertexAttrib4dARB\0"
   "VertexAttrib4dNV\0"
   "VertexAttrib4dv\0"
   "VertexAttrib4dvARB\0"
   "VertexAttrib4dvNV\0"
   "VertexAttrib4f\0"
   "VertexAttrib4fARB\0"
   "VertexAttrib4fNV\0"
   "VertexAttrib4fv\0"
   "VertexAttrib4fvARB\0"
   "VertexAttrib4fvNV\0"
   "VertexAttrib4iv\0"
   "VertexAttrib4ivARB\0"
   "VertexAttrib4s\0"
   "VertexAttrib4sARB\0"
   "VertexAttrib4sNV\0"
   "VertexAttrib4sv\0"
   "VertexAttrib4svARB\0"
   "VertexAttrib4svNV\0"
   "VertexAttrib4ubNV\0"
   "VertexAttrib4ubv\0"
   "VertexAttrib4ubvARB\0"
   "VertexAttrib4ubvNV\0"
   "VertexAttrib4uiv\0"
   "VertexAttrib4uivARB\0"
   "VertexAttrib4usv\0"
   "VertexAttrib4usvARB\0"
   "VertexAttribDivisor\0"
   "VertexAttribDivisorARB\0"
   "VertexAttribI1i\0"
   "VertexAttribI1iEXT\0"
   "VertexAttribI1iv\0"
   "VertexAttribI1ivEXT\0"
   "VertexAttribI1ui\0"
   "VertexAttribI1uiEXT\0"
   "VertexAttribI1uiv\0"
   "VertexAttribI1uivEXT\0"
   "VertexAttribI2i\0"
   "VertexAttribI2iEXT\0"
   "VertexAttribI2iv\0"
   "VertexAttribI2ivEXT\0"
   "VertexAttribI2ui\0"
   "VertexAttribI2uiEXT\0"
   "VertexAttribI2uiv\0"
   "VertexAttribI2uivEXT\0"
   "VertexAttribI3i\0"
   "VertexAttribI3iEXT\0"
   "VertexAttribI3iv\0"
   "VertexAttribI3ivEXT\0"
   "VertexAttribI3ui\0"
   "VertexAttribI3uiEXT\0"
   "VertexAttribI3uiv\0"
   "VertexAttribI3uivEXT\0"
   "VertexAttribI4bv\0"
   "VertexAttribI4bvEXT\0"
   "VertexAttribI4i\0"
   "VertexAttribI4iEXT\0"
   "VertexAttribI4iv\0"
   "VertexAttribI4ivEXT\0"
   "VertexAttribI4sv\0"
   "VertexAttribI4svEXT\0"
   "VertexAttribI4ubv\0"
   "VertexAttribI4ubvEXT\0"
   "VertexAttribI4ui\0"
   "VertexAttribI4uiEXT\0"
   "VertexAttribI4uiv\0"
   "VertexAttribI4uivEXT\0"
   "VertexAttribI4usv\0"
   "VertexAttribI4usvEXT\0"
   "VertexAttribIPointer\0"
   "VertexAttribIPointerEXT\0"
   "VertexAttribP1ui\0"
   "VertexAttribP1uiv\0"
   "VertexAttribP2ui\0"
   "VertexAttribP2uiv\0"
   "VertexAttribP3ui\0"
   "VertexAttribP3uiv\0"
   "VertexAttribP4ui\0"
   "VertexAttribP4uiv\0"
   "VertexAttribPointer\0"
   "VertexAttribPointerARB\0"
   "VertexAttribPointerNV\0"
   "VertexAttribs1dvNV\0"
   "VertexAttribs1fvNV\0"
   "VertexAttribs1svNV\0"
   "VertexAttribs2dvNV\0"
   "VertexAttribs2fvNV\0"
   "VertexAttribs2svNV\0"
   "VertexAttribs3dvNV\0"
   "VertexAttribs3fvNV\0"
   "VertexAttribs3svNV\0"
   "VertexAttribs4dvNV\0"
   "VertexAttribs4fvNV\0"
   "VertexAttribs4svNV\0"
   "VertexAttribs4ubvNV\0"
   "VertexP2ui\0"
   "VertexP2uiv\0"
   "VertexP3ui\0"
   "VertexP3uiv\0"
   "VertexP4ui\0"
   "VertexP4uiv\0"
   "VertexPointer\0"
   "VertexPointerEXT\0"
   "Viewport\0"
   "WaitSync\0"
   "WindowPos2d\0"
   "WindowPos2dARB\0"
   "WindowPos2dMESA\0"
   "WindowPos2dv\0"
   "WindowPos2dvARB\0"
   "WindowPos2dvMESA\0"
   "WindowPos2f\0"
   "WindowPos2fARB\0"
   "WindowPos2fMESA\0"
   "WindowPos2fv\0"
   "WindowPos2fvARB\0"
   "WindowPos2fvMESA\0"
   "WindowPos2i\0"
   "WindowPos2iARB\0"
   "WindowPos2iMESA\0"
   "WindowPos2iv\0"
   "WindowPos2ivARB\0"
   "WindowPos2ivMESA\0"
   "WindowPos2s\0"
   "WindowPos2sARB\0"
   "WindowPos2sMESA\0"
   "WindowPos2sv\0"
   "WindowPos2svARB\0"
   "WindowPos2svMESA\0"
   "WindowPos3d\0"
   "WindowPos3dARB\0"
   "WindowPos3dMESA\0"
   "WindowPos3dv\0"
   "WindowPos3dvARB\0"
   "WindowPos3dvMESA\0"
   "WindowPos3f\0"
   "WindowPos3fARB\0"
   "WindowPos3fMESA\0"
   "WindowPos3fv\0"
   "WindowPos3fvARB\0"
   "WindowPos3fvMESA\0"
   "WindowPos3i\0"
   "WindowPos3iARB\0"
   "WindowPos3iMESA\0"
   "WindowPos3iv\0"
   "WindowPos3ivARB\0"
   "WindowPos3ivMESA\0"
   "WindowPos3s\0"
   "WindowPos3sARB\0"
   "WindowPos3sMESA\0"
   "WindowPos3sv\0"
   "WindowPos3svARB\0"
   "WindowPos3svMESA\0"
   "WindowPos4dMESA\0"
   "WindowPos4dvMESA\0"
   "WindowPos4fMESA\0"
   "WindowPos4fvMESA\0"
   "WindowPos4iMESA\0"
   "WindowPos4ivMESA\0"
   "WindowPos4sMESA\0"
   "WindowPos4svMESA";

static const struct mapi_stub public_stubs[] = {
   { (void *) 0, 213, NULL },
   { (void *) 6, 984, NULL },
   { (void *) 23, 946, NULL },
   { (void *) 44, 374, NULL },
   { (void *) 58, 374, NULL },
   { (void *) 75, 932, NULL },
   { (void *) 95, 933, NULL },
   { (void *) 115, 934, NULL },
   { (void *) 135, 240, NULL },
   { (void *) 145, 993, NULL },
   { (void *) 156, 993, NULL },
   { (void *) 170, 873, NULL },
   { (void *) 192, 322, NULL },
   { (void *) 212, 322, NULL },
   { (void *) 235, 306, NULL },
   { (void *) 248, 306, NULL },
   { (void *) 264, 647, NULL },
   { (void *) 280, 479, NULL },
   { (void *) 293, 7, NULL },
   { (void *) 299, 570, NULL },
   { (void *) 322, 570, NULL },
   { (void *) 347, 935, NULL },
   { (void *) 370, 460, NULL },
   { (void *) 381, 460, NULL },
   { (void *) 395, 778, NULL },
   { (void *) 413, 571, NULL },
   { (void *) 436, 571, NULL },
   { (void *) 462, 480, NULL },
   { (void *) 481, 480, NULL },
   { (void *) 503, 461, NULL },
   { (void *) 514, 461, NULL },
   { (void *) 528, 572, NULL },
   { (void *) 543, 572, NULL },
   { (void *) 561, 980, NULL },
   { (void *) 581, 573, NULL },
   { (void *) 597, 573, NULL },
   { (void *) 616, 574, NULL },
   { (void *) 637, 574, NULL },
   { (void *) 661, 714, NULL },
   { (void *) 689, 936, NULL },
   { (void *) 711, 659, NULL },
   { (void *) 727, 960, NULL },
   { (void *) 746, 659, NULL },
   { (void *) 765, 620, NULL },
   { (void *) 780, 620, NULL },
   { (void *) 794, 660, NULL },
   { (void *) 811, 961, NULL },
   { (void *) 831, 660, NULL },
   { (void *) 851, 716, NULL },
   { (void *) 863, 307, NULL },
   { (void *) 875, 307, NULL },
   { (void *) 890, 771, NULL },
   { (void *) 912, 682, NULL },
   { (void *) 928, 947, NULL },
   { (void *) 949, 682, NULL },
   { (void *) 968, 8, NULL },
   { (void *) 975, 336, NULL },
   { (void *) 986, 336, NULL },
   { (void *) 1000, 337, NULL },
   { (void *) 1014, 337, NULL },
   { (void *) 1031, 711, NULL },
   { (void *) 1055, 337, NULL },
   { (void *) 1072, 481, NULL },
   { (void *) 1094, 481, NULL },
   { (void *) 1119, 481, NULL },
   { (void *) 1144, 710, NULL },
   { (void *) 1176, 481, NULL },
   { (void *) 1201, 710, NULL },
   { (void *) 1227, 711, NULL },
   { (void *) 1245, 241, NULL },
   { (void *) 1255, 713, NULL },
   { (void *) 1275, 420, NULL },
   { (void *) 1293, 420, NULL },
   { (void *) 1314, 420, NULL },
   { (void *) 1336, 712, NULL },
   { (void *) 1364, 420, NULL },
   { (void *) 1385, 712, NULL },
   { (void *) 1407, 713, NULL },
   { (void *) 1421, 661, NULL },
   { (void *) 1437, 661, NULL },
   { (void *) 1456, 462, NULL },
   { (void *) 1467, 462, NULL },
   { (void *) 1481, 962, NULL },
   { (void *) 1503, 463, NULL },
   { (void *) 1517, 463, NULL },
   { (void *) 1534, 2, NULL },
   { (void *) 1543, 3, NULL },
   { (void *) 1553, 662, NULL },
   { (void *) 1576, 662, NULL },
   { (void *) 1602, 662, NULL },
   { (void *) 1628, 575, NULL },
   { (void *) 1639, 575, NULL },
   { (void *) 1653, 203, NULL },
   { (void *) 1659, 204, NULL },
   { (void *) 1670, 576, NULL },
   { (void *) 1684, 577, NULL },
   { (void *) 1698, 578, NULL },
   { (void *) 1712, 579, NULL },
   { (void *) 1727, 206, NULL },
   { (void *) 1738, 978, NULL },
   { (void *) 1754, 979, NULL },
   { (void *) 1771, 994, NULL },
   { (void *) 1783, 994, NULL },
   { (void *) 1798, 208, NULL },
   { (void *) 1809, 782, NULL },
   { (void *) 1821, 782, NULL },
   { (void *) 1836, 995, NULL },
   { (void *) 1848, 995, NULL },
   { (void *) 1863, 205, NULL },
   { (void *) 1874, 207, NULL },
   { (void *) 1887, 375, NULL },
   { (void *) 1907, 375, NULL },
   { (void *) 1930, 694, NULL },
   { (void *) 1945, 150, NULL },
   { (void *) 1955, 1024, NULL },
   { (void *) 1966, 1024, NULL },
   { (void *) 1980, 1025, NULL },
   { (void *) 1991, 1025, NULL },
   { (void *) 2005, 9, NULL },
   { (void *) 2013, 10, NULL },
   { (void *) 2022, 11, NULL },
   { (void *) 2030, 12, NULL },
   { (void *) 2039, 13, NULL },
   { (void *) 2047, 14, NULL },
   { (void *) 2056, 15, NULL },
   { (void *) 2064, 16, NULL },
   { (void *) 2073, 17, NULL },
   { (void *) 2081, 18, NULL },
   { (void *) 2090, 19, NULL },
   { (void *) 2099, 20, NULL },
   { (void *) 2109, 21, NULL },
   { (void *) 2118, 22, NULL },
   { (void *) 2128, 23, NULL },
   { (void *) 2137, 24, NULL },
   { (void *) 2147, 25, NULL },
   { (void *) 2155, 26, NULL },
   { (void *) 2164, 27, NULL },
   { (void *) 2172, 28, NULL },
   { (void *) 2181, 29, NULL },
   { (void *) 2189, 30, NULL },
   { (void *) 2198, 31, NULL },
   { (void *) 2206, 32, NULL },
   { (void *) 2215, 33, NULL },
   { (void *) 2223, 34, NULL },
   { (void *) 2232, 35, NULL },
   { (void *) 2241, 36, NULL },
   { (void *) 2251, 37, NULL },
   { (void *) 2260, 38, NULL },
   { (void *) 2270, 39, NULL },
   { (void *) 2279, 40, NULL },
   { (void *) 2289, 996, NULL },
   { (void *) 2297, 996, NULL },
   { (void *) 2308, 937, NULL },
   { (void *) 2328, 938, NULL },
   { (void *) 2348, 939, NULL },
   { (void *) 2368, 210, NULL },
   { (void *) 2378, 580, NULL },
   { (void *) 2398, 580, NULL },
   { (void *) 2409, 151, NULL },
   { (void *) 2423, 733, NULL },
   { (void *) 2433, 734, NULL },
   { (void *) 2444, 735, NULL },
   { (void *) 2454, 736, NULL },
   { (void *) 2465, 308, NULL },
   { (void *) 2478, 848, NULL },
   { (void *) 2494, 346, NULL },
   { (void *) 2508, 346, NULL },
   { (void *) 2525, 339, NULL },
   { (void *) 2536, 339, NULL },
   { (void *) 2550, 340, NULL },
   { (void *) 2572, 340, NULL },
   { (void *) 2597, 341, NULL },
   { (void *) 2619, 341, NULL },
   { (void *) 2644, 339, NULL },
   { (void *) 2658, 482, NULL },
   { (void *) 2672, 482, NULL },
   { (void *) 2689, 408, NULL },
   { (void *) 2710, 408, NULL },
   { (void *) 2734, 409, NULL },
   { (void *) 2755, 409, NULL },
   { (void *) 2779, 410, NULL },
   { (void *) 2800, 410, NULL },
   { (void *) 2824, 410, NULL },
   { (void *) 2848, 411, NULL },
   { (void *) 2872, 411, NULL },
   { (void *) 2899, 412, NULL },
   { (void *) 2923, 412, NULL },
   { (void *) 2950, 413, NULL },
   { (void *) 2974, 413, NULL },
   { (void *) 3001, 413, NULL },
   { (void *) 3028, 348, NULL },
   { (void *) 3048, 348, NULL },
   { (void *) 3071, 349, NULL },
   { (void *) 3091, 349, NULL },
   { (void *) 3114, 350, NULL },
   { (void *) 3136, 350, NULL },
   { (void *) 3161, 351, NULL },
   { (void *) 3184, 351, NULL },
   { (void *) 3210, 352, NULL },
   { (void *) 3232, 352, NULL },
   { (void *) 3257, 353, NULL },
   { (void *) 3280, 353, NULL },
   { (void *) 3306, 693, NULL },
   { (void *) 3324, 347, NULL },
   { (void *) 3342, 347, NULL },
   { (void *) 3363, 342, NULL },
   { (void *) 3378, 342, NULL },
   { (void *) 3396, 354, NULL },
   { (void *) 3420, 354, NULL },
   { (void *) 3447, 355, NULL },
   { (void *) 3471, 355, NULL },
   { (void *) 3498, 255, NULL },
   { (void *) 3509, 323, NULL },
   { (void *) 3524, 323, NULL },
   { (void *) 3542, 324, NULL },
   { (void *) 3557, 324, NULL },
   { (void *) 3575, 325, NULL },
   { (void *) 3593, 325, NULL },
   { (void *) 3614, 326, NULL },
   { (void *) 3632, 326, NULL },
   { (void *) 3653, 373, NULL },
   { (void *) 3671, 373, NULL },
   { (void *) 3692, 373, NULL },
   { (void *) 3713, 483, NULL },
   { (void *) 3727, 648, NULL },
   { (void *) 3750, 484, NULL },
   { (void *) 3763, 649, NULL },
   { (void *) 3785, 985, NULL },
   { (void *) 3808, 152, NULL },
   { (void *) 3817, 790, NULL },
   { (void *) 3841, 791, NULL },
   { (void *) 3864, 792, NULL },
   { (void *) 3886, 464, NULL },
   { (void *) 3900, 464, NULL },
   { (void *) 3917, 940, NULL },
   { (void *) 3941, 663, NULL },
   { (void *) 3960, 663, NULL },
   { (void *) 3982, 663, NULL },
   { (void *) 4004, 4, NULL },
   { (void *) 4016, 650, NULL },
   { (void *) 4032, 485, NULL },
   { (void *) 4046, 621, NULL },
   { (void *) 4064, 621, NULL },
   { (void *) 4081, 465, NULL },
   { (void *) 4095, 465, NULL },
   { (void *) 4112, 664, NULL },
   { (void *) 4132, 664, NULL },
   { (void *) 4155, 664, NULL },
   { (void *) 4178, 717, NULL },
   { (void *) 4193, 486, NULL },
   { (void *) 4206, 695, NULL },
   { (void *) 4217, 327, NULL },
   { (void *) 4232, 327, NULL },
   { (void *) 4250, 772, NULL },
   { (void *) 4275, 683, NULL },
   { (void *) 4294, 683, NULL },
   { (void *) 4318, 683, NULL },
   { (void *) 4340, 959, NULL },
   { (void *) 4355, 245, NULL },
   { (void *) 4365, 211, NULL },
   { (void *) 4375, 288, NULL },
   { (void *) 4386, 783, NULL },
   { (void *) 4398, 783, NULL },
   { (void *) 4413, 997, NULL },
   { (void *) 4425, 997, NULL },
   { (void *) 4440, 651, NULL },
   { (void *) 4456, 487, NULL },
   { (void *) 4469, 214, NULL },
   { (void *) 4477, 309, NULL },
   { (void *) 4496, 581, NULL },
   { (void *) 4514, 488, NULL },
   { (void *) 4539, 488, NULL },
   { (void *) 4567, 581, NULL },
   { (void *) 4576, 854, NULL },
   { (void *) 4598, 310, NULL },
   { (void *) 4609, 310, NULL },
   { (void *) 4623, 657, NULL },
   { (void *) 4643, 657, NULL },
   { (void *) 4666, 814, NULL },
   { (void *) 4698, 657, NULL },
   { (void *) 4721, 202, NULL },
   { (void *) 4732, 489, NULL },
   { (void *) 4744, 489, NULL },
   { (void *) 4759, 489, NULL },
   { (void *) 4774, 489, NULL },
   { (void *) 4788, 311, NULL },
   { (void *) 4801, 701, NULL },
   { (void *) 4824, 658, NULL },
   { (void *) 4846, 658, NULL },
   { (void *) 4871, 815, NULL },
   { (void *) 4905, 702, NULL },
   { (void *) 4937, 816, NULL },
   { (void *) 4981, 658, NULL },
   { (void *) 5006, 257, NULL },
   { (void *) 5017, 338, NULL },
   { (void *) 5035, 703, NULL },
   { (void *) 5063, 338, NULL },
   { (void *) 5084, 836, NULL },
   { (void *) 5096, 837, NULL },
   { (void *) 5109, 838, NULL },
   { (void *) 5121, 839, NULL },
   { (void *) 5134, 840, NULL },
   { (void *) 5146, 841, NULL },
   { (void *) 5159, 842, NULL },
   { (void *) 5171, 843, NULL },
   { (void *) 5184, 773, NULL },
   { (void *) 5206, 817, NULL },
   { (void *) 5237, 779, NULL },
   { (void *) 5265, 818, NULL },
   { (void *) 5302, 991, NULL },
   { (void *) 5339, 992, NULL },
   { (void *) 5366, 41, NULL },
   { (void *) 5375, 312, NULL },
   { (void *) 5391, 849, NULL },
   { (void *) 5410, 42, NULL },
   { (void *) 5420, 215, NULL },
   { (void *) 5427, 313, NULL },
   { (void *) 5445, 582, NULL },
   { (void *) 5462, 490, NULL },
   { (void *) 5486, 490, NULL },
   { (void *) 5513, 582, NULL },
   { (void *) 5521, 43, NULL },
   { (void *) 5525, 583, NULL },
   { (void *) 5546, 583, NULL },
   { (void *) 5569, 941, NULL },
   { (void *) 5590, 1, NULL },
   { (void *) 5598, 466, NULL },
   { (void *) 5607, 466, NULL },
   { (void *) 5619, 780, NULL },
   { (void *) 5635, 584, NULL },
   { (void *) 5656, 584, NULL },
   { (void *) 5680, 228, NULL },
   { (void *) 5692, 229, NULL },
   { (void *) 5705, 230, NULL },
   { (void *) 5717, 231, NULL },
   { (void *) 5730, 232, NULL },
   { (void *) 5742, 233, NULL },
   { (void *) 5755, 234, NULL },
   { (void *) 5767, 235, NULL },
   { (void *) 5780, 236, NULL },
   { (void *) 5790, 238, NULL },
   { (void *) 5800, 237, NULL },
   { (void *) 5811, 239, NULL },
   { (void *) 5822, 874, NULL },
   { (void *) 5839, 194, NULL },
   { (void *) 5854, 696, NULL },
   { (void *) 5864, 216, NULL },
   { (void *) 5871, 217, NULL },
   { (void *) 5877, 680, NULL },
   { (void *) 5900, 963, NULL },
   { (void *) 5928, 680, NULL },
   { (void *) 5954, 421, NULL },
   { (void *) 5970, 421, NULL },
   { (void *) 5989, 422, NULL },
   { (void *) 5999, 422, NULL },
   { (void *) 6012, 423, NULL },
   { (void *) 6023, 423, NULL },
   { (void *) 6037, 860, NULL },
   { (void *) 6047, 860, NULL },
   { (void *) 6060, 861, NULL },
   { (void *) 6071, 861, NULL },
   { (void *) 6085, 153, NULL },
   { (void *) 6090, 154, NULL },
   { (void *) 6096, 155, NULL },
   { (void *) 6101, 156, NULL },
   { (void *) 6107, 998, NULL },
   { (void *) 6112, 998, NULL },
   { (void *) 6120, 999, NULL },
   { (void *) 6126, 999, NULL },
   { (void *) 6135, 665, NULL },
   { (void *) 6159, 665, NULL },
   { (void *) 6186, 665, NULL },
   { (void *) 6213, 616, NULL },
   { (void *) 6232, 666, NULL },
   { (void *) 6253, 666, NULL },
   { (void *) 6277, 667, NULL },
   { (void *) 6298, 667, NULL },
   { (void *) 6322, 667, NULL },
   { (void *) 6346, 668, NULL },
   { (void *) 6367, 668, NULL },
   { (void *) 6391, 668, NULL },
   { (void *) 6415, 616, NULL },
   { (void *) 6437, 679, NULL },
   { (void *) 6463, 669, NULL },
   { (void *) 6487, 669, NULL },
   { (void *) 6514, 669, NULL },
   { (void *) 6541, 157, NULL },
   { (void *) 6551, 289, NULL },
   { (void *) 6559, 1000, NULL },
   { (void *) 6568, 1000, NULL },
   { (void *) 6580, 1001, NULL },
   { (void *) 6589, 1001, NULL },
   { (void *) 6601, 467, NULL },
   { (void *) 6612, 467, NULL },
   { (void *) 6626, 942, NULL },
   { (void *) 6648, 670, NULL },
   { (void *) 6664, 670, NULL },
   { (void *) 6683, 670, NULL },
   { (void *) 6702, 5, NULL },
   { (void *) 6711, 622, NULL },
   { (void *) 6726, 622, NULL },
   { (void *) 6740, 468, NULL },
   { (void *) 6751, 468, NULL },
   { (void *) 6765, 671, NULL },
   { (void *) 6782, 671, NULL },
   { (void *) 6802, 671, NULL },
   { (void *) 6822, 718, NULL },
   { (void *) 6834, 328, NULL },
   { (void *) 6846, 328, NULL },
   { (void *) 6861, 774, NULL },
   { (void *) 6883, 684, NULL },
   { (void *) 6899, 948, NULL },
   { (void *) 6920, 684, NULL },
   { (void *) 6939, 672, NULL },
   { (void *) 6954, 672, NULL },
   { (void *) 6972, 672, NULL },
   { (void *) 6990, 491, NULL },
   { (void *) 7006, 491, NULL },
   { (void *) 7025, 492, NULL },
   { (void *) 7042, 492, NULL },
   { (void *) 7062, 686, NULL },
   { (void *) 7088, 687, NULL },
   { (void *) 7112, 688, NULL },
   { (void *) 7133, 689, NULL },
   { (void *) 7153, 652, NULL },
   { (void *) 7175, 493, NULL },
   { (void *) 7194, 494, NULL },
   { (void *) 7212, 494, NULL },
   { (void *) 7233, 585, NULL },
   { (void *) 7255, 585, NULL },
   { (void *) 7269, 258, NULL },
   { (void *) 7281, 617, NULL },
   { (void *) 7304, 469, NULL },
   { (void *) 7325, 469, NULL },
   { (void *) 7349, 470, NULL },
   { (void *) 7367, 470, NULL },
   { (void *) 7388, 470, NULL },
   { (void *) 7409, 471, NULL },
   { (void *) 7426, 471, NULL },
   { (void *) 7446, 259, NULL },
   { (void *) 7459, 1026, NULL },
   { (void *) 7473, 1026, NULL },
   { (void *) 7490, 1027, NULL },
   { (void *) 7504, 1027, NULL },
   { (void *) 7521, 343, NULL },
   { (void *) 7535, 343, NULL },
   { (void *) 7552, 344, NULL },
   { (void *) 7577, 344, NULL },
   { (void *) 7605, 344, NULL },
   { (void *) 7633, 345, NULL },
   { (void *) 7658, 345, NULL },
   { (void *) 7686, 345, NULL },
   { (void *) 7714, 343, NULL },
   { (void *) 7731, 414, NULL },
   { (void *) 7753, 414, NULL },
   { (void *) 7778, 356, NULL },
   { (void *) 7799, 356, NULL },
   { (void *) 7823, 357, NULL },
   { (void *) 7849, 357, NULL },
   { (void *) 7878, 358, NULL },
   { (void *) 7904, 358, NULL },
   { (void *) 7933, 793, NULL },
   { (void *) 7955, 260, NULL },
   { (void *) 7966, 261, NULL },
   { (void *) 7975, 1028, NULL },
   { (void *) 7985, 1028, NULL },
   { (void *) 7998, 262, NULL },
   { (void *) 8008, 715, NULL },
   { (void *) 8025, 586, NULL },
   { (void *) 8045, 586, NULL },
   { (void *) 8068, 673, NULL },
   { (void *) 8104, 673, NULL },
   { (void *) 8143, 673, NULL },
   { (void *) 8182, 794, NULL },
   { (void *) 8208, 653, NULL },
   { (void *) 8221, 361, NULL },
   { (void *) 8234, 361, NULL },
   { (void *) 8250, 362, NULL },
   { (void *) 8274, 362, NULL },
   { (void *) 8301, 363, NULL },
   { (void *) 8325, 363, NULL },
   { (void *) 8352, 654, NULL },
   { (void *) 8366, 618, NULL },
   { (void *) 8382, 697, NULL },
   { (void *) 8396, 587, NULL },
   { (void *) 8418, 587, NULL },
   { (void *) 8432, 263, NULL },
   { (void *) 8444, 819, NULL },
   { (void *) 8464, 264, NULL },
   { (void *) 8475, 265, NULL },
   { (void *) 8486, 1029, NULL },
   { (void *) 8497, 1029, NULL },
   { (void *) 8511, 266, NULL },
   { (void *) 8520, 267, NULL },
   { (void *) 8529, 268, NULL },
   { (void *) 8538, 269, NULL },
   { (void *) 8552, 270, NULL },
   { (void *) 8566, 1030, NULL },
   { (void *) 8580, 1030, NULL },
   { (void *) 8597, 364, NULL },
   { (void *) 8607, 364, NULL },
   { (void *) 8620, 365, NULL },
   { (void *) 8641, 365, NULL },
   { (void *) 8665, 366, NULL },
   { (void *) 8686, 366, NULL },
   { (void *) 8710, 706, NULL },
   { (void *) 8727, 655, NULL },
   { (void *) 8751, 981, NULL },
   { (void *) 8777, 656, NULL },
   { (void *) 8801, 271, NULL },
   { (void *) 8815, 272, NULL },
   { (void *) 8830, 273, NULL },
   { (void *) 8845, 329, NULL },
   { (void *) 8857, 329, NULL },
   { (void *) 8872, 274, NULL },
   { (void *) 8890, 787, NULL },
   { (void *) 8907, 787, NULL },
   { (void *) 8927, 623, NULL },
   { (void *) 8955, 624, NULL },
   { (void *) 8983, 495, NULL },
   { (void *) 9001, 625, NULL },
   { (void *) 9031, 626, NULL },
   { (void *) 9061, 949, NULL },
   { (void *) 9090, 950, NULL },
   { (void *) 9119, 875, NULL },
   { (void *) 9143, 876, NULL },
   { (void *) 9167, 627, NULL },
   { (void *) 9187, 877, NULL },
   { (void *) 9206, 496, NULL },
   { (void *) 9219, 628, NULL },
   { (void *) 9235, 878, NULL },
   { (void *) 9250, 781, NULL },
   { (void *) 9268, 730, NULL },
   { (void *) 9287, 730, NULL },
   { (void *) 9309, 472, NULL },
   { (void *) 9326, 472, NULL },
   { (void *) 9346, 731, NULL },
   { (void *) 9366, 731, NULL },
   { (void *) 9389, 473, NULL },
   { (void *) 9407, 473, NULL },
   { (void *) 9428, 474, NULL },
   { (void *) 9439, 474, NULL },
   { (void *) 9453, 674, NULL },
   { (void *) 9480, 674, NULL },
   { (void *) 9510, 674, NULL },
   { (void *) 9540, 719, NULL },
   { (void *) 9563, 720, NULL },
   { (void *) 9587, 721, NULL },
   { (void *) 9609, 722, NULL },
   { (void *) 9631, 359, NULL },
   { (void *) 9650, 359, NULL },
   { (void *) 9672, 497, NULL },
   { (void *) 9689, 784, NULL },
   { (void *) 9714, 498, NULL },
   { (void *) 9730, 498, NULL },
   { (void *) 9749, 499, NULL },
   { (void *) 9761, 275, NULL },
   { (void *) 9771, 588, NULL },
   { (void *) 9782, 698, NULL },
   { (void *) 9792, 928, NULL },
   { (void *) 9817, 929, NULL },
   { (void *) 9842, 276, NULL },
   { (void *) 9854, 277, NULL },
   { (void *) 9866, 1031, NULL },
   { (void *) 9878, 1031, NULL },
   { (void *) 9893, 278, NULL },
   { (void *) 9905, 279, NULL },
   { (void *) 9917, 279, NULL },
   { (void *) 9932, 280, NULL },
   { (void *) 9944, 280, NULL },
   { (void *) 9959, 956, NULL },
   { (void *) 9974, 281, NULL },
   { (void *) 9986, 284, NULL },
   { (void *) 10009, 285, NULL },
   { (void *) 10032, 589, NULL },
   { (void *) 10051, 589, NULL },
   { (void *) 10073, 590, NULL },
   { (void *) 10093, 590, NULL },
   { (void *) 10116, 282, NULL },
   { (void *) 10134, 283, NULL },
   { (void *) 10152, 1032, NULL },
   { (void *) 10170, 1032, NULL },
   { (void *) 10191, 879, NULL },
   { (void *) 10210, 591, NULL },
   { (void *) 10238, 591, NULL },
   { (void *) 10269, 690, NULL },
   { (void *) 10290, 691, NULL },
   { (void *) 10308, 500, NULL },
   { (void *) 10327, 500, NULL },
   { (void *) 10349, 501, NULL },
   { (void *) 10362, 501, NULL },
   { (void *) 10378, 502, NULL },
   { (void *) 10391, 502, NULL },
   { (void *) 10407, 592, NULL },
   { (void *) 10421, 592, NULL },
   { (void *) 10438, 593, NULL },
   { (void *) 10457, 593, NULL },
   { (void *) 10479, 594, NULL },
   { (void *) 10499, 594, NULL },
   { (void *) 10522, 503, NULL },
   { (void *) 10546, 503, NULL },
   { (void *) 10573, 503, NULL },
   { (void *) 10599, 504, NULL },
   { (void *) 10617, 504, NULL },
   { (void *) 10638, 880, NULL },
   { (void *) 10658, 505, NULL },
   { (void *) 10676, 505, NULL },
   { (void *) 10697, 881, NULL },
   { (void *) 10717, 506, NULL },
   { (void *) 10735, 506, NULL },
   { (void *) 10756, 882, NULL },
   { (void *) 10776, 795, NULL },
   { (void *) 10794, 796, NULL },
   { (void *) 10820, 797, NULL },
   { (void *) 10845, 798, NULL },
   { (void *) 10862, 799, NULL },
   { (void *) 10875, 800, NULL },
   { (void *) 10888, 801, NULL },
   { (void *) 10901, 802, NULL },
   { (void *) 10915, 803, NULL },
   { (void *) 10933, 804, NULL },
   { (void *) 10952, 805, NULL },
   { (void *) 10971, 806, NULL },
   { (void *) 10993, 807, NULL },
   { (void *) 11016, 808, NULL },
   { (void *) 11032, 809, NULL },
   { (void *) 11049, 810, NULL },
   { (void *) 11066, 811, NULL },
   { (void *) 11083, 812, NULL },
   { (void *) 11101, 158, NULL },
   { (void *) 11106, 367, NULL },
   { (void *) 11116, 367, NULL },
   { (void *) 11129, 212, NULL },
   { (void *) 11139, 314, NULL },
   { (void *) 11152, 850, NULL },
   { (void *) 11168, 44, NULL },
   { (void *) 11175, 45, NULL },
   { (void *) 11183, 46, NULL },
   { (void *) 11190, 47, NULL },
   { (void *) 11198, 48, NULL },
   { (void *) 11205, 49, NULL },
   { (void *) 11213, 50, NULL },
   { (void *) 11220, 51, NULL },
   { (void *) 11228, 315, NULL },
   { (void *) 11236, 316, NULL },
   { (void *) 11245, 197, NULL },
   { (void *) 11255, 317, NULL },
   { (void *) 11273, 829, NULL },
   { (void *) 11294, 830, NULL },
   { (void *) 11318, 831, NULL },
   { (void *) 11340, 832, NULL },
   { (void *) 11365, 833, NULL },
   { (void *) 11384, 834, NULL },
   { (void *) 11406, 475, NULL },
   { (void *) 11415, 475, NULL },
   { (void *) 11427, 286, NULL },
   { (void *) 11437, 595, NULL },
   { (void *) 11457, 595, NULL },
   { (void *) 11468, 675, NULL },
   { (void *) 11482, 675, NULL },
   { (void *) 11499, 675, NULL },
   { (void *) 11516, 287, NULL },
   { (void *) 11523, 507, NULL },
   { (void *) 11533, 629, NULL },
   { (void *) 11546, 629, NULL },
   { (void *) 11558, 476, NULL },
   { (void *) 11566, 476, NULL },
   { (void *) 11577, 676, NULL },
   { (void *) 11592, 676, NULL },
   { (void *) 11610, 676, NULL },
   { (void *) 11628, 723, NULL },
   { (void *) 11638, 508, NULL },
   { (void *) 11647, 699, NULL },
   { (void *) 11654, 330, NULL },
   { (void *) 11664, 330, NULL },
   { (void *) 11677, 775, NULL },
   { (void *) 11697, 685, NULL },
   { (void *) 11711, 685, NULL },
   { (void *) 11730, 685, NULL },
   { (void *) 11747, 163, NULL },
   { (void *) 11759, 164, NULL },
   { (void *) 11772, 165, NULL },
   { (void *) 11784, 166, NULL },
   { (void *) 11797, 1002, NULL },
   { (void *) 11809, 1002, NULL },
   { (void *) 11824, 1003, NULL },
   { (void *) 11837, 1003, NULL },
   { (void *) 11853, 159, NULL },
   { (void *) 11860, 160, NULL },
   { (void *) 11868, 161, NULL },
   { (void *) 11875, 162, NULL },
   { (void *) 11883, 1004, NULL },
   { (void *) 11890, 1004, NULL },
   { (void *) 11900, 1005, NULL },
   { (void *) 11908, 1005, NULL },
   { (void *) 11919, 167, NULL },
   { (void *) 11931, 168, NULL },
   { (void *) 11941, 1006, NULL },
   { (void *) 11952, 1006, NULL },
   { (void *) 11966, 509, NULL },
   { (void *) 11978, 509, NULL },
   { (void *) 11993, 6, NULL },
   { (void *) 12002, 290, NULL },
   { (void *) 12015, 292, NULL },
   { (void *) 12027, 291, NULL },
   { (void *) 12039, 1007, NULL },
   { (void *) 12051, 1007, NULL },
   { (void *) 12066, 198, NULL },
   { (void *) 12075, 883, NULL },
   { (void *) 12089, 415, NULL },
   { (void *) 12110, 415, NULL },
   { (void *) 12134, 416, NULL },
   { (void *) 12155, 416, NULL },
   { (void *) 12179, 855, NULL },
   { (void *) 12193, 242, NULL },
   { (void *) 12201, 220, NULL },
   { (void *) 12207, 221, NULL },
   { (void *) 12213, 222, NULL },
   { (void *) 12219, 223, NULL },
   { (void *) 12225, 477, NULL },
   { (void *) 12235, 477, NULL },
   { (void *) 12248, 477, NULL },
   { (void *) 12261, 681, NULL },
   { (void *) 12276, 681, NULL },
   { (void *) 12294, 224, NULL },
   { (void *) 12304, 225, NULL },
   { (void *) 12314, 226, NULL },
   { (void *) 12324, 227, NULL },
   { (void *) 12334, 169, NULL },
   { (void *) 12344, 170, NULL },
   { (void *) 12355, 171, NULL },
   { (void *) 12365, 172, NULL },
   { (void *) 12376, 1008, NULL },
   { (void *) 12386, 1008, NULL },
   { (void *) 12399, 1009, NULL },
   { (void *) 12410, 1009, NULL },
   { (void *) 12424, 293, NULL },
   { (void *) 12435, 368, NULL },
   { (void *) 12442, 368, NULL },
   { (void *) 12452, 295, NULL },
   { (void *) 12464, 294, NULL },
   { (void *) 12476, 1010, NULL },
   { (void *) 12488, 1010, NULL },
   { (void *) 12503, 417, NULL },
   { (void *) 12524, 417, NULL },
   { (void *) 12548, 418, NULL },
   { (void *) 12569, 418, NULL },
   { (void *) 12593, 424, NULL },
   { (void *) 12609, 424, NULL },
   { (void *) 12628, 859, NULL },
   { (void *) 12646, 704, NULL },
   { (void *) 12674, 859, NULL },
   { (void *) 12695, 871, NULL },
   { (void *) 12718, 872, NULL },
   { (void *) 12743, 376, NULL },
   { (void *) 12759, 376, NULL },
   { (void *) 12778, 377, NULL },
   { (void *) 12795, 377, NULL },
   { (void *) 12815, 378, NULL },
   { (void *) 12831, 378, NULL },
   { (void *) 12850, 379, NULL },
   { (void *) 12867, 379, NULL },
   { (void *) 12887, 380, NULL },
   { (void *) 12903, 380, NULL },
   { (void *) 12922, 381, NULL },
   { (void *) 12939, 381, NULL },
   { (void *) 12959, 382, NULL },
   { (void *) 12975, 382, NULL },
   { (void *) 12994, 383, NULL },
   { (void *) 13011, 383, NULL },
   { (void *) 13031, 384, NULL },
   { (void *) 13047, 384, NULL },
   { (void *) 13066, 385, NULL },
   { (void *) 13083, 385, NULL },
   { (void *) 13103, 386, NULL },
   { (void *) 13119, 386, NULL },
   { (void *) 13138, 387, NULL },
   { (void *) 13155, 387, NULL },
   { (void *) 13175, 388, NULL },
   { (void *) 13191, 388, NULL },
   { (void *) 13210, 389, NULL },
   { (void *) 13227, 389, NULL },
   { (void *) 13247, 390, NULL },
   { (void *) 13263, 390, NULL },
   { (void *) 13282, 391, NULL },
   { (void *) 13299, 391, NULL },
   { (void *) 13319, 392, NULL },
   { (void *) 13335, 392, NULL },
   { (void *) 13354, 393, NULL },
   { (void *) 13371, 393, NULL },
   { (void *) 13391, 394, NULL },
   { (void *) 13407, 394, NULL },
   { (void *) 13426, 395, NULL },
   { (void *) 13443, 395, NULL },
   { (void *) 13463, 396, NULL },
   { (void *) 13479, 396, NULL },
   { (void *) 13498, 397, NULL },
   { (void *) 13515, 397, NULL },
   { (void *) 13535, 398, NULL },
   { (void *) 13551, 398, NULL },
   { (void *) 13570, 399, NULL },
   { (void *) 13587, 399, NULL },
   { (void *) 13607, 400, NULL },
   { (void *) 13623, 400, NULL },
   { (void *) 13642, 401, NULL },
   { (void *) 13659, 401, NULL },
   { (void *) 13679, 402, NULL },
   { (void *) 13695, 402, NULL },
   { (void *) 13714, 403, NULL },
   { (void *) 13731, 403, NULL },
   { (void *) 13751, 404, NULL },
   { (void *) 13767, 404, NULL },
   { (void *) 13786, 405, NULL },
   { (void *) 13803, 405, NULL },
   { (void *) 13823, 406, NULL },
   { (void *) 13839, 406, NULL },
   { (void *) 13858, 407, NULL },
   { (void *) 13875, 407, NULL },
   { (void *) 13895, 1011, NULL },
   { (void *) 13911, 1011, NULL },
   { (void *) 13930, 737, NULL },
   { (void *) 13948, 738, NULL },
   { (void *) 13967, 739, NULL },
   { (void *) 13985, 740, NULL },
   { (void *) 14004, 741, NULL },
   { (void *) 14022, 742, NULL },
   { (void *) 14041, 743, NULL },
   { (void *) 14059, 744, NULL },
   { (void *) 14078, 0, NULL },
   { (void *) 14086, 52, NULL },
   { (void *) 14095, 53, NULL },
   { (void *) 14105, 54, NULL },
   { (void *) 14114, 55, NULL },
   { (void *) 14124, 56, NULL },
   { (void *) 14133, 57, NULL },
   { (void *) 14143, 58, NULL },
   { (void *) 14152, 59, NULL },
   { (void *) 14162, 60, NULL },
   { (void *) 14171, 61, NULL },
   { (void *) 14181, 1012, NULL },
   { (void *) 14190, 1012, NULL },
   { (void *) 14202, 745, NULL },
   { (void *) 14213, 746, NULL },
   { (void *) 14225, 318, NULL },
   { (void *) 14239, 851, NULL },
   { (void *) 14256, 982, NULL },
   { (void *) 14277, 983, NULL },
   { (void *) 14300, 296, NULL },
   { (void *) 14306, 1013, NULL },
   { (void *) 14313, 1013, NULL },
   { (void *) 14323, 1014, NULL },
   { (void *) 14330, 1014, NULL },
   { (void *) 14340, 943, NULL },
   { (void *) 14356, 199, NULL },
   { (void *) 14368, 776, NULL },
   { (void *) 14391, 251, NULL },
   { (void *) 14402, 252, NULL },
   { (void *) 14414, 253, NULL },
   { (void *) 14426, 249, NULL },
   { (void *) 14438, 250, NULL },
   { (void *) 14450, 247, NULL },
   { (void *) 14465, 248, NULL },
   { (void *) 14480, 246, NULL },
   { (void *) 14490, 425, NULL },
   { (void *) 14506, 425, NULL },
   { (void *) 14525, 425, NULL },
   { (void *) 14544, 425, NULL },
   { (void *) 14564, 426, NULL },
   { (void *) 14581, 426, NULL },
   { (void *) 14601, 426, NULL },
   { (void *) 14621, 426, NULL },
   { (void *) 14642, 427, NULL },
   { (void *) 14658, 427, NULL },
   { (void *) 14676, 428, NULL },
   { (void *) 14693, 428, NULL },
   { (void *) 14712, 1033, NULL },
   { (void *) 14728, 1033, NULL },
   { (void *) 14747, 1034, NULL },
   { (void *) 14764, 1034, NULL },
   { (void *) 14784, 173, NULL },
   { (void *) 14794, 844, NULL },
   { (void *) 14814, 1015, NULL },
   { (void *) 14825, 1015, NULL },
   { (void *) 14839, 174, NULL },
   { (void *) 14851, 319, NULL },
   { (void *) 14865, 835, NULL },
   { (void *) 14882, 1016, NULL },
   { (void *) 14897, 1016, NULL },
   { (void *) 14915, 175, NULL },
   { (void *) 14930, 218, NULL },
   { (void *) 14940, 334, NULL },
   { (void *) 14956, 297, NULL },
   { (void *) 14966, 200, NULL },
   { (void *) 14974, 614, NULL },
   { (void *) 14996, 614, NULL },
   { (void *) 15020, 955, NULL },
   { (void *) 15039, 331, NULL },
   { (void *) 15058, 331, NULL },
   { (void *) 15080, 788, NULL },
   { (void *) 15094, 788, NULL },
   { (void *) 15111, 630, NULL },
   { (void *) 15136, 631, NULL },
   { (void *) 15162, 632, NULL },
   { (void *) 15187, 633, NULL },
   { (void *) 15213, 989, NULL },
   { (void *) 15240, 634, NULL },
   { (void *) 15267, 635, NULL },
   { (void *) 15295, 636, NULL },
   { (void *) 15322, 637, NULL },
   { (void *) 15350, 990, NULL },
   { (void *) 15379, 951, NULL },
   { (void *) 15405, 952, NULL },
   { (void *) 15432, 953, NULL },
   { (void *) 15458, 954, NULL },
   { (void *) 15485, 630, NULL },
   { (void *) 15506, 631, NULL },
   { (void *) 15528, 632, NULL },
   { (void *) 15549, 633, NULL },
   { (void *) 15571, 789, NULL },
   { (void *) 15589, 789, NULL },
   { (void *) 15610, 884, NULL },
   { (void *) 15633, 885, NULL },
   { (void *) 15656, 638, NULL },
   { (void *) 15673, 705, NULL },
   { (void *) 15689, 705, NULL },
   { (void *) 15708, 219, NULL },
   { (void *) 15719, 335, NULL },
   { (void *) 15736, 298, NULL },
   { (void *) 15747, 201, NULL },
   { (void *) 15756, 732, NULL },
   { (void *) 15769, 845, NULL },
   { (void *) 15785, 62, NULL },
   { (void *) 15797, 63, NULL },
   { (void *) 15810, 64, NULL },
   { (void *) 15822, 65, NULL },
   { (void *) 15835, 66, NULL },
   { (void *) 15847, 67, NULL },
   { (void *) 15860, 68, NULL },
   { (void *) 15872, 69, NULL },
   { (void *) 15885, 70, NULL },
   { (void *) 15897, 71, NULL },
   { (void *) 15910, 72, NULL },
   { (void *) 15922, 73, NULL },
   { (void *) 15935, 74, NULL },
   { (void *) 15947, 75, NULL },
   { (void *) 15960, 76, NULL },
   { (void *) 15972, 77, NULL },
   { (void *) 15985, 78, NULL },
   { (void *) 15997, 79, NULL },
   { (void *) 16010, 80, NULL },
   { (void *) 16022, 81, NULL },
   { (void *) 16035, 82, NULL },
   { (void *) 16047, 83, NULL },
   { (void *) 16060, 84, NULL },
   { (void *) 16072, 85, NULL },
   { (void *) 16085, 254, NULL },
   { (void *) 16096, 254, NULL },
   { (void *) 16109, 256, NULL },
   { (void *) 16120, 813, NULL },
   { (void *) 16135, 86, NULL },
   { (void *) 16141, 87, NULL },
   { (void *) 16148, 88, NULL },
   { (void *) 16154, 89, NULL },
   { (void *) 16161, 90, NULL },
   { (void *) 16167, 91, NULL },
   { (void *) 16174, 92, NULL },
   { (void *) 16180, 93, NULL },
   { (void *) 16187, 785, NULL },
   { (void *) 16209, 196, NULL },
   { (void *) 16220, 677, NULL },
   { (void *) 16240, 677, NULL },
   { (void *) 16263, 678, NULL },
   { (void *) 16294, 678, NULL },
   { (void *) 16328, 677, NULL },
   { (void *) 16351, 886, NULL },
   { (void *) 16377, 369, NULL },
   { (void *) 16392, 369, NULL },
   { (void *) 16410, 370, NULL },
   { (void *) 16422, 370, NULL },
   { (void *) 16437, 862, NULL },
   { (void *) 16455, 777, NULL },
   { (void *) 16479, 299, NULL },
   { (void *) 16487, 300, NULL },
   { (void *) 16495, 1017, NULL },
   { (void *) 16503, 1017, NULL },
   { (void *) 16514, 419, NULL },
   { (void *) 16529, 419, NULL },
   { (void *) 16547, 1018, NULL },
   { (void *) 16563, 1018, NULL },
   { (void *) 16582, 944, NULL },
   { (void *) 16595, 846, NULL },
   { (void *) 16609, 846, NULL },
   { (void *) 16624, 707, NULL },
   { (void *) 16636, 847, NULL },
   { (void *) 16653, 847, NULL },
   { (void *) 16671, 724, NULL },
   { (void *) 16691, 725, NULL },
   { (void *) 16712, 726, NULL },
   { (void *) 16730, 727, NULL },
   { (void *) 16749, 728, NULL },
   { (void *) 16767, 729, NULL },
   { (void *) 16786, 301, NULL },
   { (void *) 16793, 302, NULL },
   { (void *) 16800, 1019, NULL },
   { (void *) 16807, 1019, NULL },
   { (void *) 16817, 176, NULL },
   { (void *) 16825, 429, NULL },
   { (void *) 16842, 429, NULL },
   { (void *) 16862, 430, NULL },
   { (void *) 16880, 430, NULL },
   { (void *) 16901, 431, NULL },
   { (void *) 16918, 431, NULL },
   { (void *) 16938, 432, NULL },
   { (void *) 16956, 432, NULL },
   { (void *) 16977, 857, NULL },
   { (void *) 16994, 857, NULL },
   { (void *) 17014, 858, NULL },
   { (void *) 17032, 858, NULL },
   { (void *) 17053, 433, NULL },
   { (void *) 17070, 433, NULL },
   { (void *) 17090, 434, NULL },
   { (void *) 17108, 434, NULL },
   { (void *) 17129, 435, NULL },
   { (void *) 17146, 435, NULL },
   { (void *) 17166, 436, NULL },
   { (void *) 17184, 436, NULL },
   { (void *) 17205, 437, NULL },
   { (void *) 17223, 437, NULL },
   { (void *) 17244, 438, NULL },
   { (void *) 17263, 438, NULL },
   { (void *) 17285, 439, NULL },
   { (void *) 17303, 439, NULL },
   { (void *) 17324, 440, NULL },
   { (void *) 17343, 440, NULL },
   { (void *) 17365, 441, NULL },
   { (void *) 17383, 441, NULL },
   { (void *) 17404, 442, NULL },
   { (void *) 17423, 442, NULL },
   { (void *) 17445, 747, NULL },
   { (void *) 17464, 748, NULL },
   { (void *) 17484, 443, NULL },
   { (void *) 17506, 443, NULL },
   { (void *) 17531, 195, NULL },
   { (void *) 17544, 360, NULL },
   { (void *) 17562, 360, NULL },
   { (void *) 17583, 945, NULL },
   { (void *) 17612, 177, NULL },
   { (void *) 17623, 786, NULL },
   { (void *) 17636, 510, NULL },
   { (void *) 17649, 510, NULL },
   { (void *) 17665, 243, NULL },
   { (void *) 17677, 511, NULL },
   { (void *) 17697, 988, NULL },
   { (void *) 17720, 209, NULL },
   { (void *) 17732, 512, NULL },
   { (void *) 17752, 244, NULL },
   { (void *) 17762, 513, NULL },
   { (void *) 17780, 513, NULL },
   { (void *) 17801, 615, NULL },
   { (void *) 17811, 615, NULL },
   { (void *) 17824, 826, NULL },
   { (void *) 17839, 930, NULL },
   { (void *) 17861, 931, NULL },
   { (void *) 17883, 94, NULL },
   { (void *) 17894, 95, NULL },
   { (void *) 17906, 96, NULL },
   { (void *) 17917, 97, NULL },
   { (void *) 17929, 98, NULL },
   { (void *) 17940, 99, NULL },
   { (void *) 17952, 100, NULL },
   { (void *) 17963, 101, NULL },
   { (void *) 17975, 102, NULL },
   { (void *) 17986, 103, NULL },
   { (void *) 17998, 104, NULL },
   { (void *) 18009, 105, NULL },
   { (void *) 18021, 106, NULL },
   { (void *) 18032, 107, NULL },
   { (void *) 18044, 108, NULL },
   { (void *) 18055, 109, NULL },
   { (void *) 18067, 110, NULL },
   { (void *) 18078, 111, NULL },
   { (void *) 18090, 112, NULL },
   { (void *) 18101, 113, NULL },
   { (void *) 18113, 114, NULL },
   { (void *) 18124, 115, NULL },
   { (void *) 18136, 116, NULL },
   { (void *) 18147, 117, NULL },
   { (void *) 18159, 118, NULL },
   { (void *) 18170, 119, NULL },
   { (void *) 18182, 120, NULL },
   { (void *) 18193, 121, NULL },
   { (void *) 18205, 122, NULL },
   { (void *) 18216, 123, NULL },
   { (void *) 18228, 124, NULL },
   { (void *) 18239, 125, NULL },
   { (void *) 18251, 749, NULL },
   { (void *) 18264, 750, NULL },
   { (void *) 18278, 751, NULL },
   { (void *) 18291, 752, NULL },
   { (void *) 18305, 753, NULL },
   { (void *) 18318, 754, NULL },
   { (void *) 18332, 755, NULL },
   { (void *) 18345, 756, NULL },
   { (void *) 18359, 320, NULL },
   { (void *) 18375, 852, NULL },
   { (void *) 18394, 184, NULL },
   { (void *) 18402, 185, NULL },
   { (void *) 18411, 186, NULL },
   { (void *) 18419, 187, NULL },
   { (void *) 18428, 1020, NULL },
   { (void *) 18436, 1020, NULL },
   { (void *) 18447, 1021, NULL },
   { (void *) 18456, 1021, NULL },
   { (void *) 18468, 188, NULL },
   { (void *) 18476, 189, NULL },
   { (void *) 18485, 190, NULL },
   { (void *) 18493, 190, NULL },
   { (void *) 18504, 191, NULL },
   { (void *) 18513, 191, NULL },
   { (void *) 18525, 192, NULL },
   { (void *) 18533, 192, NULL },
   { (void *) 18544, 193, NULL },
   { (void *) 18553, 193, NULL },
   { (void *) 18565, 957, NULL },
   { (void *) 18576, 958, NULL },
   { (void *) 18588, 182, NULL },
   { (void *) 18599, 183, NULL },
   { (void *) 18610, 708, NULL },
   { (void *) 18632, 371, NULL },
   { (void *) 18643, 371, NULL },
   { (void *) 18657, 709, NULL },
   { (void *) 18679, 371, NULL },
   { (void *) 18693, 596, NULL },
   { (void *) 18709, 596, NULL },
   { (void *) 18728, 597, NULL },
   { (void *) 18745, 597, NULL },
   { (void *) 18765, 178, NULL },
   { (void *) 18779, 179, NULL },
   { (void *) 18794, 180, NULL },
   { (void *) 18808, 181, NULL },
   { (void *) 18823, 1022, NULL },
   { (void *) 18837, 1022, NULL },
   { (void *) 18854, 1035, NULL },
   { (void *) 18869, 1035, NULL },
   { (void *) 18887, 820, NULL },
   { (void *) 18900, 821, NULL },
   { (void *) 18913, 827, NULL },
   { (void *) 18937, 822, NULL },
   { (void *) 18950, 828, NULL },
   { (void *) 18974, 332, NULL },
   { (void *) 18988, 332, NULL },
   { (void *) 19005, 333, NULL },
   { (void *) 19019, 333, NULL },
   { (void *) 19036, 372, NULL },
   { (void *) 19050, 372, NULL },
   { (void *) 19067, 372, NULL },
   { (void *) 19084, 987, NULL },
   { (void *) 19101, 823, NULL },
   { (void *) 19121, 824, NULL },
   { (void *) 19141, 825, NULL },
   { (void *) 19161, 887, NULL },
   { (void *) 19175, 598, NULL },
   { (void *) 19201, 598, NULL },
   { (void *) 19230, 303, NULL },
   { (void *) 19241, 304, NULL },
   { (void *) 19252, 1023, NULL },
   { (void *) 19263, 1023, NULL },
   { (void *) 19277, 514, NULL },
   { (void *) 19287, 514, NULL },
   { (void *) 19300, 515, NULL },
   { (void *) 19311, 515, NULL },
   { (void *) 19325, 516, NULL },
   { (void *) 19335, 516, NULL },
   { (void *) 19348, 517, NULL },
   { (void *) 19359, 517, NULL },
   { (void *) 19373, 599, NULL },
   { (void *) 19384, 599, NULL },
   { (void *) 19398, 600, NULL },
   { (void *) 19410, 600, NULL },
   { (void *) 19425, 518, NULL },
   { (void *) 19435, 518, NULL },
   { (void *) 19448, 519, NULL },
   { (void *) 19459, 519, NULL },
   { (void *) 19473, 520, NULL },
   { (void *) 19483, 520, NULL },
   { (void *) 19496, 521, NULL },
   { (void *) 19507, 521, NULL },
   { (void *) 19521, 601, NULL },
   { (void *) 19532, 601, NULL },
   { (void *) 19546, 602, NULL },
   { (void *) 19558, 602, NULL },
   { (void *) 19573, 522, NULL },
   { (void *) 19583, 522, NULL },
   { (void *) 19596, 523, NULL },
   { (void *) 19607, 523, NULL },
   { (void *) 19621, 524, NULL },
   { (void *) 19631, 524, NULL },
   { (void *) 19644, 525, NULL },
   { (void *) 19655, 525, NULL },
   { (void *) 19669, 603, NULL },
   { (void *) 19680, 603, NULL },
   { (void *) 19694, 604, NULL },
   { (void *) 19706, 604, NULL },
   { (void *) 19721, 526, NULL },
   { (void *) 19731, 526, NULL },
   { (void *) 19744, 527, NULL },
   { (void *) 19755, 527, NULL },
   { (void *) 19769, 528, NULL },
   { (void *) 19779, 528, NULL },
   { (void *) 19792, 529, NULL },
   { (void *) 19803, 529, NULL },
   { (void *) 19817, 605, NULL },
   { (void *) 19828, 605, NULL },
   { (void *) 19842, 606, NULL },
   { (void *) 19854, 606, NULL },
   { (void *) 19869, 692, NULL },
   { (void *) 19889, 530, NULL },
   { (void *) 19906, 530, NULL },
   { (void *) 19926, 564, NULL },
   { (void *) 19945, 565, NULL },
   { (void *) 19964, 531, NULL },
   { (void *) 19981, 531, NULL },
   { (void *) 20001, 566, NULL },
   { (void *) 20020, 567, NULL },
   { (void *) 20039, 532, NULL },
   { (void *) 20056, 532, NULL },
   { (void *) 20076, 568, NULL },
   { (void *) 20095, 569, NULL },
   { (void *) 20114, 856, NULL },
   { (void *) 20130, 478, NULL },
   { (void *) 20142, 478, NULL },
   { (void *) 20157, 478, NULL },
   { (void *) 20172, 533, NULL },
   { (void *) 20183, 533, NULL },
   { (void *) 20203, 986, NULL },
   { (void *) 20223, 534, NULL },
   { (void *) 20239, 534, NULL },
   { (void *) 20258, 126, NULL },
   { (void *) 20267, 127, NULL },
   { (void *) 20277, 128, NULL },
   { (void *) 20286, 129, NULL },
   { (void *) 20296, 130, NULL },
   { (void *) 20305, 131, NULL },
   { (void *) 20315, 132, NULL },
   { (void *) 20324, 133, NULL },
   { (void *) 20334, 134, NULL },
   { (void *) 20343, 135, NULL },
   { (void *) 20353, 136, NULL },
   { (void *) 20362, 137, NULL },
   { (void *) 20372, 138, NULL },
   { (void *) 20381, 139, NULL },
   { (void *) 20391, 140, NULL },
   { (void *) 20400, 141, NULL },
   { (void *) 20410, 142, NULL },
   { (void *) 20419, 143, NULL },
   { (void *) 20429, 144, NULL },
   { (void *) 20438, 145, NULL },
   { (void *) 20448, 146, NULL },
   { (void *) 20457, 147, NULL },
   { (void *) 20467, 148, NULL },
   { (void *) 20476, 149, NULL },
   { (void *) 20486, 535, NULL },
   { (void *) 20501, 535, NULL },
   { (void *) 20519, 888, NULL },
   { (void *) 20536, 536, NULL },
   { (void *) 20552, 536, NULL },
   { (void *) 20571, 889, NULL },
   { (void *) 20589, 639, NULL },
   { (void *) 20604, 639, NULL },
   { (void *) 20622, 890, NULL },
   { (void *) 20639, 640, NULL },
   { (void *) 20655, 640, NULL },
   { (void *) 20674, 891, NULL },
   { (void *) 20692, 537, NULL },
   { (void *) 20707, 537, NULL },
   { (void *) 20725, 892, NULL },
   { (void *) 20742, 538, NULL },
   { (void *) 20758, 538, NULL },
   { (void *) 20777, 893, NULL },
   { (void *) 20795, 539, NULL },
   { (void *) 20810, 539, NULL },
   { (void *) 20828, 894, NULL },
   { (void *) 20845, 540, NULL },
   { (void *) 20861, 540, NULL },
   { (void *) 20880, 895, NULL },
   { (void *) 20898, 641, NULL },
   { (void *) 20913, 641, NULL },
   { (void *) 20931, 896, NULL },
   { (void *) 20948, 642, NULL },
   { (void *) 20964, 642, NULL },
   { (void *) 20983, 897, NULL },
   { (void *) 21001, 541, NULL },
   { (void *) 21016, 541, NULL },
   { (void *) 21034, 898, NULL },
   { (void *) 21051, 542, NULL },
   { (void *) 21067, 542, NULL },
   { (void *) 21086, 899, NULL },
   { (void *) 21104, 543, NULL },
   { (void *) 21119, 543, NULL },
   { (void *) 21137, 900, NULL },
   { (void *) 21154, 544, NULL },
   { (void *) 21170, 544, NULL },
   { (void *) 21189, 901, NULL },
   { (void *) 21207, 643, NULL },
   { (void *) 21222, 643, NULL },
   { (void *) 21240, 902, NULL },
   { (void *) 21257, 644, NULL },
   { (void *) 21273, 644, NULL },
   { (void *) 21292, 903, NULL },
   { (void *) 21310, 545, NULL },
   { (void *) 21325, 545, NULL },
   { (void *) 21343, 904, NULL },
   { (void *) 21360, 546, NULL },
   { (void *) 21376, 546, NULL },
   { (void *) 21395, 905, NULL },
   { (void *) 21413, 547, NULL },
   { (void *) 21430, 547, NULL },
   { (void *) 21450, 548, NULL },
   { (void *) 21467, 548, NULL },
   { (void *) 21487, 549, NULL },
   { (void *) 21504, 549, NULL },
   { (void *) 21524, 550, NULL },
   { (void *) 21541, 550, NULL },
   { (void *) 21561, 551, NULL },
   { (void *) 21579, 551, NULL },
   { (void *) 21600, 552, NULL },
   { (void *) 21618, 552, NULL },
   { (void *) 21639, 553, NULL },
   { (void *) 21657, 553, NULL },
   { (void *) 21678, 554, NULL },
   { (void *) 21694, 554, NULL },
   { (void *) 21713, 555, NULL },
   { (void *) 21728, 555, NULL },
   { (void *) 21746, 906, NULL },
   { (void *) 21763, 556, NULL },
   { (void *) 21779, 556, NULL },
   { (void *) 21798, 907, NULL },
   { (void *) 21816, 645, NULL },
   { (void *) 21831, 645, NULL },
   { (void *) 21849, 908, NULL },
   { (void *) 21866, 646, NULL },
   { (void *) 21882, 646, NULL },
   { (void *) 21901, 909, NULL },
   { (void *) 21919, 557, NULL },
   { (void *) 21935, 557, NULL },
   { (void *) 21954, 558, NULL },
   { (void *) 21969, 558, NULL },
   { (void *) 21987, 910, NULL },
   { (void *) 22004, 559, NULL },
   { (void *) 22020, 559, NULL },
   { (void *) 22039, 911, NULL },
   { (void *) 22057, 912, NULL },
   { (void *) 22075, 560, NULL },
   { (void *) 22092, 560, NULL },
   { (void *) 22112, 913, NULL },
   { (void *) 22131, 561, NULL },
   { (void *) 22148, 561, NULL },
   { (void *) 22168, 562, NULL },
   { (void *) 22185, 562, NULL },
   { (void *) 22205, 619, NULL },
   { (void *) 22225, 619, NULL },
   { (void *) 22248, 964, NULL },
   { (void *) 22264, 964, NULL },
   { (void *) 22283, 607, NULL },
   { (void *) 22300, 607, NULL },
   { (void *) 22320, 965, NULL },
   { (void *) 22337, 965, NULL },
   { (void *) 22357, 608, NULL },
   { (void *) 22375, 608, NULL },
   { (void *) 22396, 966, NULL },
   { (void *) 22412, 966, NULL },
   { (void *) 22431, 967, NULL },
   { (void *) 22448, 967, NULL },
   { (void *) 22468, 968, NULL },
   { (void *) 22485, 968, NULL },
   { (void *) 22505, 969, NULL },
   { (void *) 22523, 969, NULL },
   { (void *) 22544, 970, NULL },
   { (void *) 22560, 970, NULL },
   { (void *) 22579, 971, NULL },
   { (void *) 22596, 971, NULL },
   { (void *) 22616, 972, NULL },
   { (void *) 22633, 972, NULL },
   { (void *) 22653, 973, NULL },
   { (void *) 22671, 973, NULL },
   { (void *) 22692, 609, NULL },
   { (void *) 22709, 609, NULL },
   { (void *) 22729, 974, NULL },
   { (void *) 22745, 974, NULL },
   { (void *) 22764, 975, NULL },
   { (void *) 22781, 975, NULL },
   { (void *) 22801, 610, NULL },
   { (void *) 22818, 610, NULL },
   { (void *) 22838, 611, NULL },
   { (void *) 22856, 611, NULL },
   { (void *) 22877, 976, NULL },
   { (void *) 22894, 976, NULL },
   { (void *) 22914, 977, NULL },
   { (void *) 22932, 977, NULL },
   { (void *) 22953, 612, NULL },
   { (void *) 22971, 612, NULL },
   { (void *) 22992, 613, NULL },
   { (void *) 23013, 613, NULL },
   { (void *) 23037, 757, NULL },
   { (void *) 23054, 758, NULL },
   { (void *) 23072, 759, NULL },
   { (void *) 23089, 760, NULL },
   { (void *) 23107, 761, NULL },
   { (void *) 23124, 762, NULL },
   { (void *) 23142, 763, NULL },
   { (void *) 23159, 764, NULL },
   { (void *) 23177, 563, NULL },
   { (void *) 23197, 563, NULL },
   { (void *) 23220, 914, NULL },
   { (void *) 23242, 915, NULL },
   { (void *) 23261, 916, NULL },
   { (void *) 23280, 917, NULL },
   { (void *) 23299, 918, NULL },
   { (void *) 23318, 919, NULL },
   { (void *) 23337, 920, NULL },
   { (void *) 23356, 921, NULL },
   { (void *) 23375, 922, NULL },
   { (void *) 23394, 923, NULL },
   { (void *) 23413, 924, NULL },
   { (void *) 23432, 925, NULL },
   { (void *) 23451, 926, NULL },
   { (void *) 23470, 927, NULL },
   { (void *) 23490, 765, NULL },
   { (void *) 23501, 766, NULL },
   { (void *) 23513, 767, NULL },
   { (void *) 23524, 768, NULL },
   { (void *) 23536, 769, NULL },
   { (void *) 23547, 770, NULL },
   { (void *) 23559, 321, NULL },
   { (void *) 23573, 853, NULL },
   { (void *) 23590, 305, NULL },
   { (void *) 23599, 700, NULL },
   { (void *) 23608, 444, NULL },
   { (void *) 23620, 444, NULL },
   { (void *) 23635, 444, NULL },
   { (void *) 23651, 445, NULL },
   { (void *) 23664, 445, NULL },
   { (void *) 23680, 445, NULL },
   { (void *) 23697, 446, NULL },
   { (void *) 23709, 446, NULL },
   { (void *) 23724, 446, NULL },
   { (void *) 23740, 447, NULL },
   { (void *) 23753, 447, NULL },
   { (void *) 23769, 447, NULL },
   { (void *) 23786, 448, NULL },
   { (void *) 23798, 448, NULL },
   { (void *) 23813, 448, NULL },
   { (void *) 23829, 449, NULL },
   { (void *) 23842, 449, NULL },
   { (void *) 23858, 449, NULL },
   { (void *) 23875, 450, NULL },
   { (void *) 23887, 450, NULL },
   { (void *) 23902, 450, NULL },
   { (void *) 23918, 451, NULL },
   { (void *) 23931, 451, NULL },
   { (void *) 23947, 451, NULL },
   { (void *) 23964, 452, NULL },
   { (void *) 23976, 452, NULL },
   { (void *) 23991, 452, NULL },
   { (void *) 24007, 453, NULL },
   { (void *) 24020, 453, NULL },
   { (void *) 24036, 453, NULL },
   { (void *) 24053, 454, NULL },
   { (void *) 24065, 454, NULL },
   { (void *) 24080, 454, NULL },
   { (void *) 24096, 455, NULL },
   { (void *) 24109, 455, NULL },
   { (void *) 24125, 455, NULL },
   { (void *) 24142, 456, NULL },
   { (void *) 24154, 456, NULL },
   { (void *) 24169, 456, NULL },
   { (void *) 24185, 457, NULL },
   { (void *) 24198, 457, NULL },
   { (void *) 24214, 457, NULL },
   { (void *) 24231, 458, NULL },
   { (void *) 24243, 458, NULL },
   { (void *) 24258, 458, NULL },
   { (void *) 24274, 459, NULL },
   { (void *) 24287, 459, NULL },
   { (void *) 24303, 459, NULL },
   { (void *) 24320, 863, NULL },
   { (void *) 24336, 864, NULL },
   { (void *) 24353, 865, NULL },
   { (void *) 24369, 866, NULL },
   { (void *) 24386, 867, NULL },
   { (void *) 24402, 868, NULL },
   { (void *) 24419, 869, NULL },
   { (void *) 24435, 870, NULL }
};
#undef MAPI_TMP_PUBLIC_STUBS
#endif /* MAPI_TMP_PUBLIC_STUBS */

#ifdef MAPI_TMP_PUBLIC_ENTRIES
void APIENTRY shared_dispatch_stub_0(GLuint list, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[0];
   ((void (APIENTRY *)(GLuint list, GLenum mode)) _func)(list, mode);
}

void APIENTRY shared_dispatch_stub_1(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_2(GLuint list)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[2];
   ((void (APIENTRY *)(GLuint list)) _func)(list);
}

void APIENTRY shared_dispatch_stub_3(GLsizei n, GLenum type, const GLvoid *lists)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[3];
   ((void (APIENTRY *)(GLsizei n, GLenum type, const GLvoid *lists)) _func)(n, type, lists);
}

void APIENTRY shared_dispatch_stub_4(GLuint list, GLsizei range)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[4];
   ((void (APIENTRY *)(GLuint list, GLsizei range)) _func)(list, range);
}

GLuint APIENTRY shared_dispatch_stub_5(GLsizei range)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[5];
   return ((GLuint (APIENTRY *)(GLsizei range)) _func)(range);
}

void APIENTRY shared_dispatch_stub_6(GLuint base)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[6];
   ((void (APIENTRY *)(GLuint base)) _func)(base);
}

void APIENTRY shared_dispatch_stub_7(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[7];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_8(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[8];
   ((void (APIENTRY *)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)) _func)(width, height, xorig, yorig, xmove, ymove, bitmap);
}

void APIENTRY shared_dispatch_stub_9(GLbyte red, GLbyte green, GLbyte blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[9];
   ((void (APIENTRY *)(GLbyte red, GLbyte green, GLbyte blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_10(const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[10];
   ((void (APIENTRY *)(const GLbyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_11(GLdouble red, GLdouble green, GLdouble blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[11];
   ((void (APIENTRY *)(GLdouble red, GLdouble green, GLdouble blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_12(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[12];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_13(GLfloat red, GLfloat green, GLfloat blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[13];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_14(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[14];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_15(GLint red, GLint green, GLint blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[15];
   ((void (APIENTRY *)(GLint red, GLint green, GLint blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_16(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[16];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_17(GLshort red, GLshort green, GLshort blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[17];
   ((void (APIENTRY *)(GLshort red, GLshort green, GLshort blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_18(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[18];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_19(GLubyte red, GLubyte green, GLubyte blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[19];
   ((void (APIENTRY *)(GLubyte red, GLubyte green, GLubyte blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_20(const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[20];
   ((void (APIENTRY *)(const GLubyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_21(GLuint red, GLuint green, GLuint blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[21];
   ((void (APIENTRY *)(GLuint red, GLuint green, GLuint blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_22(const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[22];
   ((void (APIENTRY *)(const GLuint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_23(GLushort red, GLushort green, GLushort blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[23];
   ((void (APIENTRY *)(GLushort red, GLushort green, GLushort blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_24(const GLushort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[24];
   ((void (APIENTRY *)(const GLushort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_25(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[25];
   ((void (APIENTRY *)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_26(const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[26];
   ((void (APIENTRY *)(const GLbyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_27(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[27];
   ((void (APIENTRY *)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_28(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[28];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_29(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[29];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_30(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[30];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_31(GLint red, GLint green, GLint blue, GLint alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[31];
   ((void (APIENTRY *)(GLint red, GLint green, GLint blue, GLint alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_32(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[32];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_33(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[33];
   ((void (APIENTRY *)(GLshort red, GLshort green, GLshort blue, GLshort alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_34(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[34];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_35(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[35];
   ((void (APIENTRY *)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_36(const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[36];
   ((void (APIENTRY *)(const GLubyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_37(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[37];
   ((void (APIENTRY *)(GLuint red, GLuint green, GLuint blue, GLuint alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_38(const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[38];
   ((void (APIENTRY *)(const GLuint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_39(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[39];
   ((void (APIENTRY *)(GLushort red, GLushort green, GLushort blue, GLushort alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_40(const GLushort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[40];
   ((void (APIENTRY *)(const GLushort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_41(GLboolean flag)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[41];
   ((void (APIENTRY *)(GLboolean flag)) _func)(flag);
}

void APIENTRY shared_dispatch_stub_42(const GLboolean *flag)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[42];
   ((void (APIENTRY *)(const GLboolean *flag)) _func)(flag);
}

void APIENTRY shared_dispatch_stub_43(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[43];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_44(GLdouble c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[44];
   ((void (APIENTRY *)(GLdouble c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_45(const GLdouble *c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[45];
   ((void (APIENTRY *)(const GLdouble *c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_46(GLfloat c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[46];
   ((void (APIENTRY *)(GLfloat c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_47(const GLfloat *c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[47];
   ((void (APIENTRY *)(const GLfloat *c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_48(GLint c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[48];
   ((void (APIENTRY *)(GLint c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_49(const GLint *c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[49];
   ((void (APIENTRY *)(const GLint *c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_50(GLshort c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[50];
   ((void (APIENTRY *)(GLshort c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_51(const GLshort *c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[51];
   ((void (APIENTRY *)(const GLshort *c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_52(GLbyte nx, GLbyte ny, GLbyte nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[52];
   ((void (APIENTRY *)(GLbyte nx, GLbyte ny, GLbyte nz)) _func)(nx, ny, nz);
}

void APIENTRY shared_dispatch_stub_53(const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[53];
   ((void (APIENTRY *)(const GLbyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_54(GLdouble nx, GLdouble ny, GLdouble nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[54];
   ((void (APIENTRY *)(GLdouble nx, GLdouble ny, GLdouble nz)) _func)(nx, ny, nz);
}

void APIENTRY shared_dispatch_stub_55(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[55];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_56(GLfloat nx, GLfloat ny, GLfloat nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[56];
   ((void (APIENTRY *)(GLfloat nx, GLfloat ny, GLfloat nz)) _func)(nx, ny, nz);
}

void APIENTRY shared_dispatch_stub_57(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[57];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_58(GLint nx, GLint ny, GLint nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[58];
   ((void (APIENTRY *)(GLint nx, GLint ny, GLint nz)) _func)(nx, ny, nz);
}

void APIENTRY shared_dispatch_stub_59(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[59];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_60(GLshort nx, GLshort ny, GLshort nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[60];
   ((void (APIENTRY *)(GLshort nx, GLshort ny, GLshort nz)) _func)(nx, ny, nz);
}

void APIENTRY shared_dispatch_stub_61(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[61];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_62(GLdouble x, GLdouble y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[62];
   ((void (APIENTRY *)(GLdouble x, GLdouble y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_63(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[63];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_64(GLfloat x, GLfloat y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[64];
   ((void (APIENTRY *)(GLfloat x, GLfloat y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_65(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[65];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_66(GLint x, GLint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[66];
   ((void (APIENTRY *)(GLint x, GLint y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_67(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[67];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_68(GLshort x, GLshort y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[68];
   ((void (APIENTRY *)(GLshort x, GLshort y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_69(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[69];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_70(GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[70];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_71(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[71];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_72(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[72];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_73(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[73];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_74(GLint x, GLint y, GLint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[74];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_75(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[75];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_76(GLshort x, GLshort y, GLshort z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[76];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_77(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[77];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_78(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[78];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_79(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[79];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_80(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[80];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_81(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[81];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_82(GLint x, GLint y, GLint z, GLint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[82];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z, GLint w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_83(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[83];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_84(GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[84];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_85(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[85];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_86(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[86];
   ((void (APIENTRY *)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)) _func)(x1, y1, x2, y2);
}

void APIENTRY shared_dispatch_stub_87(const GLdouble *v1, const GLdouble *v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[87];
   ((void (APIENTRY *)(const GLdouble *v1, const GLdouble *v2)) _func)(v1, v2);
}

void APIENTRY shared_dispatch_stub_88(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[88];
   ((void (APIENTRY *)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)) _func)(x1, y1, x2, y2);
}

void APIENTRY shared_dispatch_stub_89(const GLfloat *v1, const GLfloat *v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[89];
   ((void (APIENTRY *)(const GLfloat *v1, const GLfloat *v2)) _func)(v1, v2);
}

void APIENTRY shared_dispatch_stub_90(GLint x1, GLint y1, GLint x2, GLint y2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[90];
   ((void (APIENTRY *)(GLint x1, GLint y1, GLint x2, GLint y2)) _func)(x1, y1, x2, y2);
}

void APIENTRY shared_dispatch_stub_91(const GLint *v1, const GLint *v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[91];
   ((void (APIENTRY *)(const GLint *v1, const GLint *v2)) _func)(v1, v2);
}

void APIENTRY shared_dispatch_stub_92(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[92];
   ((void (APIENTRY *)(GLshort x1, GLshort y1, GLshort x2, GLshort y2)) _func)(x1, y1, x2, y2);
}

void APIENTRY shared_dispatch_stub_93(const GLshort *v1, const GLshort *v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[93];
   ((void (APIENTRY *)(const GLshort *v1, const GLshort *v2)) _func)(v1, v2);
}

void APIENTRY shared_dispatch_stub_94(GLdouble s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[94];
   ((void (APIENTRY *)(GLdouble s)) _func)(s);
}

void APIENTRY shared_dispatch_stub_95(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[95];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_96(GLfloat s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[96];
   ((void (APIENTRY *)(GLfloat s)) _func)(s);
}

void APIENTRY shared_dispatch_stub_97(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[97];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_98(GLint s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[98];
   ((void (APIENTRY *)(GLint s)) _func)(s);
}

void APIENTRY shared_dispatch_stub_99(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[99];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_100(GLshort s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[100];
   ((void (APIENTRY *)(GLshort s)) _func)(s);
}

void APIENTRY shared_dispatch_stub_101(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[101];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_102(GLdouble s, GLdouble t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[102];
   ((void (APIENTRY *)(GLdouble s, GLdouble t)) _func)(s, t);
}

void APIENTRY shared_dispatch_stub_103(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[103];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_104(GLfloat s, GLfloat t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[104];
   ((void (APIENTRY *)(GLfloat s, GLfloat t)) _func)(s, t);
}

void APIENTRY shared_dispatch_stub_105(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[105];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_106(GLint s, GLint t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[106];
   ((void (APIENTRY *)(GLint s, GLint t)) _func)(s, t);
}

void APIENTRY shared_dispatch_stub_107(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[107];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_108(GLshort s, GLshort t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[108];
   ((void (APIENTRY *)(GLshort s, GLshort t)) _func)(s, t);
}

void APIENTRY shared_dispatch_stub_109(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[109];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_110(GLdouble s, GLdouble t, GLdouble r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[110];
   ((void (APIENTRY *)(GLdouble s, GLdouble t, GLdouble r)) _func)(s, t, r);
}

void APIENTRY shared_dispatch_stub_111(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[111];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_112(GLfloat s, GLfloat t, GLfloat r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[112];
   ((void (APIENTRY *)(GLfloat s, GLfloat t, GLfloat r)) _func)(s, t, r);
}

void APIENTRY shared_dispatch_stub_113(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[113];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_114(GLint s, GLint t, GLint r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[114];
   ((void (APIENTRY *)(GLint s, GLint t, GLint r)) _func)(s, t, r);
}

void APIENTRY shared_dispatch_stub_115(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[115];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_116(GLshort s, GLshort t, GLshort r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[116];
   ((void (APIENTRY *)(GLshort s, GLshort t, GLshort r)) _func)(s, t, r);
}

void APIENTRY shared_dispatch_stub_117(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[117];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_118(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[118];
   ((void (APIENTRY *)(GLdouble s, GLdouble t, GLdouble r, GLdouble q)) _func)(s, t, r, q);
}

void APIENTRY shared_dispatch_stub_119(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[119];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_120(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[120];
   ((void (APIENTRY *)(GLfloat s, GLfloat t, GLfloat r, GLfloat q)) _func)(s, t, r, q);
}

void APIENTRY shared_dispatch_stub_121(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[121];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_122(GLint s, GLint t, GLint r, GLint q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[122];
   ((void (APIENTRY *)(GLint s, GLint t, GLint r, GLint q)) _func)(s, t, r, q);
}

void APIENTRY shared_dispatch_stub_123(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[123];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_124(GLshort s, GLshort t, GLshort r, GLshort q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[124];
   ((void (APIENTRY *)(GLshort s, GLshort t, GLshort r, GLshort q)) _func)(s, t, r, q);
}

void APIENTRY shared_dispatch_stub_125(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[125];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_126(GLdouble x, GLdouble y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[126];
   ((void (APIENTRY *)(GLdouble x, GLdouble y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_127(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[127];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_128(GLfloat x, GLfloat y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[128];
   ((void (APIENTRY *)(GLfloat x, GLfloat y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_129(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[129];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_130(GLint x, GLint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[130];
   ((void (APIENTRY *)(GLint x, GLint y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_131(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[131];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_132(GLshort x, GLshort y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[132];
   ((void (APIENTRY *)(GLshort x, GLshort y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_133(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[133];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_134(GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[134];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_135(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[135];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_136(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[136];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_137(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[137];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_138(GLint x, GLint y, GLint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[138];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_139(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[139];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_140(GLshort x, GLshort y, GLshort z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[140];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_141(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[141];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_142(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[142];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_143(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[143];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_144(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[144];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_145(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[145];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_146(GLint x, GLint y, GLint z, GLint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[146];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z, GLint w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_147(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[147];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_148(GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[148];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_149(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[149];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_150(GLenum plane, const GLdouble *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[150];
   ((void (APIENTRY *)(GLenum plane, const GLdouble *equation)) _func)(plane, equation);
}

void APIENTRY shared_dispatch_stub_151(GLenum face, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[151];
   ((void (APIENTRY *)(GLenum face, GLenum mode)) _func)(face, mode);
}

void APIENTRY shared_dispatch_stub_152(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[152];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_153(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[153];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_154(GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[154];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_155(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[155];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_156(GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[156];
   ((void (APIENTRY *)(GLenum pname, const GLint *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_157(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[157];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_158(GLenum target, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[158];
   ((void (APIENTRY *)(GLenum target, GLenum mode)) _func)(target, mode);
}

void APIENTRY shared_dispatch_stub_159(GLenum light, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[159];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfloat param)) _func)(light, pname, param);
}

void APIENTRY shared_dispatch_stub_160(GLenum light, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[160];
   ((void (APIENTRY *)(GLenum light, GLenum pname, const GLfloat *params)) _func)(light, pname, params);
}

void APIENTRY shared_dispatch_stub_161(GLenum light, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[161];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLint param)) _func)(light, pname, param);
}

void APIENTRY shared_dispatch_stub_162(GLenum light, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[162];
   ((void (APIENTRY *)(GLenum light, GLenum pname, const GLint *params)) _func)(light, pname, params);
}

void APIENTRY shared_dispatch_stub_163(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[163];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_164(GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[164];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_165(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[165];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_166(GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[166];
   ((void (APIENTRY *)(GLenum pname, const GLint *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_167(GLint factor, GLushort pattern)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[167];
   ((void (APIENTRY *)(GLint factor, GLushort pattern)) _func)(factor, pattern);
}

void APIENTRY shared_dispatch_stub_168(GLfloat width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[168];
   ((void (APIENTRY *)(GLfloat width)) _func)(width);
}

void APIENTRY shared_dispatch_stub_169(GLenum face, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[169];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfloat param)) _func)(face, pname, param);
}

void APIENTRY shared_dispatch_stub_170(GLenum face, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[170];
   ((void (APIENTRY *)(GLenum face, GLenum pname, const GLfloat *params)) _func)(face, pname, params);
}

void APIENTRY shared_dispatch_stub_171(GLenum face, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[171];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLint param)) _func)(face, pname, param);
}

void APIENTRY shared_dispatch_stub_172(GLenum face, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[172];
   ((void (APIENTRY *)(GLenum face, GLenum pname, const GLint *params)) _func)(face, pname, params);
}

void APIENTRY shared_dispatch_stub_173(GLfloat size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[173];
   ((void (APIENTRY *)(GLfloat size)) _func)(size);
}

void APIENTRY shared_dispatch_stub_174(GLenum face, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[174];
   ((void (APIENTRY *)(GLenum face, GLenum mode)) _func)(face, mode);
}

void APIENTRY shared_dispatch_stub_175(const GLubyte *mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[175];
   ((void (APIENTRY *)(const GLubyte *mask)) _func)(mask);
}

void APIENTRY shared_dispatch_stub_176(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[176];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

void APIENTRY shared_dispatch_stub_177(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[177];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_178(GLenum target, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[178];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_179(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[179];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_180(GLenum target, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[180];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_181(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[181];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_182(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[182];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, border, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_183(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[183];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, border, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_184(GLenum target, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[184];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_185(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[185];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_186(GLenum target, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[186];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_187(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[187];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_188(GLenum coord, GLenum pname, GLdouble param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[188];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLdouble param)) _func)(coord, pname, param);
}

void APIENTRY shared_dispatch_stub_189(GLenum coord, GLenum pname, const GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[189];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLdouble *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_190(GLenum coord, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[190];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLfloat param)) _func)(coord, pname, param);
}

void APIENTRY shared_dispatch_stub_191(GLenum coord, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[191];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLfloat *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_192(GLenum coord, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[192];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLint param)) _func)(coord, pname, param);
}

void APIENTRY shared_dispatch_stub_193(GLenum coord, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[193];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLint *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_194(GLsizei size, GLenum type, GLfloat *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[194];
   ((void (APIENTRY *)(GLsizei size, GLenum type, GLfloat *buffer)) _func)(size, type, buffer);
}

void APIENTRY shared_dispatch_stub_195(GLsizei size, GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[195];
   ((void (APIENTRY *)(GLsizei size, GLuint *buffer)) _func)(size, buffer);
}

GLint APIENTRY shared_dispatch_stub_196(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[196];
   return ((GLint (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_197(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[197];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_198(GLuint name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[198];
   ((void (APIENTRY *)(GLuint name)) _func)(name);
}

void APIENTRY shared_dispatch_stub_199(GLfloat token)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[199];
   ((void (APIENTRY *)(GLfloat token)) _func)(token);
}

void APIENTRY shared_dispatch_stub_200(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[200];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_201(GLuint name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[201];
   ((void (APIENTRY *)(GLuint name)) _func)(name);
}

void APIENTRY shared_dispatch_stub_202(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[202];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_203(GLbitfield mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[203];
   ((void (APIENTRY *)(GLbitfield mask)) _func)(mask);
}

void APIENTRY shared_dispatch_stub_204(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[204];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_205(GLfloat c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[205];
   ((void (APIENTRY *)(GLfloat c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_206(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[206];
   ((void (APIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_207(GLint s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[207];
   ((void (APIENTRY *)(GLint s)) _func)(s);
}

void APIENTRY shared_dispatch_stub_208(GLclampd depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[208];
   ((void (APIENTRY *)(GLclampd depth)) _func)(depth);
}

void APIENTRY shared_dispatch_stub_209(GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[209];
   ((void (APIENTRY *)(GLuint mask)) _func)(mask);
}

void APIENTRY shared_dispatch_stub_210(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[210];
   ((void (APIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_211(GLboolean flag)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[211];
   ((void (APIENTRY *)(GLboolean flag)) _func)(flag);
}

void APIENTRY shared_dispatch_stub_212(GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[212];
   ((void (APIENTRY *)(GLuint mask)) _func)(mask);
}

void APIENTRY shared_dispatch_stub_213(GLenum op, GLfloat value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[213];
   ((void (APIENTRY *)(GLenum op, GLfloat value)) _func)(op, value);
}

void APIENTRY shared_dispatch_stub_214(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[214];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

void APIENTRY shared_dispatch_stub_215(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[215];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

void APIENTRY shared_dispatch_stub_216(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[216];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_217(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[217];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_218(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[218];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_219(GLbitfield mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[219];
   ((void (APIENTRY *)(GLbitfield mask)) _func)(mask);
}

void APIENTRY shared_dispatch_stub_220(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[220];
   ((void (APIENTRY *)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)) _func)(target, u1, u2, stride, order, points);
}

void APIENTRY shared_dispatch_stub_221(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[221];
   ((void (APIENTRY *)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)) _func)(target, u1, u2, stride, order, points);
}

void APIENTRY shared_dispatch_stub_222(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[222];
   ((void (APIENTRY *)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)) _func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void APIENTRY shared_dispatch_stub_223(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[223];
   ((void (APIENTRY *)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)) _func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void APIENTRY shared_dispatch_stub_224(GLint un, GLdouble u1, GLdouble u2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[224];
   ((void (APIENTRY *)(GLint un, GLdouble u1, GLdouble u2)) _func)(un, u1, u2);
}

void APIENTRY shared_dispatch_stub_225(GLint un, GLfloat u1, GLfloat u2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[225];
   ((void (APIENTRY *)(GLint un, GLfloat u1, GLfloat u2)) _func)(un, u1, u2);
}

void APIENTRY shared_dispatch_stub_226(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[226];
   ((void (APIENTRY *)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)) _func)(un, u1, u2, vn, v1, v2);
}

void APIENTRY shared_dispatch_stub_227(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[227];
   ((void (APIENTRY *)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)) _func)(un, u1, u2, vn, v1, v2);
}

void APIENTRY shared_dispatch_stub_228(GLdouble u)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[228];
   ((void (APIENTRY *)(GLdouble u)) _func)(u);
}

void APIENTRY shared_dispatch_stub_229(const GLdouble *u)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[229];
   ((void (APIENTRY *)(const GLdouble *u)) _func)(u);
}

void APIENTRY shared_dispatch_stub_230(GLfloat u)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[230];
   ((void (APIENTRY *)(GLfloat u)) _func)(u);
}

void APIENTRY shared_dispatch_stub_231(const GLfloat *u)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[231];
   ((void (APIENTRY *)(const GLfloat *u)) _func)(u);
}

void APIENTRY shared_dispatch_stub_232(GLdouble u, GLdouble v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[232];
   ((void (APIENTRY *)(GLdouble u, GLdouble v)) _func)(u, v);
}

void APIENTRY shared_dispatch_stub_233(const GLdouble *u)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[233];
   ((void (APIENTRY *)(const GLdouble *u)) _func)(u);
}

void APIENTRY shared_dispatch_stub_234(GLfloat u, GLfloat v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[234];
   ((void (APIENTRY *)(GLfloat u, GLfloat v)) _func)(u, v);
}

void APIENTRY shared_dispatch_stub_235(const GLfloat *u)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[235];
   ((void (APIENTRY *)(const GLfloat *u)) _func)(u);
}

void APIENTRY shared_dispatch_stub_236(GLenum mode, GLint i1, GLint i2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[236];
   ((void (APIENTRY *)(GLenum mode, GLint i1, GLint i2)) _func)(mode, i1, i2);
}

void APIENTRY shared_dispatch_stub_237(GLint i)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[237];
   ((void (APIENTRY *)(GLint i)) _func)(i);
}

void APIENTRY shared_dispatch_stub_238(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[238];
   ((void (APIENTRY *)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)) _func)(mode, i1, i2, j1, j2);
}

void APIENTRY shared_dispatch_stub_239(GLint i, GLint j)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[239];
   ((void (APIENTRY *)(GLint i, GLint j)) _func)(i, j);
}

void APIENTRY shared_dispatch_stub_240(GLenum func, GLclampf ref)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[240];
   ((void (APIENTRY *)(GLenum func, GLclampf ref)) _func)(func, ref);
}

void APIENTRY shared_dispatch_stub_241(GLenum sfactor, GLenum dfactor)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[241];
   ((void (APIENTRY *)(GLenum sfactor, GLenum dfactor)) _func)(sfactor, dfactor);
}

void APIENTRY shared_dispatch_stub_242(GLenum opcode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[242];
   ((void (APIENTRY *)(GLenum opcode)) _func)(opcode);
}

void APIENTRY shared_dispatch_stub_243(GLenum func, GLint ref, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[243];
   ((void (APIENTRY *)(GLenum func, GLint ref, GLuint mask)) _func)(func, ref, mask);
}

void APIENTRY shared_dispatch_stub_244(GLenum fail, GLenum zfail, GLenum zpass)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[244];
   ((void (APIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass)) _func)(fail, zfail, zpass);
}

void APIENTRY shared_dispatch_stub_245(GLenum func)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[245];
   ((void (APIENTRY *)(GLenum func)) _func)(func);
}

void APIENTRY shared_dispatch_stub_246(GLfloat xfactor, GLfloat yfactor)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[246];
   ((void (APIENTRY *)(GLfloat xfactor, GLfloat yfactor)) _func)(xfactor, yfactor);
}

void APIENTRY shared_dispatch_stub_247(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[247];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_248(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[248];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_249(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[249];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_250(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[250];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_251(GLenum map, GLsizei mapsize, const GLfloat *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[251];
   ((void (APIENTRY *)(GLenum map, GLsizei mapsize, const GLfloat *values)) _func)(map, mapsize, values);
}

void APIENTRY shared_dispatch_stub_252(GLenum map, GLsizei mapsize, const GLuint *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[252];
   ((void (APIENTRY *)(GLenum map, GLsizei mapsize, const GLuint *values)) _func)(map, mapsize, values);
}

void APIENTRY shared_dispatch_stub_253(GLenum map, GLsizei mapsize, const GLushort *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[253];
   ((void (APIENTRY *)(GLenum map, GLsizei mapsize, const GLushort *values)) _func)(map, mapsize, values);
}

void APIENTRY shared_dispatch_stub_254(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[254];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_255(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[255];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)) _func)(x, y, width, height, type);
}

void APIENTRY shared_dispatch_stub_256(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[256];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)) _func)(x, y, width, height, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_257(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[257];
   ((void (APIENTRY *)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(width, height, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_258(GLenum pname, GLboolean *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[258];
   ((void (APIENTRY *)(GLenum pname, GLboolean *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_259(GLenum plane, GLdouble *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[259];
   ((void (APIENTRY *)(GLenum plane, GLdouble *equation)) _func)(plane, equation);
}

void APIENTRY shared_dispatch_stub_260(GLenum pname, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[260];
   ((void (APIENTRY *)(GLenum pname, GLdouble *params)) _func)(pname, params);
}

GLenum APIENTRY shared_dispatch_stub_261(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[261];
   return ((GLenum (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_262(GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[262];
   ((void (APIENTRY *)(GLenum pname, GLfloat *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_263(GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[263];
   ((void (APIENTRY *)(GLenum pname, GLint *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_264(GLenum light, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[264];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfloat *params)) _func)(light, pname, params);
}

void APIENTRY shared_dispatch_stub_265(GLenum light, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[265];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLint *params)) _func)(light, pname, params);
}

void APIENTRY shared_dispatch_stub_266(GLenum target, GLenum query, GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[266];
   ((void (APIENTRY *)(GLenum target, GLenum query, GLdouble *v)) _func)(target, query, v);
}

void APIENTRY shared_dispatch_stub_267(GLenum target, GLenum query, GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[267];
   ((void (APIENTRY *)(GLenum target, GLenum query, GLfloat *v)) _func)(target, query, v);
}

void APIENTRY shared_dispatch_stub_268(GLenum target, GLenum query, GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[268];
   ((void (APIENTRY *)(GLenum target, GLenum query, GLint *v)) _func)(target, query, v);
}

void APIENTRY shared_dispatch_stub_269(GLenum face, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[269];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfloat *params)) _func)(face, pname, params);
}

void APIENTRY shared_dispatch_stub_270(GLenum face, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[270];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLint *params)) _func)(face, pname, params);
}

void APIENTRY shared_dispatch_stub_271(GLenum map, GLfloat *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[271];
   ((void (APIENTRY *)(GLenum map, GLfloat *values)) _func)(map, values);
}

void APIENTRY shared_dispatch_stub_272(GLenum map, GLuint *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[272];
   ((void (APIENTRY *)(GLenum map, GLuint *values)) _func)(map, values);
}

void APIENTRY shared_dispatch_stub_273(GLenum map, GLushort *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[273];
   ((void (APIENTRY *)(GLenum map, GLushort *values)) _func)(map, values);
}

void APIENTRY shared_dispatch_stub_274(GLubyte *mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[274];
   ((void (APIENTRY *)(GLubyte *mask)) _func)(mask);
}

const GLubyte * APIENTRY shared_dispatch_stub_275(GLenum name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[275];
   return ((const GLubyte * (APIENTRY *)(GLenum name)) _func)(name);
}

void APIENTRY shared_dispatch_stub_276(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[276];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_277(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[277];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_278(GLenum coord, GLenum pname, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[278];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLdouble *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_279(GLenum coord, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[279];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLfloat *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_280(GLenum coord, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[280];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLint *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_281(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[281];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)) _func)(target, level, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_282(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[282];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_283(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[283];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_284(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[284];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum pname, GLfloat *params)) _func)(target, level, pname, params);
}

void APIENTRY shared_dispatch_stub_285(GLenum target, GLint level, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[285];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum pname, GLint *params)) _func)(target, level, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_286(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[286];
   return ((GLboolean (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLboolean APIENTRY shared_dispatch_stub_287(GLuint list)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[287];
   return ((GLboolean (APIENTRY *)(GLuint list)) _func)(list);
}

void APIENTRY shared_dispatch_stub_288(GLclampd zNear, GLclampd zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[288];
   ((void (APIENTRY *)(GLclampd zNear, GLclampd zFar)) _func)(zNear, zFar);
}

void APIENTRY shared_dispatch_stub_289(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[289];
   ((void (APIENTRY *)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void APIENTRY shared_dispatch_stub_290(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[290];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_291(const GLfloat *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[291];
   ((void (APIENTRY *)(const GLfloat *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_292(const GLdouble *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[292];
   ((void (APIENTRY *)(const GLdouble *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_293(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[293];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_294(const GLfloat *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[294];
   ((void (APIENTRY *)(const GLfloat *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_295(const GLdouble *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[295];
   ((void (APIENTRY *)(const GLdouble *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_296(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[296];
   ((void (APIENTRY *)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void APIENTRY shared_dispatch_stub_297(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[297];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_298(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[298];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_299(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[299];
   ((void (APIENTRY *)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)) _func)(angle, x, y, z);
}

void APIENTRY shared_dispatch_stub_300(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[300];
   ((void (APIENTRY *)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)) _func)(angle, x, y, z);
}

void APIENTRY shared_dispatch_stub_301(GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[301];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_302(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[302];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_303(GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[303];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_304(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[304];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_305(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[305];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

void APIENTRY shared_dispatch_stub_306(GLint i)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[306];
   ((void (APIENTRY *)(GLint i)) _func)(i);
}

void APIENTRY shared_dispatch_stub_307(GLenum target, GLuint texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[307];
   ((void (APIENTRY *)(GLenum target, GLuint texture)) _func)(target, texture);
}

void APIENTRY shared_dispatch_stub_308(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[308];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_309(GLenum array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[309];
   ((void (APIENTRY *)(GLenum array)) _func)(array);
}

void APIENTRY shared_dispatch_stub_310(GLenum mode, GLint first, GLsizei count)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[310];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count)) _func)(mode, first, count);
}

void APIENTRY shared_dispatch_stub_311(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[311];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, count, type, indices);
}

void APIENTRY shared_dispatch_stub_312(GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[312];
   ((void (APIENTRY *)(GLsizei stride, const GLvoid *pointer)) _func)(stride, pointer);
}

void APIENTRY shared_dispatch_stub_313(GLenum array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[313];
   ((void (APIENTRY *)(GLenum array)) _func)(array);
}

void APIENTRY shared_dispatch_stub_314(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[314];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_315(GLubyte c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[315];
   ((void (APIENTRY *)(GLubyte c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_316(const GLubyte *c)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[316];
   ((void (APIENTRY *)(const GLubyte *c)) _func)(c);
}

void APIENTRY shared_dispatch_stub_317(GLenum format, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[317];
   ((void (APIENTRY *)(GLenum format, GLsizei stride, const GLvoid *pointer)) _func)(format, stride, pointer);
}

void APIENTRY shared_dispatch_stub_318(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[318];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_319(GLfloat factor, GLfloat units)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[319];
   ((void (APIENTRY *)(GLfloat factor, GLfloat units)) _func)(factor, units);
}

void APIENTRY shared_dispatch_stub_320(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[320];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_321(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[321];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

GLboolean APIENTRY shared_dispatch_stub_322(GLsizei n, const GLuint *textures, GLboolean *residences)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[322];
   return ((GLboolean (APIENTRY *)(GLsizei n, const GLuint *textures, GLboolean *residences)) _func)(n, textures, residences);
}

void APIENTRY shared_dispatch_stub_323(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[323];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)) _func)(target, level, internalformat, x, y, width, border);
}

void APIENTRY shared_dispatch_stub_324(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[324];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(target, level, internalformat, x, y, width, height, border);
}

void APIENTRY shared_dispatch_stub_325(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[325];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)) _func)(target, level, xoffset, x, y, width);
}

void APIENTRY shared_dispatch_stub_326(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[326];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, x, y, width, height);
}

void APIENTRY shared_dispatch_stub_327(GLsizei n, const GLuint *textures)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[327];
   ((void (APIENTRY *)(GLsizei n, const GLuint *textures)) _func)(n, textures);
}

void APIENTRY shared_dispatch_stub_328(GLsizei n, GLuint *textures)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[328];
   ((void (APIENTRY *)(GLsizei n, GLuint *textures)) _func)(n, textures);
}

void APIENTRY shared_dispatch_stub_329(GLenum pname, GLvoid **params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[329];
   ((void (APIENTRY *)(GLenum pname, GLvoid **params)) _func)(pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_330(GLuint texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[330];
   return ((GLboolean (APIENTRY *)(GLuint texture)) _func)(texture);
}

void APIENTRY shared_dispatch_stub_331(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[331];
   ((void (APIENTRY *)(GLsizei n, const GLuint *textures, const GLclampf *priorities)) _func)(n, textures, priorities);
}

void APIENTRY shared_dispatch_stub_332(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[332];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, width, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_333(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[333];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_334(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[334];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_335(GLbitfield mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[335];
   ((void (APIENTRY *)(GLbitfield mask)) _func)(mask);
}

void APIENTRY shared_dispatch_stub_336(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[336];
   ((void (APIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_337(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[337];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_338(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[338];
   ((void (APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, start, end, count, type, indices);
}

void APIENTRY shared_dispatch_stub_339(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[339];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)) _func)(target, internalformat, width, format, type, table);
}

void APIENTRY shared_dispatch_stub_340(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[340];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_341(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[341];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_342(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[342];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)) _func)(target, internalformat, x, y, width);
}

void APIENTRY shared_dispatch_stub_343(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[343];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLenum type, GLvoid *table)) _func)(target, format, type, table);
}

void APIENTRY shared_dispatch_stub_344(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[344];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_345(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[345];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_346(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[346];
   ((void (APIENTRY *)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)) _func)(target, start, count, format, type, data);
}

void APIENTRY shared_dispatch_stub_347(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[347];
   ((void (APIENTRY *)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)) _func)(target, start, x, y, width);
}

void APIENTRY shared_dispatch_stub_348(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[348];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)) _func)(target, internalformat, width, format, type, image);
}

void APIENTRY shared_dispatch_stub_349(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[349];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)) _func)(target, internalformat, width, height, format, type, image);
}

void APIENTRY shared_dispatch_stub_350(GLenum target, GLenum pname, GLfloat params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[350];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_351(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[351];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_352(GLenum target, GLenum pname, GLint params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[352];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_353(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[353];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_354(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[354];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)) _func)(target, internalformat, x, y, width);
}

void APIENTRY shared_dispatch_stub_355(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[355];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, internalformat, x, y, width, height);
}

void APIENTRY shared_dispatch_stub_356(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[356];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLenum type, GLvoid *image)) _func)(target, format, type, image);
}

void APIENTRY shared_dispatch_stub_357(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[357];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_358(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[358];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_359(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[359];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)) _func)(target, format, type, row, column, span);
}

void APIENTRY shared_dispatch_stub_360(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[360];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)) _func)(target, internalformat, width, height, format, type, row, column);
}

void APIENTRY shared_dispatch_stub_361(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[361];
   ((void (APIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)) _func)(target, reset, format, type, values);
}

void APIENTRY shared_dispatch_stub_362(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[362];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_363(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[363];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_364(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[364];
   ((void (APIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)) _func)(target, reset, format, type, values);
}

void APIENTRY shared_dispatch_stub_365(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[365];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_366(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[366];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_367(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[367];
   ((void (APIENTRY *)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)) _func)(target, width, internalformat, sink);
}

void APIENTRY shared_dispatch_stub_368(GLenum target, GLenum internalformat, GLboolean sink)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[368];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLboolean sink)) _func)(target, internalformat, sink);
}

void APIENTRY shared_dispatch_stub_369(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[369];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

void APIENTRY shared_dispatch_stub_370(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[370];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

void APIENTRY shared_dispatch_stub_371(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[371];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_372(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[372];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void APIENTRY shared_dispatch_stub_373(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[373];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void APIENTRY shared_dispatch_stub_374(GLenum texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[374];
   ((void (APIENTRY *)(GLenum texture)) _func)(texture);
}

void APIENTRY shared_dispatch_stub_375(GLenum texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[375];
   ((void (APIENTRY *)(GLenum texture)) _func)(texture);
}

void APIENTRY shared_dispatch_stub_376(GLenum target, GLdouble s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[376];
   ((void (APIENTRY *)(GLenum target, GLdouble s)) _func)(target, s);
}

void APIENTRY shared_dispatch_stub_377(GLenum target, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[377];
   ((void (APIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_378(GLenum target, GLfloat s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[378];
   ((void (APIENTRY *)(GLenum target, GLfloat s)) _func)(target, s);
}

void APIENTRY shared_dispatch_stub_379(GLenum target, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[379];
   ((void (APIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_380(GLenum target, GLint s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[380];
   ((void (APIENTRY *)(GLenum target, GLint s)) _func)(target, s);
}

void APIENTRY shared_dispatch_stub_381(GLenum target, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[381];
   ((void (APIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_382(GLenum target, GLshort s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[382];
   ((void (APIENTRY *)(GLenum target, GLshort s)) _func)(target, s);
}

void APIENTRY shared_dispatch_stub_383(GLenum target, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[383];
   ((void (APIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_384(GLenum target, GLdouble s, GLdouble t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[384];
   ((void (APIENTRY *)(GLenum target, GLdouble s, GLdouble t)) _func)(target, s, t);
}

void APIENTRY shared_dispatch_stub_385(GLenum target, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[385];
   ((void (APIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_386(GLenum target, GLfloat s, GLfloat t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[386];
   ((void (APIENTRY *)(GLenum target, GLfloat s, GLfloat t)) _func)(target, s, t);
}

void APIENTRY shared_dispatch_stub_387(GLenum target, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[387];
   ((void (APIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_388(GLenum target, GLint s, GLint t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[388];
   ((void (APIENTRY *)(GLenum target, GLint s, GLint t)) _func)(target, s, t);
}

void APIENTRY shared_dispatch_stub_389(GLenum target, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[389];
   ((void (APIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_390(GLenum target, GLshort s, GLshort t)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[390];
   ((void (APIENTRY *)(GLenum target, GLshort s, GLshort t)) _func)(target, s, t);
}

void APIENTRY shared_dispatch_stub_391(GLenum target, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[391];
   ((void (APIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_392(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[392];
   ((void (APIENTRY *)(GLenum target, GLdouble s, GLdouble t, GLdouble r)) _func)(target, s, t, r);
}

void APIENTRY shared_dispatch_stub_393(GLenum target, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[393];
   ((void (APIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_394(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[394];
   ((void (APIENTRY *)(GLenum target, GLfloat s, GLfloat t, GLfloat r)) _func)(target, s, t, r);
}

void APIENTRY shared_dispatch_stub_395(GLenum target, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[395];
   ((void (APIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_396(GLenum target, GLint s, GLint t, GLint r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[396];
   ((void (APIENTRY *)(GLenum target, GLint s, GLint t, GLint r)) _func)(target, s, t, r);
}

void APIENTRY shared_dispatch_stub_397(GLenum target, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[397];
   ((void (APIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_398(GLenum target, GLshort s, GLshort t, GLshort r)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[398];
   ((void (APIENTRY *)(GLenum target, GLshort s, GLshort t, GLshort r)) _func)(target, s, t, r);
}

void APIENTRY shared_dispatch_stub_399(GLenum target, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[399];
   ((void (APIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_400(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[400];
   ((void (APIENTRY *)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)) _func)(target, s, t, r, q);
}

void APIENTRY shared_dispatch_stub_401(GLenum target, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[401];
   ((void (APIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_402(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[402];
   ((void (APIENTRY *)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) _func)(target, s, t, r, q);
}

void APIENTRY shared_dispatch_stub_403(GLenum target, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[403];
   ((void (APIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_404(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[404];
   ((void (APIENTRY *)(GLenum target, GLint s, GLint t, GLint r, GLint q)) _func)(target, s, t, r, q);
}

void APIENTRY shared_dispatch_stub_405(GLenum target, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[405];
   ((void (APIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_406(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[406];
   ((void (APIENTRY *)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)) _func)(target, s, t, r, q);
}

void APIENTRY shared_dispatch_stub_407(GLenum target, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[407];
   ((void (APIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void APIENTRY shared_dispatch_stub_408(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[408];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, border, imageSize, data);
}

void APIENTRY shared_dispatch_stub_409(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[409];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, border, imageSize, data);
}

void APIENTRY shared_dispatch_stub_410(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[410];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void APIENTRY shared_dispatch_stub_411(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[411];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, width, format, imageSize, data);
}

void APIENTRY shared_dispatch_stub_412(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[412];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void APIENTRY shared_dispatch_stub_413(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[413];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void APIENTRY shared_dispatch_stub_414(GLenum target, GLint level, GLvoid *img)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[414];
   ((void (APIENTRY *)(GLenum target, GLint level, GLvoid *img)) _func)(target, level, img);
}

void APIENTRY shared_dispatch_stub_415(const GLdouble *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[415];
   ((void (APIENTRY *)(const GLdouble *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_416(const GLfloat *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[416];
   ((void (APIENTRY *)(const GLfloat *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_417(const GLdouble *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[417];
   ((void (APIENTRY *)(const GLdouble *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_418(const GLfloat *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[418];
   ((void (APIENTRY *)(const GLfloat *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_419(GLclampf value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[419];
   ((void (APIENTRY *)(GLclampf value, GLboolean invert)) _func)(value, invert);
}

void APIENTRY shared_dispatch_stub_420(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[420];
   ((void (APIENTRY *)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) _func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void APIENTRY shared_dispatch_stub_421(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[421];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_422(GLdouble coord)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[422];
   ((void (APIENTRY *)(GLdouble coord)) _func)(coord);
}

void APIENTRY shared_dispatch_stub_423(const GLdouble *coord)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[423];
   ((void (APIENTRY *)(const GLdouble *coord)) _func)(coord);
}

void APIENTRY shared_dispatch_stub_424(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[424];
   ((void (APIENTRY *)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

void APIENTRY shared_dispatch_stub_425(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[425];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_426(GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[426];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_427(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[427];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_428(GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[428];
   ((void (APIENTRY *)(GLenum pname, const GLint *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_429(GLbyte red, GLbyte green, GLbyte blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[429];
   ((void (APIENTRY *)(GLbyte red, GLbyte green, GLbyte blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_430(const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[430];
   ((void (APIENTRY *)(const GLbyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_431(GLdouble red, GLdouble green, GLdouble blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[431];
   ((void (APIENTRY *)(GLdouble red, GLdouble green, GLdouble blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_432(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[432];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_433(GLint red, GLint green, GLint blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[433];
   ((void (APIENTRY *)(GLint red, GLint green, GLint blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_434(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[434];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_435(GLshort red, GLshort green, GLshort blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[435];
   ((void (APIENTRY *)(GLshort red, GLshort green, GLshort blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_436(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[436];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_437(GLubyte red, GLubyte green, GLubyte blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[437];
   ((void (APIENTRY *)(GLubyte red, GLubyte green, GLubyte blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_438(const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[438];
   ((void (APIENTRY *)(const GLubyte *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_439(GLuint red, GLuint green, GLuint blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[439];
   ((void (APIENTRY *)(GLuint red, GLuint green, GLuint blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_440(const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[440];
   ((void (APIENTRY *)(const GLuint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_441(GLushort red, GLushort green, GLushort blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[441];
   ((void (APIENTRY *)(GLushort red, GLushort green, GLushort blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_442(const GLushort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[442];
   ((void (APIENTRY *)(const GLushort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_443(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[443];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_444(GLdouble x, GLdouble y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[444];
   ((void (APIENTRY *)(GLdouble x, GLdouble y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_445(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[445];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_446(GLfloat x, GLfloat y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[446];
   ((void (APIENTRY *)(GLfloat x, GLfloat y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_447(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[447];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_448(GLint x, GLint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[448];
   ((void (APIENTRY *)(GLint x, GLint y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_449(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[449];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_450(GLshort x, GLshort y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[450];
   ((void (APIENTRY *)(GLshort x, GLshort y)) _func)(x, y);
}

void APIENTRY shared_dispatch_stub_451(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[451];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_452(GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[452];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_453(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[453];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_454(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[454];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_455(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[455];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_456(GLint x, GLint y, GLint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[456];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_457(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[457];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_458(GLshort x, GLshort y, GLshort z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[458];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_459(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[459];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_460(GLenum target, GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[460];
   ((void (APIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

void APIENTRY shared_dispatch_stub_461(GLenum target, GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[461];
   ((void (APIENTRY *)(GLenum target, GLuint buffer)) _func)(target, buffer);
}

void APIENTRY shared_dispatch_stub_462(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[462];
   ((void (APIENTRY *)(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)) _func)(target, size, data, usage);
}

void APIENTRY shared_dispatch_stub_463(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[463];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)) _func)(target, offset, size, data);
}

void APIENTRY shared_dispatch_stub_464(GLsizei n, const GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[464];
   ((void (APIENTRY *)(GLsizei n, const GLuint *buffer)) _func)(n, buffer);
}

void APIENTRY shared_dispatch_stub_465(GLsizei n, const GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[465];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

void APIENTRY shared_dispatch_stub_466(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[466];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

void APIENTRY shared_dispatch_stub_467(GLsizei n, GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[467];
   ((void (APIENTRY *)(GLsizei n, GLuint *buffer)) _func)(n, buffer);
}

void APIENTRY shared_dispatch_stub_468(GLsizei n, GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[468];
   ((void (APIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

void APIENTRY shared_dispatch_stub_469(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[469];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_470(GLenum target, GLenum pname, GLvoid **params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[470];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLvoid **params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_471(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[471];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)) _func)(target, offset, size, data);
}

void APIENTRY shared_dispatch_stub_472(GLuint id, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[472];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLint *params)) _func)(id, pname, params);
}

void APIENTRY shared_dispatch_stub_473(GLuint id, GLenum pname, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[473];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLuint *params)) _func)(id, pname, params);
}

void APIENTRY shared_dispatch_stub_474(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[474];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_475(GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[475];
   return ((GLboolean (APIENTRY *)(GLuint buffer)) _func)(buffer);
}

GLboolean APIENTRY shared_dispatch_stub_476(GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[476];
   return ((GLboolean (APIENTRY *)(GLuint id)) _func)(id);
}

GLvoid * APIENTRY shared_dispatch_stub_477(GLenum target, GLenum access)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[477];
   return ((GLvoid * (APIENTRY *)(GLenum target, GLenum access)) _func)(target, access);
}

GLboolean APIENTRY shared_dispatch_stub_478(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[478];
   return ((GLboolean (APIENTRY *)(GLenum target)) _func)(target);
}

void APIENTRY shared_dispatch_stub_479(GLuint program, GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[479];
   ((void (APIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

void APIENTRY shared_dispatch_stub_480(GLuint program, GLuint index, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[480];
   ((void (APIENTRY *)(GLuint program, GLuint index, const GLchar *name)) _func)(program, index, name);
}

void APIENTRY shared_dispatch_stub_481(GLenum modeRGB, GLenum modeA)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[481];
   ((void (APIENTRY *)(GLenum modeRGB, GLenum modeA)) _func)(modeRGB, modeA);
}

void APIENTRY shared_dispatch_stub_482(GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[482];
   ((void (APIENTRY *)(GLuint shader)) _func)(shader);
}

GLuint APIENTRY shared_dispatch_stub_483(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[483];
   return ((GLuint (APIENTRY *)(void)) _func)();
}

GLuint APIENTRY shared_dispatch_stub_484(GLenum type)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[484];
   return ((GLuint (APIENTRY *)(GLenum type)) _func)(type);
}

void APIENTRY shared_dispatch_stub_485(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[485];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

void APIENTRY shared_dispatch_stub_486(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[486];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

void APIENTRY shared_dispatch_stub_487(GLuint program, GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[487];
   ((void (APIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

void APIENTRY shared_dispatch_stub_488(GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[488];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

void APIENTRY shared_dispatch_stub_489(GLsizei n, const GLenum *bufs)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[489];
   ((void (APIENTRY *)(GLsizei n, const GLenum *bufs)) _func)(n, bufs);
}

void APIENTRY shared_dispatch_stub_490(GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[490];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

void APIENTRY shared_dispatch_stub_491(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[491];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

void APIENTRY shared_dispatch_stub_492(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[492];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

void APIENTRY shared_dispatch_stub_493(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[493];
   ((void (APIENTRY *)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)) _func)(program, maxCount, count, obj);
}

GLint APIENTRY shared_dispatch_stub_494(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[494];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void APIENTRY shared_dispatch_stub_495(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[495];
   ((void (APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(program, bufSize, length, infoLog);
}

void APIENTRY shared_dispatch_stub_496(GLuint program, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[496];
   ((void (APIENTRY *)(GLuint program, GLenum pname, GLint *params)) _func)(program, pname, params);
}

void APIENTRY shared_dispatch_stub_497(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[497];
   ((void (APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(shader, bufSize, length, infoLog);
}

void APIENTRY shared_dispatch_stub_498(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[498];
   ((void (APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)) _func)(shader, bufSize, length, source);
}

void APIENTRY shared_dispatch_stub_499(GLuint shader, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[499];
   ((void (APIENTRY *)(GLuint shader, GLenum pname, GLint *params)) _func)(shader, pname, params);
}

GLint APIENTRY shared_dispatch_stub_500(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[500];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void APIENTRY shared_dispatch_stub_501(GLuint program, GLint location, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[501];
   ((void (APIENTRY *)(GLuint program, GLint location, GLfloat *params)) _func)(program, location, params);
}

void APIENTRY shared_dispatch_stub_502(GLuint program, GLint location, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[502];
   ((void (APIENTRY *)(GLuint program, GLint location, GLint *params)) _func)(program, location, params);
}

void APIENTRY shared_dispatch_stub_503(GLuint index, GLenum pname, GLvoid **pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[503];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLvoid **pointer)) _func)(index, pname, pointer);
}

void APIENTRY shared_dispatch_stub_504(GLuint index, GLenum pname, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[504];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLdouble *params)) _func)(index, pname, params);
}

void APIENTRY shared_dispatch_stub_505(GLuint index, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[505];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLfloat *params)) _func)(index, pname, params);
}

void APIENTRY shared_dispatch_stub_506(GLuint index, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[506];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_507(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[507];
   return ((GLboolean (APIENTRY *)(GLuint program)) _func)(program);
}

GLboolean APIENTRY shared_dispatch_stub_508(GLuint shader)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[508];
   return ((GLboolean (APIENTRY *)(GLuint shader)) _func)(shader);
}

void APIENTRY shared_dispatch_stub_509(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[509];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

void APIENTRY shared_dispatch_stub_510(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[510];
   ((void (APIENTRY *)(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)) _func)(shader, count, string, length);
}

void APIENTRY shared_dispatch_stub_511(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[511];
   ((void (APIENTRY *)(GLenum face, GLenum func, GLint ref, GLuint mask)) _func)(face, func, ref, mask);
}

void APIENTRY shared_dispatch_stub_512(GLenum face, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[512];
   ((void (APIENTRY *)(GLenum face, GLuint mask)) _func)(face, mask);
}

void APIENTRY shared_dispatch_stub_513(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[513];
   ((void (APIENTRY *)(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)) _func)(face, sfail, zfail, zpass);
}

void APIENTRY shared_dispatch_stub_514(GLint location, GLfloat v0)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[514];
   ((void (APIENTRY *)(GLint location, GLfloat v0)) _func)(location, v0);
}

void APIENTRY shared_dispatch_stub_515(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[515];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_516(GLint location, GLint v0)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[516];
   ((void (APIENTRY *)(GLint location, GLint v0)) _func)(location, v0);
}

void APIENTRY shared_dispatch_stub_517(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[517];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_518(GLint location, GLfloat v0, GLfloat v1)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[518];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1)) _func)(location, v0, v1);
}

void APIENTRY shared_dispatch_stub_519(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[519];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_520(GLint location, GLint v0, GLint v1)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[520];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1)) _func)(location, v0, v1);
}

void APIENTRY shared_dispatch_stub_521(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[521];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_522(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[522];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)) _func)(location, v0, v1, v2);
}

void APIENTRY shared_dispatch_stub_523(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[523];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_524(GLint location, GLint v0, GLint v1, GLint v2)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[524];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2)) _func)(location, v0, v1, v2);
}

void APIENTRY shared_dispatch_stub_525(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[525];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_526(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[526];
   ((void (APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)) _func)(location, v0, v1, v2, v3);
}

void APIENTRY shared_dispatch_stub_527(GLint location, GLsizei count, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[527];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_528(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[528];
   ((void (APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)) _func)(location, v0, v1, v2, v3);
}

void APIENTRY shared_dispatch_stub_529(GLint location, GLsizei count, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[529];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_530(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[530];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_531(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[531];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_532(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[532];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_533(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[533];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

void APIENTRY shared_dispatch_stub_534(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[534];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

void APIENTRY shared_dispatch_stub_535(GLuint index, GLdouble x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[535];
   ((void (APIENTRY *)(GLuint index, GLdouble x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_536(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[536];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_537(GLuint index, GLshort x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[537];
   ((void (APIENTRY *)(GLuint index, GLshort x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_538(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[538];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_539(GLuint index, GLdouble x, GLdouble y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[539];
   ((void (APIENTRY *)(GLuint index, GLdouble x, GLdouble y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_540(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[540];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_541(GLuint index, GLshort x, GLshort y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[541];
   ((void (APIENTRY *)(GLuint index, GLshort x, GLshort y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_542(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[542];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_543(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[543];
   ((void (APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_544(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[544];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_545(GLuint index, GLshort x, GLshort y, GLshort z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[545];
   ((void (APIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_546(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[546];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_547(GLuint index, const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[547];
   ((void (APIENTRY *)(GLuint index, const GLbyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_548(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[548];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_549(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[549];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_550(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[550];
   ((void (APIENTRY *)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_551(GLuint index, const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[551];
   ((void (APIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_552(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[552];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_553(GLuint index, const GLushort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[553];
   ((void (APIENTRY *)(GLuint index, const GLushort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_554(GLuint index, const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[554];
   ((void (APIENTRY *)(GLuint index, const GLbyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_555(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[555];
   ((void (APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_556(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[556];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_557(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[557];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_558(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[558];
   ((void (APIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_559(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[559];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_560(GLuint index, const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[560];
   ((void (APIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_561(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[561];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_562(GLuint index, const GLushort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[562];
   ((void (APIENTRY *)(GLuint index, const GLushort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_563(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[563];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, normalized, stride, pointer);
}

void APIENTRY shared_dispatch_stub_564(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[564];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_565(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[565];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_566(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[566];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_567(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[567];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_568(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[568];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_569(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[569];
   ((void (APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void APIENTRY shared_dispatch_stub_570(GLuint query, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[570];
   ((void (APIENTRY *)(GLuint query, GLenum mode)) _func)(query, mode);
}

void APIENTRY shared_dispatch_stub_571(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[571];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_572(GLenum target, GLuint index, GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[572];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer)) _func)(target, index, buffer);
}

void APIENTRY shared_dispatch_stub_573(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[573];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, index, buffer, offset, size);
}

void APIENTRY shared_dispatch_stub_574(GLuint program, GLuint colorNumber, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[574];
   ((void (APIENTRY *)(GLuint program, GLuint colorNumber, const GLchar *name)) _func)(program, colorNumber, name);
}

void APIENTRY shared_dispatch_stub_575(GLenum target, GLenum clamp)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[575];
   ((void (APIENTRY *)(GLenum target, GLenum clamp)) _func)(target, clamp);
}

void APIENTRY shared_dispatch_stub_576(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[576];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)) _func)(buffer, drawbuffer, depth, stencil);
}

void APIENTRY shared_dispatch_stub_577(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[577];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLfloat *value)) _func)(buffer, drawbuffer, value);
}

void APIENTRY shared_dispatch_stub_578(GLenum buffer, GLint drawbuffer, const GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[578];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLint *value)) _func)(buffer, drawbuffer, value);
}

void APIENTRY shared_dispatch_stub_579(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[579];
   ((void (APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLuint *value)) _func)(buffer, drawbuffer, value);
}

void APIENTRY shared_dispatch_stub_580(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[580];
   ((void (APIENTRY *)(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)) _func)(buf, r, g, b, a);
}

void APIENTRY shared_dispatch_stub_581(GLenum target, GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[581];
   ((void (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void APIENTRY shared_dispatch_stub_582(GLenum target, GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[582];
   ((void (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void APIENTRY shared_dispatch_stub_583(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[583];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_584(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[584];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_585(GLenum value, GLuint index, GLboolean *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[585];
   ((void (APIENTRY *)(GLenum value, GLuint index, GLboolean *data)) _func)(value, index, data);
}

GLint APIENTRY shared_dispatch_stub_586(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[586];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void APIENTRY shared_dispatch_stub_587(GLenum value, GLuint index, GLint *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[587];
   ((void (APIENTRY *)(GLenum value, GLuint index, GLint *data)) _func)(value, index, data);
}

const GLubyte * APIENTRY shared_dispatch_stub_588(GLenum name, GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[588];
   return ((const GLubyte * (APIENTRY *)(GLenum name, GLuint index)) _func)(name, index);
}

void APIENTRY shared_dispatch_stub_589(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[589];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_590(GLenum target, GLenum pname, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[590];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLuint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_591(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[591];
   ((void (APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

void APIENTRY shared_dispatch_stub_592(GLuint program, GLint location, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[592];
   ((void (APIENTRY *)(GLuint program, GLint location, GLuint *params)) _func)(program, location, params);
}

void APIENTRY shared_dispatch_stub_593(GLuint index, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[593];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

void APIENTRY shared_dispatch_stub_594(GLuint index, GLenum pname, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[594];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLuint *params)) _func)(index, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_595(GLenum target, GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[595];
   return ((GLboolean (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void APIENTRY shared_dispatch_stub_596(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[596];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_597(GLenum target, GLenum pname, const GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[597];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLuint *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_598(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[598];
   ((void (APIENTRY *)(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)) _func)(program, count, varyings, bufferMode);
}

void APIENTRY shared_dispatch_stub_599(GLint location, GLuint x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[599];
   ((void (APIENTRY *)(GLint location, GLuint x)) _func)(location, x);
}

void APIENTRY shared_dispatch_stub_600(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[600];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_601(GLint location, GLuint x, GLuint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[601];
   ((void (APIENTRY *)(GLint location, GLuint x, GLuint y)) _func)(location, x, y);
}

void APIENTRY shared_dispatch_stub_602(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[602];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_603(GLint location, GLuint x, GLuint y, GLuint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[603];
   ((void (APIENTRY *)(GLint location, GLuint x, GLuint y, GLuint z)) _func)(location, x, y, z);
}

void APIENTRY shared_dispatch_stub_604(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[604];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_605(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[605];
   ((void (APIENTRY *)(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(location, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_606(GLint location, GLsizei count, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[606];
   ((void (APIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void APIENTRY shared_dispatch_stub_607(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[607];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_608(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[608];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_609(GLuint index, const GLbyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[609];
   ((void (APIENTRY *)(GLuint index, const GLbyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_610(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[610];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_611(GLuint index, const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[611];
   ((void (APIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_612(GLuint index, const GLushort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[612];
   ((void (APIENTRY *)(GLuint index, const GLushort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_613(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[613];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_614(GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[614];
   ((void (APIENTRY *)(GLuint index)) _func)(index);
}

void APIENTRY shared_dispatch_stub_615(GLenum target, GLenum internalFormat, GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[615];
   ((void (APIENTRY *)(GLenum target, GLenum internalFormat, GLuint buffer)) _func)(target, internalFormat, buffer);
}

void APIENTRY shared_dispatch_stub_616(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[616];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level)) _func)(target, attachment, texture, level);
}

void APIENTRY shared_dispatch_stub_617(GLenum target, GLenum pname, GLint64 *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[617];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint64 *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_618(GLenum cap, GLuint index, GLint64 *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[618];
   ((void (APIENTRY *)(GLenum cap, GLuint index, GLint64 *data)) _func)(cap, index, data);
}

void APIENTRY shared_dispatch_stub_619(GLuint index, GLuint divisor)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[619];
   ((void (APIENTRY *)(GLuint index, GLuint divisor)) _func)(index, divisor);
}

void APIENTRY shared_dispatch_stub_620(GLenum target, GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[620];
   ((void (APIENTRY *)(GLenum target, GLuint program)) _func)(target, program);
}

void APIENTRY shared_dispatch_stub_621(GLsizei n, const GLuint *programs)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[621];
   ((void (APIENTRY *)(GLsizei n, const GLuint *programs)) _func)(n, programs);
}

void APIENTRY shared_dispatch_stub_622(GLsizei n, GLuint *programs)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[622];
   ((void (APIENTRY *)(GLsizei n, GLuint *programs)) _func)(n, programs);
}

void APIENTRY shared_dispatch_stub_623(GLenum target, GLuint index, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[623];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLdouble *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_624(GLenum target, GLuint index, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[624];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLfloat *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_625(GLenum target, GLuint index, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[625];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLdouble *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_626(GLenum target, GLuint index, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[626];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLfloat *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_627(GLenum target, GLenum pname, GLvoid *string)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[627];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLvoid *string)) _func)(target, pname, string);
}

void APIENTRY shared_dispatch_stub_628(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[628];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_629(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[629];
   return ((GLboolean (APIENTRY *)(GLuint program)) _func)(program);
}

void APIENTRY shared_dispatch_stub_630(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[630];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(target, index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_631(GLenum target, GLuint index, const GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[631];
   ((void (APIENTRY *)(GLenum target, GLuint index, const GLdouble *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_632(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[632];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(target, index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_633(GLenum target, GLuint index, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[633];
   ((void (APIENTRY *)(GLenum target, GLuint index, const GLfloat *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_634(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[634];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(target, index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_635(GLenum target, GLuint index, const GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[635];
   ((void (APIENTRY *)(GLenum target, GLuint index, const GLdouble *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_636(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[636];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(target, index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_637(GLenum target, GLuint index, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[637];
   ((void (APIENTRY *)(GLenum target, GLuint index, const GLfloat *params)) _func)(target, index, params);
}

void APIENTRY shared_dispatch_stub_638(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[638];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLsizei len, const GLvoid *string)) _func)(target, format, len, string);
}

void APIENTRY shared_dispatch_stub_639(GLuint index, GLfloat x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[639];
   ((void (APIENTRY *)(GLuint index, GLfloat x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_640(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[640];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_641(GLuint index, GLfloat x, GLfloat y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[641];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_642(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[642];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_643(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[643];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_644(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[644];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_645(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[645];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_646(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[646];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_647(GLhandleARB containerObj, GLhandleARB obj)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[647];
   ((void (APIENTRY *)(GLhandleARB containerObj, GLhandleARB obj)) _func)(containerObj, obj);
}

GLhandleARB APIENTRY shared_dispatch_stub_648(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[648];
   return ((GLhandleARB (APIENTRY *)(void)) _func)();
}

GLhandleARB APIENTRY shared_dispatch_stub_649(GLenum shaderType)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[649];
   return ((GLhandleARB (APIENTRY *)(GLenum shaderType)) _func)(shaderType);
}

void APIENTRY shared_dispatch_stub_650(GLhandleARB obj)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[650];
   ((void (APIENTRY *)(GLhandleARB obj)) _func)(obj);
}

void APIENTRY shared_dispatch_stub_651(GLhandleARB containerObj, GLhandleARB attachedObj)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[651];
   ((void (APIENTRY *)(GLhandleARB containerObj, GLhandleARB attachedObj)) _func)(containerObj, attachedObj);
}

void APIENTRY shared_dispatch_stub_652(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[652];
   ((void (APIENTRY *)(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog)) _func)(containerObj, maxLength, length, infoLog);
}

GLhandleARB APIENTRY shared_dispatch_stub_653(GLenum pname)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[653];
   return ((GLhandleARB (APIENTRY *)(GLenum pname)) _func)(pname);
}

void APIENTRY shared_dispatch_stub_654(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[654];
   ((void (APIENTRY *)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)) _func)(obj, maxLength, length, infoLog);
}

void APIENTRY shared_dispatch_stub_655(GLhandleARB obj, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[655];
   ((void (APIENTRY *)(GLhandleARB obj, GLenum pname, GLfloat *params)) _func)(obj, pname, params);
}

void APIENTRY shared_dispatch_stub_656(GLhandleARB obj, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[656];
   ((void (APIENTRY *)(GLhandleARB obj, GLenum pname, GLint *params)) _func)(obj, pname, params);
}

void APIENTRY shared_dispatch_stub_657(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[657];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

void APIENTRY shared_dispatch_stub_658(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[658];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)) _func)(mode, count, type, indices, primcount);
}

void APIENTRY shared_dispatch_stub_659(GLenum target, GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[659];
   ((void (APIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

void APIENTRY shared_dispatch_stub_660(GLenum target, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[660];
   ((void (APIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

void APIENTRY shared_dispatch_stub_661(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[661];
   ((void (APIENTRY *)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)) _func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

GLenum APIENTRY shared_dispatch_stub_662(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[662];
   return ((GLenum (APIENTRY *)(GLenum target)) _func)(target);
}

void APIENTRY shared_dispatch_stub_663(GLsizei n, const GLuint *framebuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[663];
   ((void (APIENTRY *)(GLsizei n, const GLuint *framebuffers)) _func)(n, framebuffers);
}

void APIENTRY shared_dispatch_stub_664(GLsizei n, const GLuint *renderbuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[664];
   ((void (APIENTRY *)(GLsizei n, const GLuint *renderbuffers)) _func)(n, renderbuffers);
}

void APIENTRY shared_dispatch_stub_665(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[665];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(target, attachment, renderbuffertarget, renderbuffer);
}

void APIENTRY shared_dispatch_stub_666(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[666];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

void APIENTRY shared_dispatch_stub_667(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[667];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

void APIENTRY shared_dispatch_stub_668(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[668];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)) _func)(target, attachment, textarget, texture, level, zoffset);
}

void APIENTRY shared_dispatch_stub_669(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[669];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)) _func)(target, attachment, texture, level, layer);
}

void APIENTRY shared_dispatch_stub_670(GLsizei n, GLuint *framebuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[670];
   ((void (APIENTRY *)(GLsizei n, GLuint *framebuffers)) _func)(n, framebuffers);
}

void APIENTRY shared_dispatch_stub_671(GLsizei n, GLuint *renderbuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[671];
   ((void (APIENTRY *)(GLsizei n, GLuint *renderbuffers)) _func)(n, renderbuffers);
}

void APIENTRY shared_dispatch_stub_672(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[672];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

void APIENTRY shared_dispatch_stub_673(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[673];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum pname, GLint *params)) _func)(target, attachment, pname, params);
}

void APIENTRY shared_dispatch_stub_674(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[674];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_675(GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[675];
   return ((GLboolean (APIENTRY *)(GLuint framebuffer)) _func)(framebuffer);
}

GLboolean APIENTRY shared_dispatch_stub_676(GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[676];
   return ((GLboolean (APIENTRY *)(GLuint renderbuffer)) _func)(renderbuffer);
}

void APIENTRY shared_dispatch_stub_677(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[677];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, internalformat, width, height);
}

void APIENTRY shared_dispatch_stub_678(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[678];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, samples, internalformat, width, height);
}

void APIENTRY shared_dispatch_stub_679(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[679];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)) _func)(target, attachment, texture, level, face);
}

void APIENTRY shared_dispatch_stub_680(GLenum target, GLintptr offset, GLsizeiptr length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[680];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length)) _func)(target, offset, length);
}

GLvoid * APIENTRY shared_dispatch_stub_681(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[681];
   return ((GLvoid * (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)) _func)(target, offset, length, access);
}

void APIENTRY shared_dispatch_stub_682(GLuint array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[682];
   ((void (APIENTRY *)(GLuint array)) _func)(array);
}

void APIENTRY shared_dispatch_stub_683(GLsizei n, const GLuint *arrays)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[683];
   ((void (APIENTRY *)(GLsizei n, const GLuint *arrays)) _func)(n, arrays);
}

void APIENTRY shared_dispatch_stub_684(GLsizei n, GLuint *arrays)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[684];
   ((void (APIENTRY *)(GLsizei n, GLuint *arrays)) _func)(n, arrays);
}

GLboolean APIENTRY shared_dispatch_stub_685(GLuint array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[685];
   return ((GLboolean (APIENTRY *)(GLuint array)) _func)(array);
}

void APIENTRY shared_dispatch_stub_686(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[686];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)) _func)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

void APIENTRY shared_dispatch_stub_687(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[687];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)) _func)(program, uniformBlockIndex, pname, params);
}

void APIENTRY shared_dispatch_stub_688(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[688];
   ((void (APIENTRY *)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)) _func)(program, uniformIndex, bufSize, length, uniformName);
}

void APIENTRY shared_dispatch_stub_689(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[689];
   ((void (APIENTRY *)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)) _func)(program, uniformCount, uniformIndices, pname, params);
}

GLuint APIENTRY shared_dispatch_stub_690(GLuint program, const GLchar *uniformBlockName)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[690];
   return ((GLuint (APIENTRY *)(GLuint program, const GLchar *uniformBlockName)) _func)(program, uniformBlockName);
}

void APIENTRY shared_dispatch_stub_691(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[691];
   ((void (APIENTRY *)(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)) _func)(program, uniformCount, uniformNames, uniformIndices);
}

void APIENTRY shared_dispatch_stub_692(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[692];
   ((void (APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)) _func)(program, uniformBlockIndex, uniformBlockBinding);
}

void APIENTRY shared_dispatch_stub_693(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[693];
   ((void (APIENTRY *)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)) _func)(readTarget, writeTarget, readOffset, writeOffset, size);
}

GLenum APIENTRY shared_dispatch_stub_694(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[694];
   return ((GLenum (APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

void APIENTRY shared_dispatch_stub_695(GLsync sync)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[695];
   ((void (APIENTRY *)(GLsync sync)) _func)(sync);
}

GLsync APIENTRY shared_dispatch_stub_696(GLenum condition, GLbitfield flags)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[696];
   return ((GLsync (APIENTRY *)(GLenum condition, GLbitfield flags)) _func)(condition, flags);
}

void APIENTRY shared_dispatch_stub_697(GLenum pname, GLint64 *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[697];
   ((void (APIENTRY *)(GLenum pname, GLint64 *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_698(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[698];
   ((void (APIENTRY *)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)) _func)(sync, pname, bufSize, length, values);
}

GLboolean APIENTRY shared_dispatch_stub_699(GLsync sync)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[699];
   return ((GLboolean (APIENTRY *)(GLsync sync)) _func)(sync);
}

void APIENTRY shared_dispatch_stub_700(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[700];
   ((void (APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

void APIENTRY shared_dispatch_stub_701(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[701];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)) _func)(mode, count, type, indices, basevertex);
}

void APIENTRY shared_dispatch_stub_702(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[702];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)) _func)(mode, count, type, indices, primcount, basevertex);
}

void APIENTRY shared_dispatch_stub_703(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[703];
   ((void (APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)) _func)(mode, start, end, count, type, indices, basevertex);
}

void APIENTRY shared_dispatch_stub_704(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[704];
   ((void (APIENTRY *)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)) _func)(mode, count, type, indices, primcount, basevertex);
}

void APIENTRY shared_dispatch_stub_705(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[705];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

void APIENTRY shared_dispatch_stub_706(GLenum pname, GLuint index, GLfloat *val)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[706];
   ((void (APIENTRY *)(GLenum pname, GLuint index, GLfloat *val)) _func)(pname, index, val);
}

void APIENTRY shared_dispatch_stub_707(GLuint index, GLbitfield mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[707];
   ((void (APIENTRY *)(GLuint index, GLbitfield mask)) _func)(index, mask);
}

void APIENTRY shared_dispatch_stub_708(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[708];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, fixedsamplelocations);
}

void APIENTRY shared_dispatch_stub_709(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[709];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void APIENTRY shared_dispatch_stub_710(GLuint buf, GLenum modeRGB, GLenum modeA)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[710];
   ((void (APIENTRY *)(GLuint buf, GLenum modeRGB, GLenum modeA)) _func)(buf, modeRGB, modeA);
}

void APIENTRY shared_dispatch_stub_711(GLuint buf, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[711];
   ((void (APIENTRY *)(GLuint buf, GLenum mode)) _func)(buf, mode);
}

void APIENTRY shared_dispatch_stub_712(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[712];
   ((void (APIENTRY *)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA)) _func)(buf, srcRGB, dstRGB, srcA, dstA);
}

void APIENTRY shared_dispatch_stub_713(GLuint buf, GLenum src, GLenum dst)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[713];
   ((void (APIENTRY *)(GLuint buf, GLenum src, GLenum dst)) _func)(buf, src, dst);
}

void APIENTRY shared_dispatch_stub_714(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[714];
   ((void (APIENTRY *)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)) _func)(program, colorNumber, index, name);
}

GLint APIENTRY shared_dispatch_stub_715(GLuint program, const GLchar *name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[715];
   return ((GLint (APIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void APIENTRY shared_dispatch_stub_716(GLuint unit, GLuint sampler)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[716];
   ((void (APIENTRY *)(GLuint unit, GLuint sampler)) _func)(unit, sampler);
}

void APIENTRY shared_dispatch_stub_717(GLsizei count, const GLuint *samplers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[717];
   ((void (APIENTRY *)(GLsizei count, const GLuint *samplers)) _func)(count, samplers);
}

void APIENTRY shared_dispatch_stub_718(GLsizei count, GLuint *samplers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[718];
   ((void (APIENTRY *)(GLsizei count, GLuint *samplers)) _func)(count, samplers);
}

void APIENTRY shared_dispatch_stub_719(GLuint sampler, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[719];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_720(GLuint sampler, GLenum pname, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[720];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLuint *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_721(GLuint sampler, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[721];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLfloat *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_722(GLuint sampler, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[722];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

GLboolean APIENTRY shared_dispatch_stub_723(GLuint sampler)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[723];
   return ((GLboolean (APIENTRY *)(GLuint sampler)) _func)(sampler);
}

void APIENTRY shared_dispatch_stub_724(GLuint sampler, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[724];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLint *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_725(GLuint sampler, GLenum pname, const GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[725];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLuint *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_726(GLuint sampler, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[726];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLfloat param)) _func)(sampler, pname, param);
}

void APIENTRY shared_dispatch_stub_727(GLuint sampler, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[727];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLfloat *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_728(GLuint sampler, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[728];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, GLint param)) _func)(sampler, pname, param);
}

void APIENTRY shared_dispatch_stub_729(GLuint sampler, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[729];
   ((void (APIENTRY *)(GLuint sampler, GLenum pname, const GLint *params)) _func)(sampler, pname, params);
}

void APIENTRY shared_dispatch_stub_730(GLuint id, GLenum pname, GLint64 *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[730];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLint64 *params)) _func)(id, pname, params);
}

void APIENTRY shared_dispatch_stub_731(GLuint id, GLenum pname, GLuint64 *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[731];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLuint64 *params)) _func)(id, pname, params);
}

void APIENTRY shared_dispatch_stub_732(GLuint id, GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[732];
   ((void (APIENTRY *)(GLuint id, GLenum target)) _func)(id, target);
}

void APIENTRY shared_dispatch_stub_733(GLenum type, GLuint color)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[733];
   ((void (APIENTRY *)(GLenum type, GLuint color)) _func)(type, color);
}

void APIENTRY shared_dispatch_stub_734(GLenum type, const GLuint *color)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[734];
   ((void (APIENTRY *)(GLenum type, const GLuint *color)) _func)(type, color);
}

void APIENTRY shared_dispatch_stub_735(GLenum type, GLuint color)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[735];
   ((void (APIENTRY *)(GLenum type, GLuint color)) _func)(type, color);
}

void APIENTRY shared_dispatch_stub_736(GLenum type, const GLuint *color)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[736];
   ((void (APIENTRY *)(GLenum type, const GLuint *color)) _func)(type, color);
}

void APIENTRY shared_dispatch_stub_737(GLenum texture, GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[737];
   ((void (APIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_738(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[738];
   ((void (APIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_739(GLenum texture, GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[739];
   ((void (APIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_740(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[740];
   ((void (APIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_741(GLenum texture, GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[741];
   ((void (APIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_742(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[742];
   ((void (APIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_743(GLenum texture, GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[743];
   ((void (APIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_744(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[744];
   ((void (APIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void APIENTRY shared_dispatch_stub_745(GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[745];
   ((void (APIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_746(GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[746];
   ((void (APIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_747(GLenum type, GLuint color)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[747];
   ((void (APIENTRY *)(GLenum type, GLuint color)) _func)(type, color);
}

void APIENTRY shared_dispatch_stub_748(GLenum type, const GLuint *color)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[748];
   ((void (APIENTRY *)(GLenum type, const GLuint *color)) _func)(type, color);
}

void APIENTRY shared_dispatch_stub_749(GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[749];
   ((void (APIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_750(GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[750];
   ((void (APIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_751(GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[751];
   ((void (APIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_752(GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[752];
   ((void (APIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_753(GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[753];
   ((void (APIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_754(GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[754];
   ((void (APIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_755(GLenum type, GLuint coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[755];
   ((void (APIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_756(GLenum type, const GLuint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[756];
   ((void (APIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void APIENTRY shared_dispatch_stub_757(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[757];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_758(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[758];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_759(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[759];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_760(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[760];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_761(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[761];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_762(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[762];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_763(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[763];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_764(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[764];
   ((void (APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void APIENTRY shared_dispatch_stub_765(GLenum type, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[765];
   ((void (APIENTRY *)(GLenum type, GLuint value)) _func)(type, value);
}

void APIENTRY shared_dispatch_stub_766(GLenum type, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[766];
   ((void (APIENTRY *)(GLenum type, const GLuint *value)) _func)(type, value);
}

void APIENTRY shared_dispatch_stub_767(GLenum type, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[767];
   ((void (APIENTRY *)(GLenum type, GLuint value)) _func)(type, value);
}

void APIENTRY shared_dispatch_stub_768(GLenum type, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[768];
   ((void (APIENTRY *)(GLenum type, const GLuint *value)) _func)(type, value);
}

void APIENTRY shared_dispatch_stub_769(GLenum type, GLuint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[769];
   ((void (APIENTRY *)(GLenum type, GLuint value)) _func)(type, value);
}

void APIENTRY shared_dispatch_stub_770(GLenum type, const GLuint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[770];
   ((void (APIENTRY *)(GLenum type, const GLuint *value)) _func)(type, value);
}

void APIENTRY shared_dispatch_stub_771(GLenum target, GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[771];
   ((void (APIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

void APIENTRY shared_dispatch_stub_772(GLsizei n, const GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[772];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

void APIENTRY shared_dispatch_stub_773(GLenum mode, GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[773];
   ((void (APIENTRY *)(GLenum mode, GLuint id)) _func)(mode, id);
}

void APIENTRY shared_dispatch_stub_774(GLsizei n, GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[774];
   ((void (APIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

GLboolean APIENTRY shared_dispatch_stub_775(GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[775];
   return ((GLboolean (APIENTRY *)(GLuint id)) _func)(id);
}

void APIENTRY shared_dispatch_stub_776(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[776];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_777(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[777];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_778(GLenum target, GLuint index, GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[778];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint id)) _func)(target, index, id);
}

void APIENTRY shared_dispatch_stub_779(GLenum mode, GLuint id, GLuint stream)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[779];
   ((void (APIENTRY *)(GLenum mode, GLuint id, GLuint stream)) _func)(mode, id, stream);
}

void APIENTRY shared_dispatch_stub_780(GLenum target, GLuint index)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[780];
   ((void (APIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void APIENTRY shared_dispatch_stub_781(GLenum target, GLuint index, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[781];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLenum pname, GLint *params)) _func)(target, index, pname, params);
}

void APIENTRY shared_dispatch_stub_782(GLclampf depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[782];
   ((void (APIENTRY *)(GLclampf depth)) _func)(depth);
}

void APIENTRY shared_dispatch_stub_783(GLclampf zNear, GLclampf zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[783];
   ((void (APIENTRY *)(GLclampf zNear, GLclampf zFar)) _func)(zNear, zFar);
}

void APIENTRY shared_dispatch_stub_784(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[784];
   ((void (APIENTRY *)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)) _func)(shadertype, precisiontype, range, precision);
}

void APIENTRY shared_dispatch_stub_785(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[785];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_786(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[786];
   ((void (APIENTRY *)(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)) _func)(n, shaders, binaryformat, binary, length);
}

void APIENTRY shared_dispatch_stub_787(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[787];
   ((void (APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)) _func)(program, bufSize, length, binaryFormat, binary);
}

void APIENTRY shared_dispatch_stub_788(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[788];
   ((void (APIENTRY *)(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)) _func)(program, binaryFormat, binary, length);
}

void APIENTRY shared_dispatch_stub_789(GLuint program, GLenum pname, GLint value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[789];
   ((void (APIENTRY *)(GLuint program, GLenum pname, GLint value)) _func)(program, pname, value);
}

void APIENTRY shared_dispatch_stub_790(GLDEBUGPROCARB callback, const GLvoid *userParam)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[790];
   ((void (APIENTRY *)(GLDEBUGPROCARB callback, const GLvoid *userParam)) _func)(callback, userParam);
}

void APIENTRY shared_dispatch_stub_791(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[791];
   ((void (APIENTRY *)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)) _func)(source, type, severity, count, ids, enabled);
}

void APIENTRY shared_dispatch_stub_792(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLcharARB *buf)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[792];
   ((void (APIENTRY *)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLcharARB *buf)) _func)(source, type, id, severity, length, buf);
}

GLuint APIENTRY shared_dispatch_stub_793(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLcharARB *messageLog)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[793];
   return ((GLuint (APIENTRY *)(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLcharARB *messageLog)) _func)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
}

GLenum APIENTRY shared_dispatch_stub_794(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[794];
   return ((GLenum (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_795(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[795];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)) _func)(target, format, type, bufSize, table);
}

void APIENTRY shared_dispatch_stub_796(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[796];
   ((void (APIENTRY *)(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)) _func)(target, lod, bufSize, img);
}

void APIENTRY shared_dispatch_stub_797(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[797];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)) _func)(target, format, type, bufSize, image);
}

void APIENTRY shared_dispatch_stub_798(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[798];
   ((void (APIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)) _func)(target, reset, format, type, bufSize, values);
}

void APIENTRY shared_dispatch_stub_799(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[799];
   ((void (APIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)) _func)(target, query, bufSize, v);
}

void APIENTRY shared_dispatch_stub_800(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[800];
   ((void (APIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)) _func)(target, query, bufSize, v);
}

void APIENTRY shared_dispatch_stub_801(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[801];
   ((void (APIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLint *v)) _func)(target, query, bufSize, v);
}

void APIENTRY shared_dispatch_stub_802(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[802];
   ((void (APIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)) _func)(target, reset, format, type, bufSize, values);
}

void APIENTRY shared_dispatch_stub_803(GLenum map, GLsizei bufSize, GLfloat *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[803];
   ((void (APIENTRY *)(GLenum map, GLsizei bufSize, GLfloat *values)) _func)(map, bufSize, values);
}

void APIENTRY shared_dispatch_stub_804(GLenum map, GLsizei bufSize, GLuint *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[804];
   ((void (APIENTRY *)(GLenum map, GLsizei bufSize, GLuint *values)) _func)(map, bufSize, values);
}

void APIENTRY shared_dispatch_stub_805(GLenum map, GLsizei bufSize, GLushort *values)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[805];
   ((void (APIENTRY *)(GLenum map, GLsizei bufSize, GLushort *values)) _func)(map, bufSize, values);
}

void APIENTRY shared_dispatch_stub_806(GLsizei bufSize, GLubyte *pattern)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[806];
   ((void (APIENTRY *)(GLsizei bufSize, GLubyte *pattern)) _func)(bufSize, pattern);
}

void APIENTRY shared_dispatch_stub_807(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[807];
   ((void (APIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)) _func)(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

void APIENTRY shared_dispatch_stub_808(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[808];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)) _func)(target, level, format, type, bufSize, img);
}

void APIENTRY shared_dispatch_stub_809(GLhandleARB program, GLint location, GLsizei bufSize, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[809];
   ((void (APIENTRY *)(GLhandleARB program, GLint location, GLsizei bufSize, GLdouble *params)) _func)(program, location, bufSize, params);
}

void APIENTRY shared_dispatch_stub_810(GLhandleARB program, GLint location, GLsizei bufSize, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[810];
   ((void (APIENTRY *)(GLhandleARB program, GLint location, GLsizei bufSize, GLfloat *params)) _func)(program, location, bufSize, params);
}

void APIENTRY shared_dispatch_stub_811(GLhandleARB program, GLint location, GLsizei bufSize, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[811];
   ((void (APIENTRY *)(GLhandleARB program, GLint location, GLsizei bufSize, GLint *params)) _func)(program, location, bufSize, params);
}

void APIENTRY shared_dispatch_stub_812(GLhandleARB program, GLint location, GLsizei bufSize, GLuint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[812];
   ((void (APIENTRY *)(GLhandleARB program, GLint location, GLsizei bufSize, GLuint *params)) _func)(program, location, bufSize, params);
}

void APIENTRY shared_dispatch_stub_813(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[813];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)) _func)(x, y, width, height, format, type, bufSize, data);
}

void APIENTRY shared_dispatch_stub_814(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[814];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)) _func)(mode, first, count, primcount, baseinstance);
}

void APIENTRY shared_dispatch_stub_815(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[815];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)) _func)(mode, count, type, indices, primcount, baseinstance);
}

void APIENTRY shared_dispatch_stub_816(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[816];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)) _func)(mode, count, type, indices, primcount, basevertex, baseinstance);
}

void APIENTRY shared_dispatch_stub_817(GLenum mode, GLuint id, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[817];
   ((void (APIENTRY *)(GLenum mode, GLuint id, GLsizei primcount)) _func)(mode, id, primcount);
}

void APIENTRY shared_dispatch_stub_818(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[818];
   ((void (APIENTRY *)(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)) _func)(mode, id, stream, primcount);
}

void APIENTRY shared_dispatch_stub_819(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[819];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)) _func)(target, internalformat, pname, bufSize, params);
}

void APIENTRY shared_dispatch_stub_820(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[820];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)) _func)(target, levels, internalFormat, width);
}

void APIENTRY shared_dispatch_stub_821(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[821];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)) _func)(target, levels, internalFormat, width, height);
}

void APIENTRY shared_dispatch_stub_822(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[822];
   ((void (APIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)) _func)(target, levels, internalFormat, width, height, depth);
}

void APIENTRY shared_dispatch_stub_823(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[823];
   ((void (APIENTRY *)(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)) _func)(texture, target, levels, internalFormat, width);
}

void APIENTRY shared_dispatch_stub_824(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[824];
   ((void (APIENTRY *)(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)) _func)(texture, target, levels, internalFormat, width, height);
}

void APIENTRY shared_dispatch_stub_825(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[825];
   ((void (APIENTRY *)(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)) _func)(texture, target, levels, internalFormat, width, height, depth);
}

void APIENTRY shared_dispatch_stub_826(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[826];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, internalformat, buffer, offset, size);
}

void APIENTRY shared_dispatch_stub_827(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[827];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, fixedsamplelocations);
}

void APIENTRY shared_dispatch_stub_828(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[828];
   ((void (APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void APIENTRY shared_dispatch_stub_829(GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[829];
   ((void (APIENTRY *)(GLuint buffer)) _func)(buffer);
}

void APIENTRY shared_dispatch_stub_830(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[830];
   ((void (APIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length)) _func)(buffer, offset, length);
}

void APIENTRY shared_dispatch_stub_831(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[831];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments)) _func)(target, numAttachments, attachments);
}

void APIENTRY shared_dispatch_stub_832(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[832];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, numAttachments, attachments, x, y, width, height);
}

void APIENTRY shared_dispatch_stub_833(GLuint texture, GLint level)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[833];
   ((void (APIENTRY *)(GLuint texture, GLint level)) _func)(texture, level);
}

void APIENTRY shared_dispatch_stub_834(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[834];
   ((void (APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

void APIENTRY shared_dispatch_stub_835(GLfloat factor, GLfloat bias)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[835];
   ((void (APIENTRY *)(GLfloat factor, GLfloat bias)) _func)(factor, bias);
}

void APIENTRY shared_dispatch_stub_836(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[836];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)) _func)(x, y, z, width, height);
}

void APIENTRY shared_dispatch_stub_837(const GLfloat *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[837];
   ((void (APIENTRY *)(const GLfloat *coords)) _func)(coords);
}

void APIENTRY shared_dispatch_stub_838(GLint x, GLint y, GLint z, GLint width, GLint height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[838];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z, GLint width, GLint height)) _func)(x, y, z, width, height);
}

void APIENTRY shared_dispatch_stub_839(const GLint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[839];
   ((void (APIENTRY *)(const GLint *coords)) _func)(coords);
}

void APIENTRY shared_dispatch_stub_840(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[840];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)) _func)(x, y, z, width, height);
}

void APIENTRY shared_dispatch_stub_841(const GLshort *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[841];
   ((void (APIENTRY *)(const GLshort *coords)) _func)(coords);
}

void APIENTRY shared_dispatch_stub_842(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[842];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)) _func)(x, y, z, width, height);
}

void APIENTRY shared_dispatch_stub_843(const GLfixed *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[843];
   ((void (APIENTRY *)(const GLfixed *coords)) _func)(coords);
}

void APIENTRY shared_dispatch_stub_844(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[844];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

GLbitfield APIENTRY shared_dispatch_stub_845(GLfixed *mantissa, GLint *exponent)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[845];
   return ((GLbitfield (APIENTRY *)(GLfixed *mantissa, GLint *exponent)) _func)(mantissa, exponent);
}

void APIENTRY shared_dispatch_stub_846(GLclampf value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[846];
   ((void (APIENTRY *)(GLclampf value, GLboolean invert)) _func)(value, invert);
}

void APIENTRY shared_dispatch_stub_847(GLenum pattern)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[847];
   ((void (APIENTRY *)(GLenum pattern)) _func)(pattern);
}

void APIENTRY shared_dispatch_stub_848(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[848];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(size, type, stride, count, pointer);
}

void APIENTRY shared_dispatch_stub_849(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[849];
   ((void (APIENTRY *)(GLsizei stride, GLsizei count, const GLboolean *pointer)) _func)(stride, count, pointer);
}

void APIENTRY shared_dispatch_stub_850(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[850];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(type, stride, count, pointer);
}

void APIENTRY shared_dispatch_stub_851(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[851];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(type, stride, count, pointer);
}

void APIENTRY shared_dispatch_stub_852(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[852];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(size, type, stride, count, pointer);
}

void APIENTRY shared_dispatch_stub_853(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[853];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(size, type, stride, count, pointer);
}

void APIENTRY shared_dispatch_stub_854(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[854];
   ((void (APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments)) _func)(target, numAttachments, attachments);
}

void APIENTRY shared_dispatch_stub_855(GLint first, GLsizei count)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[855];
   ((void (APIENTRY *)(GLint first, GLsizei count)) _func)(first, count);
}

void APIENTRY shared_dispatch_stub_856(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[856];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_857(GLfloat red, GLfloat green, GLfloat blue)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[857];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue)) _func)(red, green, blue);
}

void APIENTRY shared_dispatch_stub_858(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[858];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_859(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[859];
   ((void (APIENTRY *)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)) _func)(mode, count, type, indices, primcount);
}

void APIENTRY shared_dispatch_stub_860(GLfloat coord)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[860];
   ((void (APIENTRY *)(GLfloat coord)) _func)(coord);
}

void APIENTRY shared_dispatch_stub_861(const GLfloat *coord)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[861];
   ((void (APIENTRY *)(const GLfloat *coord)) _func)(coord);
}

void APIENTRY shared_dispatch_stub_862(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[862];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_863(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[863];
   ((void (APIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_864(const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[864];
   ((void (APIENTRY *)(const GLdouble *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_865(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[865];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_866(const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[866];
   ((void (APIENTRY *)(const GLfloat *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_867(GLint x, GLint y, GLint z, GLint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[867];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z, GLint w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_868(const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[868];
   ((void (APIENTRY *)(const GLint *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_869(GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[869];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w)) _func)(x, y, z, w);
}

void APIENTRY shared_dispatch_stub_870(const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[870];
   ((void (APIENTRY *)(const GLshort *v)) _func)(v);
}

void APIENTRY shared_dispatch_stub_871(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[871];
   ((void (APIENTRY *)(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)) _func)(mode, first, count, primcount, modestride);
}

void APIENTRY shared_dispatch_stub_872(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[872];
   ((void (APIENTRY *)(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)) _func)(mode, count, type, indices, primcount, modestride);
}

GLboolean APIENTRY shared_dispatch_stub_873(GLsizei n, const GLuint *ids, GLboolean *residences)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[873];
   return ((GLboolean (APIENTRY *)(GLsizei n, const GLuint *ids, GLboolean *residences)) _func)(n, ids, residences);
}

void APIENTRY shared_dispatch_stub_874(GLenum target, GLuint id, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[874];
   ((void (APIENTRY *)(GLenum target, GLuint id, const GLfloat *params)) _func)(target, id, params);
}

void APIENTRY shared_dispatch_stub_875(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[875];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLenum pname, GLdouble *params)) _func)(target, index, pname, params);
}

void APIENTRY shared_dispatch_stub_876(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[876];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLenum pname, GLfloat *params)) _func)(target, index, pname, params);
}

void APIENTRY shared_dispatch_stub_877(GLuint id, GLenum pname, GLubyte *program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[877];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLubyte *program)) _func)(id, pname, program);
}

void APIENTRY shared_dispatch_stub_878(GLuint id, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[878];
   ((void (APIENTRY *)(GLuint id, GLenum pname, GLint *params)) _func)(id, pname, params);
}

void APIENTRY shared_dispatch_stub_879(GLenum target, GLuint address, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[879];
   ((void (APIENTRY *)(GLenum target, GLuint address, GLenum pname, GLint *params)) _func)(target, address, pname, params);
}

void APIENTRY shared_dispatch_stub_880(GLuint index, GLenum pname, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[880];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLdouble *params)) _func)(index, pname, params);
}

void APIENTRY shared_dispatch_stub_881(GLuint index, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[881];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLfloat *params)) _func)(index, pname, params);
}

void APIENTRY shared_dispatch_stub_882(GLuint index, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[882];
   ((void (APIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

void APIENTRY shared_dispatch_stub_883(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[883];
   ((void (APIENTRY *)(GLenum target, GLuint id, GLsizei len, const GLubyte *program)) _func)(target, id, len, program);
}

void APIENTRY shared_dispatch_stub_884(GLenum target, GLuint index, GLsizei num, const GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[884];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLsizei num, const GLdouble *params)) _func)(target, index, num, params);
}

void APIENTRY shared_dispatch_stub_885(GLenum target, GLuint index, GLsizei num, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[885];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLsizei num, const GLfloat *params)) _func)(target, index, num, params);
}

void APIENTRY shared_dispatch_stub_886(GLsizei n, const GLuint *ids)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[886];
   ((void (APIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

void APIENTRY shared_dispatch_stub_887(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[887];
   ((void (APIENTRY *)(GLenum target, GLuint address, GLenum matrix, GLenum transform)) _func)(target, address, matrix, transform);
}

void APIENTRY shared_dispatch_stub_888(GLuint index, GLdouble x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[888];
   ((void (APIENTRY *)(GLuint index, GLdouble x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_889(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[889];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_890(GLuint index, GLfloat x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[890];
   ((void (APIENTRY *)(GLuint index, GLfloat x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_891(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[891];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_892(GLuint index, GLshort x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[892];
   ((void (APIENTRY *)(GLuint index, GLshort x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_893(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[893];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_894(GLuint index, GLdouble x, GLdouble y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[894];
   ((void (APIENTRY *)(GLuint index, GLdouble x, GLdouble y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_895(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[895];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_896(GLuint index, GLfloat x, GLfloat y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[896];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_897(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[897];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_898(GLuint index, GLshort x, GLshort y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[898];
   ((void (APIENTRY *)(GLuint index, GLshort x, GLshort y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_899(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[899];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_900(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[900];
   ((void (APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_901(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[901];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_902(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[902];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_903(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[903];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_904(GLuint index, GLshort x, GLshort y, GLshort z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[904];
   ((void (APIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_905(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[905];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_906(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[906];
   ((void (APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_907(GLuint index, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[907];
   ((void (APIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_908(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[908];
   ((void (APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_909(GLuint index, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[909];
   ((void (APIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_910(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[910];
   ((void (APIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_911(GLuint index, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[911];
   ((void (APIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_912(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[912];
   ((void (APIENTRY *)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_913(GLuint index, const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[913];
   ((void (APIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_914(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[914];
   ((void (APIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, stride, pointer);
}

void APIENTRY shared_dispatch_stub_915(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[915];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_916(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[916];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_917(GLuint index, GLsizei n, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[917];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_918(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[918];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_919(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[919];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_920(GLuint index, GLsizei n, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[920];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_921(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[921];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_922(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[922];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_923(GLuint index, GLsizei n, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[923];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_924(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[924];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_925(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[925];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_926(GLuint index, GLsizei n, const GLshort *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[926];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_927(GLuint index, GLsizei n, const GLubyte *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[927];
   ((void (APIENTRY *)(GLuint index, GLsizei n, const GLubyte *v)) _func)(index, n, v);
}

void APIENTRY shared_dispatch_stub_928(GLenum pname, GLfloat *param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[928];
   ((void (APIENTRY *)(GLenum pname, GLfloat *param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_929(GLenum pname, GLint *param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[929];
   ((void (APIENTRY *)(GLenum pname, GLint *param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_930(GLenum pname, const GLfloat *param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[930];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_931(GLenum pname, const GLint *param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[931];
   ((void (APIENTRY *)(GLenum pname, const GLint *param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_932(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[932];
   ((void (APIENTRY *)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)) _func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

void APIENTRY shared_dispatch_stub_933(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[933];
   ((void (APIENTRY *)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)) _func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

void APIENTRY shared_dispatch_stub_934(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[934];
   ((void (APIENTRY *)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)) _func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

void APIENTRY shared_dispatch_stub_935(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[935];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_936(GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[936];
   ((void (APIENTRY *)(GLuint id)) _func)(id);
}

void APIENTRY shared_dispatch_stub_937(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[937];
   ((void (APIENTRY *)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)) _func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

void APIENTRY shared_dispatch_stub_938(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[938];
   ((void (APIENTRY *)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)) _func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

void APIENTRY shared_dispatch_stub_939(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[939];
   ((void (APIENTRY *)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)) _func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

void APIENTRY shared_dispatch_stub_940(GLuint id)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[940];
   ((void (APIENTRY *)(GLuint id)) _func)(id);
}

void APIENTRY shared_dispatch_stub_941(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[941];
   ((void (APIENTRY *)(void)) _func)();
}

GLuint APIENTRY shared_dispatch_stub_942(GLuint range)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[942];
   return ((GLuint (APIENTRY *)(GLuint range)) _func)(range);
}

void APIENTRY shared_dispatch_stub_943(GLuint dst, GLuint coord, GLenum swizzle)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[943];
   ((void (APIENTRY *)(GLuint dst, GLuint coord, GLenum swizzle)) _func)(dst, coord, swizzle);
}

void APIENTRY shared_dispatch_stub_944(GLuint dst, GLuint interp, GLenum swizzle)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[944];
   ((void (APIENTRY *)(GLuint dst, GLuint interp, GLenum swizzle)) _func)(dst, interp, swizzle);
}

void APIENTRY shared_dispatch_stub_945(GLuint dst, const GLfloat *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[945];
   ((void (APIENTRY *)(GLuint dst, const GLfloat *value)) _func)(dst, value);
}

void APIENTRY shared_dispatch_stub_946(GLenum face)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[946];
   ((void (APIENTRY *)(GLenum face)) _func)(face);
}

void APIENTRY shared_dispatch_stub_947(GLuint array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[947];
   ((void (APIENTRY *)(GLuint array)) _func)(array);
}

void APIENTRY shared_dispatch_stub_948(GLsizei n, GLuint *arrays)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[948];
   ((void (APIENTRY *)(GLsizei n, GLuint *arrays)) _func)(n, arrays);
}

void APIENTRY shared_dispatch_stub_949(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[949];
   ((void (APIENTRY *)(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)) _func)(id, len, name, params);
}

void APIENTRY shared_dispatch_stub_950(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[950];
   ((void (APIENTRY *)(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)) _func)(id, len, name, params);
}

void APIENTRY shared_dispatch_stub_951(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[951];
   ((void (APIENTRY *)(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(id, len, name, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_952(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[952];
   ((void (APIENTRY *)(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)) _func)(id, len, name, v);
}

void APIENTRY shared_dispatch_stub_953(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[953];
   ((void (APIENTRY *)(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(id, len, name, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_954(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[954];
   ((void (APIENTRY *)(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)) _func)(id, len, name, v);
}

void APIENTRY shared_dispatch_stub_955(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[955];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_956(GLenum coord, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[956];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLfixed *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_957(GLenum coord, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[957];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLint param)) _func)(coord, pname, param);
}

void APIENTRY shared_dispatch_stub_958(GLenum coord, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[958];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLfixed *params)) _func)(coord, pname, params);
}

void APIENTRY shared_dispatch_stub_959(GLclampd zmin, GLclampd zmax)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[959];
   ((void (APIENTRY *)(GLclampd zmin, GLclampd zmax)) _func)(zmin, zmax);
}

void APIENTRY shared_dispatch_stub_960(GLenum target, GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[960];
   ((void (APIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

void APIENTRY shared_dispatch_stub_961(GLenum target, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[961];
   ((void (APIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

void APIENTRY shared_dispatch_stub_962(GLenum target, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[962];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_963(GLenum target, GLintptr offset, GLsizeiptr size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[963];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size)) _func)(target, offset, size);
}

void APIENTRY shared_dispatch_stub_964(GLuint index, GLint x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[964];
   ((void (APIENTRY *)(GLuint index, GLint x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_965(GLuint index, GLuint x)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[965];
   ((void (APIENTRY *)(GLuint index, GLuint x)) _func)(index, x);
}

void APIENTRY shared_dispatch_stub_966(GLuint index, GLint x, GLint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[966];
   ((void (APIENTRY *)(GLuint index, GLint x, GLint y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_967(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[967];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_968(GLuint index, GLuint x, GLuint y)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[968];
   ((void (APIENTRY *)(GLuint index, GLuint x, GLuint y)) _func)(index, x, y);
}

void APIENTRY shared_dispatch_stub_969(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[969];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_970(GLuint index, GLint x, GLint y, GLint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[970];
   ((void (APIENTRY *)(GLuint index, GLint x, GLint y, GLint z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_971(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[971];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_972(GLuint index, GLuint x, GLuint y, GLuint z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[972];
   ((void (APIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z)) _func)(index, x, y, z);
}

void APIENTRY shared_dispatch_stub_973(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[973];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_974(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[974];
   ((void (APIENTRY *)(GLuint index, GLint x, GLint y, GLint z, GLint w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_975(GLuint index, const GLint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[975];
   ((void (APIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_976(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[976];
   ((void (APIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(index, x, y, z, w);
}

void APIENTRY shared_dispatch_stub_977(GLuint index, const GLuint *v)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[977];
   ((void (APIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void APIENTRY shared_dispatch_stub_978(GLint r, GLint g, GLint b, GLint a)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[978];
   ((void (APIENTRY *)(GLint r, GLint g, GLint b, GLint a)) _func)(r, g, b, a);
}

void APIENTRY shared_dispatch_stub_979(GLuint r, GLuint g, GLuint b, GLuint a)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[979];
   ((void (APIENTRY *)(GLuint r, GLuint g, GLuint b, GLuint a)) _func)(r, g, b, a);
}

void APIENTRY shared_dispatch_stub_980(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[980];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset)) _func)(target, index, buffer, offset);
}

void APIENTRY shared_dispatch_stub_981(GLenum objectType, GLuint name, GLenum pname, GLint *value)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[981];
   ((void (APIENTRY *)(GLenum objectType, GLuint name, GLenum pname, GLint *value)) _func)(objectType, name, pname, value);
}

GLenum APIENTRY shared_dispatch_stub_982(GLenum objectType, GLuint name, GLenum option)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[982];
   return ((GLenum (APIENTRY *)(GLenum objectType, GLuint name, GLenum option)) _func)(objectType, name, option);
}

GLenum APIENTRY shared_dispatch_stub_983(GLenum objectType, GLuint name, GLenum option)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[983];
   return ((GLenum (APIENTRY *)(GLenum objectType, GLuint name, GLenum option)) _func)(objectType, name, option);
}

void APIENTRY shared_dispatch_stub_984(GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[984];
   ((void (APIENTRY *)(GLuint program)) _func)(program);
}

GLuint APIENTRY shared_dispatch_stub_985(GLenum type, const GLchar *string)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[985];
   return ((GLuint (APIENTRY *)(GLenum type, const GLchar *string)) _func)(type, string);
}

void APIENTRY shared_dispatch_stub_986(GLenum type, GLuint program)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[986];
   ((void (APIENTRY *)(GLenum type, GLuint program)) _func)(type, program);
}

void APIENTRY shared_dispatch_stub_987(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[987];
   ((void (APIENTRY *)(void)) _func)();
}

void APIENTRY shared_dispatch_stub_988(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[988];
   ((void (APIENTRY *)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)) _func)(frontfunc, backfunc, ref, mask);
}

void APIENTRY shared_dispatch_stub_989(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[989];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLsizei count, const GLfloat *params)) _func)(target, index, count, params);
}

void APIENTRY shared_dispatch_stub_990(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[990];
   ((void (APIENTRY *)(GLenum target, GLuint index, GLsizei count, const GLfloat *params)) _func)(target, index, count, params);
}

void APIENTRY shared_dispatch_stub_991(GLenum target, GLvoid *writeOffset)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[991];
   ((void (APIENTRY *)(GLenum target, GLvoid *writeOffset)) _func)(target, writeOffset);
}

void APIENTRY shared_dispatch_stub_992(GLenum target, GLvoid *writeOffset)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[992];
   ((void (APIENTRY *)(GLenum target, GLvoid *writeOffset)) _func)(target, writeOffset);
}

void APIENTRY shared_dispatch_stub_993(GLenum func, GLclampx ref)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[993];
   ((void (APIENTRY *)(GLenum func, GLclampx ref)) _func)(func, ref);
}

void APIENTRY shared_dispatch_stub_994(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[994];
   ((void (APIENTRY *)(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_995(GLclampx depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[995];
   ((void (APIENTRY *)(GLclampx depth)) _func)(depth);
}

void APIENTRY shared_dispatch_stub_996(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[996];
   ((void (APIENTRY *)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)) _func)(red, green, blue, alpha);
}

void APIENTRY shared_dispatch_stub_997(GLclampx zNear, GLclampx zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[997];
   ((void (APIENTRY *)(GLclampx zNear, GLclampx zFar)) _func)(zNear, zFar);
}

void APIENTRY shared_dispatch_stub_998(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[998];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_999(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[999];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_1000(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1000];
   ((void (APIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void APIENTRY shared_dispatch_stub_1001(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1001];
   ((void (APIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void APIENTRY shared_dispatch_stub_1002(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1002];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_1003(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1003];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_1004(GLenum light, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1004];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfixed param)) _func)(light, pname, param);
}

void APIENTRY shared_dispatch_stub_1005(GLenum light, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1005];
   ((void (APIENTRY *)(GLenum light, GLenum pname, const GLfixed *params)) _func)(light, pname, params);
}

void APIENTRY shared_dispatch_stub_1006(GLfixed width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1006];
   ((void (APIENTRY *)(GLfixed width)) _func)(width);
}

void APIENTRY shared_dispatch_stub_1007(const GLfixed *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1007];
   ((void (APIENTRY *)(const GLfixed *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_1008(GLenum face, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1008];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfixed param)) _func)(face, pname, param);
}

void APIENTRY shared_dispatch_stub_1009(GLenum face, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1009];
   ((void (APIENTRY *)(GLenum face, GLenum pname, const GLfixed *params)) _func)(face, pname, params);
}

void APIENTRY shared_dispatch_stub_1010(const GLfixed *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1010];
   ((void (APIENTRY *)(const GLfixed *m)) _func)(m);
}

void APIENTRY shared_dispatch_stub_1011(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1011];
   ((void (APIENTRY *)(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)) _func)(target, s, t, r, q);
}

void APIENTRY shared_dispatch_stub_1012(GLfixed nx, GLfixed ny, GLfixed nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1012];
   ((void (APIENTRY *)(GLfixed nx, GLfixed ny, GLfixed nz)) _func)(nx, ny, nz);
}

void APIENTRY shared_dispatch_stub_1013(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1013];
   ((void (APIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void APIENTRY shared_dispatch_stub_1014(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1014];
   ((void (APIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void APIENTRY shared_dispatch_stub_1015(GLfixed size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1015];
   ((void (APIENTRY *)(GLfixed size)) _func)(size);
}

void APIENTRY shared_dispatch_stub_1016(GLfixed factor, GLfixed units)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1016];
   ((void (APIENTRY *)(GLfixed factor, GLfixed units)) _func)(factor, units);
}

void APIENTRY shared_dispatch_stub_1017(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1017];
   ((void (APIENTRY *)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)) _func)(angle, x, y, z);
}

void APIENTRY shared_dispatch_stub_1018(GLclampx value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1018];
   ((void (APIENTRY *)(GLclampx value, GLboolean invert)) _func)(value, invert);
}

void APIENTRY shared_dispatch_stub_1019(GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1019];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_1020(GLenum target, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1020];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_1021(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1021];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_1022(GLenum target, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1022];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

void APIENTRY shared_dispatch_stub_1023(GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1023];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

void APIENTRY shared_dispatch_stub_1024(GLenum plane, const GLfloat *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1024];
   ((void (APIENTRY *)(GLenum plane, const GLfloat *equation)) _func)(plane, equation);
}

void APIENTRY shared_dispatch_stub_1025(GLenum plane, const GLfixed *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1025];
   ((void (APIENTRY *)(GLenum plane, const GLfixed *equation)) _func)(plane, equation);
}

void APIENTRY shared_dispatch_stub_1026(GLenum plane, GLfloat *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1026];
   ((void (APIENTRY *)(GLenum plane, GLfloat *equation)) _func)(plane, equation);
}

void APIENTRY shared_dispatch_stub_1027(GLenum plane, GLfixed *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1027];
   ((void (APIENTRY *)(GLenum plane, GLfixed *equation)) _func)(plane, equation);
}

void APIENTRY shared_dispatch_stub_1028(GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1028];
   ((void (APIENTRY *)(GLenum pname, GLfixed *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_1029(GLenum light, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1029];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfixed *params)) _func)(light, pname, params);
}

void APIENTRY shared_dispatch_stub_1030(GLenum face, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1030];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfixed *params)) _func)(face, pname, params);
}

void APIENTRY shared_dispatch_stub_1031(GLenum target, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1031];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_1032(GLenum target, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1032];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

void APIENTRY shared_dispatch_stub_1033(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1033];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

void APIENTRY shared_dispatch_stub_1034(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1034];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

void APIENTRY shared_dispatch_stub_1035(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[1035];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

static const mapi_func public_entries[] = {
   (mapi_func) shared_dispatch_stub_0,
   (mapi_func) shared_dispatch_stub_1,
   (mapi_func) shared_dispatch_stub_2,
   (mapi_func) shared_dispatch_stub_3,
   (mapi_func) shared_dispatch_stub_4,
   (mapi_func) shared_dispatch_stub_5,
   (mapi_func) shared_dispatch_stub_6,
   (mapi_func) shared_dispatch_stub_7,
   (mapi_func) shared_dispatch_stub_8,
   (mapi_func) shared_dispatch_stub_9,
   (mapi_func) shared_dispatch_stub_10,
   (mapi_func) shared_dispatch_stub_11,
   (mapi_func) shared_dispatch_stub_12,
   (mapi_func) shared_dispatch_stub_13,
   (mapi_func) shared_dispatch_stub_14,
   (mapi_func) shared_dispatch_stub_15,
   (mapi_func) shared_dispatch_stub_16,
   (mapi_func) shared_dispatch_stub_17,
   (mapi_func) shared_dispatch_stub_18,
   (mapi_func) shared_dispatch_stub_19,
   (mapi_func) shared_dispatch_stub_20,
   (mapi_func) shared_dispatch_stub_21,
   (mapi_func) shared_dispatch_stub_22,
   (mapi_func) shared_dispatch_stub_23,
   (mapi_func) shared_dispatch_stub_24,
   (mapi_func) shared_dispatch_stub_25,
   (mapi_func) shared_dispatch_stub_26,
   (mapi_func) shared_dispatch_stub_27,
   (mapi_func) shared_dispatch_stub_28,
   (mapi_func) shared_dispatch_stub_29,
   (mapi_func) shared_dispatch_stub_30,
   (mapi_func) shared_dispatch_stub_31,
   (mapi_func) shared_dispatch_stub_32,
   (mapi_func) shared_dispatch_stub_33,
   (mapi_func) shared_dispatch_stub_34,
   (mapi_func) shared_dispatch_stub_35,
   (mapi_func) shared_dispatch_stub_36,
   (mapi_func) shared_dispatch_stub_37,
   (mapi_func) shared_dispatch_stub_38,
   (mapi_func) shared_dispatch_stub_39,
   (mapi_func) shared_dispatch_stub_40,
   (mapi_func) shared_dispatch_stub_41,
   (mapi_func) shared_dispatch_stub_42,
   (mapi_func) shared_dispatch_stub_43,
   (mapi_func) shared_dispatch_stub_44,
   (mapi_func) shared_dispatch_stub_45,
   (mapi_func) shared_dispatch_stub_46,
   (mapi_func) shared_dispatch_stub_47,
   (mapi_func) shared_dispatch_stub_48,
   (mapi_func) shared_dispatch_stub_49,
   (mapi_func) shared_dispatch_stub_50,
   (mapi_func) shared_dispatch_stub_51,
   (mapi_func) shared_dispatch_stub_52,
   (mapi_func) shared_dispatch_stub_53,
   (mapi_func) shared_dispatch_stub_54,
   (mapi_func) shared_dispatch_stub_55,
   (mapi_func) shared_dispatch_stub_56,
   (mapi_func) shared_dispatch_stub_57,
   (mapi_func) shared_dispatch_stub_58,
   (mapi_func) shared_dispatch_stub_59,
   (mapi_func) shared_dispatch_stub_60,
   (mapi_func) shared_dispatch_stub_61,
   (mapi_func) shared_dispatch_stub_62,
   (mapi_func) shared_dispatch_stub_63,
   (mapi_func) shared_dispatch_stub_64,
   (mapi_func) shared_dispatch_stub_65,
   (mapi_func) shared_dispatch_stub_66,
   (mapi_func) shared_dispatch_stub_67,
   (mapi_func) shared_dispatch_stub_68,
   (mapi_func) shared_dispatch_stub_69,
   (mapi_func) shared_dispatch_stub_70,
   (mapi_func) shared_dispatch_stub_71,
   (mapi_func) shared_dispatch_stub_72,
   (mapi_func) shared_dispatch_stub_73,
   (mapi_func) shared_dispatch_stub_74,
   (mapi_func) shared_dispatch_stub_75,
   (mapi_func) shared_dispatch_stub_76,
   (mapi_func) shared_dispatch_stub_77,
   (mapi_func) shared_dispatch_stub_78,
   (mapi_func) shared_dispatch_stub_79,
   (mapi_func) shared_dispatch_stub_80,
   (mapi_func) shared_dispatch_stub_81,
   (mapi_func) shared_dispatch_stub_82,
   (mapi_func) shared_dispatch_stub_83,
   (mapi_func) shared_dispatch_stub_84,
   (mapi_func) shared_dispatch_stub_85,
   (mapi_func) shared_dispatch_stub_86,
   (mapi_func) shared_dispatch_stub_87,
   (mapi_func) shared_dispatch_stub_88,
   (mapi_func) shared_dispatch_stub_89,
   (mapi_func) shared_dispatch_stub_90,
   (mapi_func) shared_dispatch_stub_91,
   (mapi_func) shared_dispatch_stub_92,
   (mapi_func) shared_dispatch_stub_93,
   (mapi_func) shared_dispatch_stub_94,
   (mapi_func) shared_dispatch_stub_95,
   (mapi_func) shared_dispatch_stub_96,
   (mapi_func) shared_dispatch_stub_97,
   (mapi_func) shared_dispatch_stub_98,
   (mapi_func) shared_dispatch_stub_99,
   (mapi_func) shared_dispatch_stub_100,
   (mapi_func) shared_dispatch_stub_101,
   (mapi_func) shared_dispatch_stub_102,
   (mapi_func) shared_dispatch_stub_103,
   (mapi_func) shared_dispatch_stub_104,
   (mapi_func) shared_dispatch_stub_105,
   (mapi_func) shared_dispatch_stub_106,
   (mapi_func) shared_dispatch_stub_107,
   (mapi_func) shared_dispatch_stub_108,
   (mapi_func) shared_dispatch_stub_109,
   (mapi_func) shared_dispatch_stub_110,
   (mapi_func) shared_dispatch_stub_111,
   (mapi_func) shared_dispatch_stub_112,
   (mapi_func) shared_dispatch_stub_113,
   (mapi_func) shared_dispatch_stub_114,
   (mapi_func) shared_dispatch_stub_115,
   (mapi_func) shared_dispatch_stub_116,
   (mapi_func) shared_dispatch_stub_117,
   (mapi_func) shared_dispatch_stub_118,
   (mapi_func) shared_dispatch_stub_119,
   (mapi_func) shared_dispatch_stub_120,
   (mapi_func) shared_dispatch_stub_121,
   (mapi_func) shared_dispatch_stub_122,
   (mapi_func) shared_dispatch_stub_123,
   (mapi_func) shared_dispatch_stub_124,
   (mapi_func) shared_dispatch_stub_125,
   (mapi_func) shared_dispatch_stub_126,
   (mapi_func) shared_dispatch_stub_127,
   (mapi_func) shared_dispatch_stub_128,
   (mapi_func) shared_dispatch_stub_129,
   (mapi_func) shared_dispatch_stub_130,
   (mapi_func) shared_dispatch_stub_131,
   (mapi_func) shared_dispatch_stub_132,
   (mapi_func) shared_dispatch_stub_133,
   (mapi_func) shared_dispatch_stub_134,
   (mapi_func) shared_dispatch_stub_135,
   (mapi_func) shared_dispatch_stub_136,
   (mapi_func) shared_dispatch_stub_137,
   (mapi_func) shared_dispatch_stub_138,
   (mapi_func) shared_dispatch_stub_139,
   (mapi_func) shared_dispatch_stub_140,
   (mapi_func) shared_dispatch_stub_141,
   (mapi_func) shared_dispatch_stub_142,
   (mapi_func) shared_dispatch_stub_143,
   (mapi_func) shared_dispatch_stub_144,
   (mapi_func) shared_dispatch_stub_145,
   (mapi_func) shared_dispatch_stub_146,
   (mapi_func) shared_dispatch_stub_147,
   (mapi_func) shared_dispatch_stub_148,
   (mapi_func) shared_dispatch_stub_149,
   (mapi_func) shared_dispatch_stub_150,
   (mapi_func) shared_dispatch_stub_151,
   (mapi_func) shared_dispatch_stub_152,
   (mapi_func) shared_dispatch_stub_153,
   (mapi_func) shared_dispatch_stub_154,
   (mapi_func) shared_dispatch_stub_155,
   (mapi_func) shared_dispatch_stub_156,
   (mapi_func) shared_dispatch_stub_157,
   (mapi_func) shared_dispatch_stub_158,
   (mapi_func) shared_dispatch_stub_159,
   (mapi_func) shared_dispatch_stub_160,
   (mapi_func) shared_dispatch_stub_161,
   (mapi_func) shared_dispatch_stub_162,
   (mapi_func) shared_dispatch_stub_163,
   (mapi_func) shared_dispatch_stub_164,
   (mapi_func) shared_dispatch_stub_165,
   (mapi_func) shared_dispatch_stub_166,
   (mapi_func) shared_dispatch_stub_167,
   (mapi_func) shared_dispatch_stub_168,
   (mapi_func) shared_dispatch_stub_169,
   (mapi_func) shared_dispatch_stub_170,
   (mapi_func) shared_dispatch_stub_171,
   (mapi_func) shared_dispatch_stub_172,
   (mapi_func) shared_dispatch_stub_173,
   (mapi_func) shared_dispatch_stub_174,
   (mapi_func) shared_dispatch_stub_175,
   (mapi_func) shared_dispatch_stub_176,
   (mapi_func) shared_dispatch_stub_177,
   (mapi_func) shared_dispatch_stub_178,
   (mapi_func) shared_dispatch_stub_179,
   (mapi_func) shared_dispatch_stub_180,
   (mapi_func) shared_dispatch_stub_181,
   (mapi_func) shared_dispatch_stub_182,
   (mapi_func) shared_dispatch_stub_183,
   (mapi_func) shared_dispatch_stub_184,
   (mapi_func) shared_dispatch_stub_185,
   (mapi_func) shared_dispatch_stub_186,
   (mapi_func) shared_dispatch_stub_187,
   (mapi_func) shared_dispatch_stub_188,
   (mapi_func) shared_dispatch_stub_189,
   (mapi_func) shared_dispatch_stub_190,
   (mapi_func) shared_dispatch_stub_191,
   (mapi_func) shared_dispatch_stub_192,
   (mapi_func) shared_dispatch_stub_193,
   (mapi_func) shared_dispatch_stub_194,
   (mapi_func) shared_dispatch_stub_195,
   (mapi_func) shared_dispatch_stub_196,
   (mapi_func) shared_dispatch_stub_197,
   (mapi_func) shared_dispatch_stub_198,
   (mapi_func) shared_dispatch_stub_199,
   (mapi_func) shared_dispatch_stub_200,
   (mapi_func) shared_dispatch_stub_201,
   (mapi_func) shared_dispatch_stub_202,
   (mapi_func) shared_dispatch_stub_203,
   (mapi_func) shared_dispatch_stub_204,
   (mapi_func) shared_dispatch_stub_205,
   (mapi_func) shared_dispatch_stub_206,
   (mapi_func) shared_dispatch_stub_207,
   (mapi_func) shared_dispatch_stub_208,
   (mapi_func) shared_dispatch_stub_209,
   (mapi_func) shared_dispatch_stub_210,
   (mapi_func) shared_dispatch_stub_211,
   (mapi_func) shared_dispatch_stub_212,
   (mapi_func) shared_dispatch_stub_213,
   (mapi_func) shared_dispatch_stub_214,
   (mapi_func) shared_dispatch_stub_215,
   (mapi_func) shared_dispatch_stub_216,
   (mapi_func) shared_dispatch_stub_217,
   (mapi_func) shared_dispatch_stub_218,
   (mapi_func) shared_dispatch_stub_219,
   (mapi_func) shared_dispatch_stub_220,
   (mapi_func) shared_dispatch_stub_221,
   (mapi_func) shared_dispatch_stub_222,
   (mapi_func) shared_dispatch_stub_223,
   (mapi_func) shared_dispatch_stub_224,
   (mapi_func) shared_dispatch_stub_225,
   (mapi_func) shared_dispatch_stub_226,
   (mapi_func) shared_dispatch_stub_227,
   (mapi_func) shared_dispatch_stub_228,
   (mapi_func) shared_dispatch_stub_229,
   (mapi_func) shared_dispatch_stub_230,
   (mapi_func) shared_dispatch_stub_231,
   (mapi_func) shared_dispatch_stub_232,
   (mapi_func) shared_dispatch_stub_233,
   (mapi_func) shared_dispatch_stub_234,
   (mapi_func) shared_dispatch_stub_235,
   (mapi_func) shared_dispatch_stub_236,
   (mapi_func) shared_dispatch_stub_237,
   (mapi_func) shared_dispatch_stub_238,
   (mapi_func) shared_dispatch_stub_239,
   (mapi_func) shared_dispatch_stub_240,
   (mapi_func) shared_dispatch_stub_241,
   (mapi_func) shared_dispatch_stub_242,
   (mapi_func) shared_dispatch_stub_243,
   (mapi_func) shared_dispatch_stub_244,
   (mapi_func) shared_dispatch_stub_245,
   (mapi_func) shared_dispatch_stub_246,
   (mapi_func) shared_dispatch_stub_247,
   (mapi_func) shared_dispatch_stub_248,
   (mapi_func) shared_dispatch_stub_249,
   (mapi_func) shared_dispatch_stub_250,
   (mapi_func) shared_dispatch_stub_251,
   (mapi_func) shared_dispatch_stub_252,
   (mapi_func) shared_dispatch_stub_253,
   (mapi_func) shared_dispatch_stub_254,
   (mapi_func) shared_dispatch_stub_255,
   (mapi_func) shared_dispatch_stub_256,
   (mapi_func) shared_dispatch_stub_257,
   (mapi_func) shared_dispatch_stub_258,
   (mapi_func) shared_dispatch_stub_259,
   (mapi_func) shared_dispatch_stub_260,
   (mapi_func) shared_dispatch_stub_261,
   (mapi_func) shared_dispatch_stub_262,
   (mapi_func) shared_dispatch_stub_263,
   (mapi_func) shared_dispatch_stub_264,
   (mapi_func) shared_dispatch_stub_265,
   (mapi_func) shared_dispatch_stub_266,
   (mapi_func) shared_dispatch_stub_267,
   (mapi_func) shared_dispatch_stub_268,
   (mapi_func) shared_dispatch_stub_269,
   (mapi_func) shared_dispatch_stub_270,
   (mapi_func) shared_dispatch_stub_271,
   (mapi_func) shared_dispatch_stub_272,
   (mapi_func) shared_dispatch_stub_273,
   (mapi_func) shared_dispatch_stub_274,
   (mapi_func) shared_dispatch_stub_275,
   (mapi_func) shared_dispatch_stub_276,
   (mapi_func) shared_dispatch_stub_277,
   (mapi_func) shared_dispatch_stub_278,
   (mapi_func) shared_dispatch_stub_279,
   (mapi_func) shared_dispatch_stub_280,
   (mapi_func) shared_dispatch_stub_281,
   (mapi_func) shared_dispatch_stub_282,
   (mapi_func) shared_dispatch_stub_283,
   (mapi_func) shared_dispatch_stub_284,
   (mapi_func) shared_dispatch_stub_285,
   (mapi_func) shared_dispatch_stub_286,
   (mapi_func) shared_dispatch_stub_287,
   (mapi_func) shared_dispatch_stub_288,
   (mapi_func) shared_dispatch_stub_289,
   (mapi_func) shared_dispatch_stub_290,
   (mapi_func) shared_dispatch_stub_291,
   (mapi_func) shared_dispatch_stub_292,
   (mapi_func) shared_dispatch_stub_293,
   (mapi_func) shared_dispatch_stub_294,
   (mapi_func) shared_dispatch_stub_295,
   (mapi_func) shared_dispatch_stub_296,
   (mapi_func) shared_dispatch_stub_297,
   (mapi_func) shared_dispatch_stub_298,
   (mapi_func) shared_dispatch_stub_299,
   (mapi_func) shared_dispatch_stub_300,
   (mapi_func) shared_dispatch_stub_301,
   (mapi_func) shared_dispatch_stub_302,
   (mapi_func) shared_dispatch_stub_303,
   (mapi_func) shared_dispatch_stub_304,
   (mapi_func) shared_dispatch_stub_305,
   (mapi_func) shared_dispatch_stub_306,
   (mapi_func) shared_dispatch_stub_307,
   (mapi_func) shared_dispatch_stub_308,
   (mapi_func) shared_dispatch_stub_309,
   (mapi_func) shared_dispatch_stub_310,
   (mapi_func) shared_dispatch_stub_311,
   (mapi_func) shared_dispatch_stub_312,
   (mapi_func) shared_dispatch_stub_313,
   (mapi_func) shared_dispatch_stub_314,
   (mapi_func) shared_dispatch_stub_315,
   (mapi_func) shared_dispatch_stub_316,
   (mapi_func) shared_dispatch_stub_317,
   (mapi_func) shared_dispatch_stub_318,
   (mapi_func) shared_dispatch_stub_319,
   (mapi_func) shared_dispatch_stub_320,
   (mapi_func) shared_dispatch_stub_321,
   (mapi_func) shared_dispatch_stub_322,
   (mapi_func) shared_dispatch_stub_323,
   (mapi_func) shared_dispatch_stub_324,
   (mapi_func) shared_dispatch_stub_325,
   (mapi_func) shared_dispatch_stub_326,
   (mapi_func) shared_dispatch_stub_327,
   (mapi_func) shared_dispatch_stub_328,
   (mapi_func) shared_dispatch_stub_329,
   (mapi_func) shared_dispatch_stub_330,
   (mapi_func) shared_dispatch_stub_331,
   (mapi_func) shared_dispatch_stub_332,
   (mapi_func) shared_dispatch_stub_333,
   (mapi_func) shared_dispatch_stub_334,
   (mapi_func) shared_dispatch_stub_335,
   (mapi_func) shared_dispatch_stub_336,
   (mapi_func) shared_dispatch_stub_337,
   (mapi_func) shared_dispatch_stub_338,
   (mapi_func) shared_dispatch_stub_339,
   (mapi_func) shared_dispatch_stub_340,
   (mapi_func) shared_dispatch_stub_341,
   (mapi_func) shared_dispatch_stub_342,
   (mapi_func) shared_dispatch_stub_343,
   (mapi_func) shared_dispatch_stub_344,
   (mapi_func) shared_dispatch_stub_345,
   (mapi_func) shared_dispatch_stub_346,
   (mapi_func) shared_dispatch_stub_347,
   (mapi_func) shared_dispatch_stub_348,
   (mapi_func) shared_dispatch_stub_349,
   (mapi_func) shared_dispatch_stub_350,
   (mapi_func) shared_dispatch_stub_351,
   (mapi_func) shared_dispatch_stub_352,
   (mapi_func) shared_dispatch_stub_353,
   (mapi_func) shared_dispatch_stub_354,
   (mapi_func) shared_dispatch_stub_355,
   (mapi_func) shared_dispatch_stub_356,
   (mapi_func) shared_dispatch_stub_357,
   (mapi_func) shared_dispatch_stub_358,
   (mapi_func) shared_dispatch_stub_359,
   (mapi_func) shared_dispatch_stub_360,
   (mapi_func) shared_dispatch_stub_361,
   (mapi_func) shared_dispatch_stub_362,
   (mapi_func) shared_dispatch_stub_363,
   (mapi_func) shared_dispatch_stub_364,
   (mapi_func) shared_dispatch_stub_365,
   (mapi_func) shared_dispatch_stub_366,
   (mapi_func) shared_dispatch_stub_367,
   (mapi_func) shared_dispatch_stub_368,
   (mapi_func) shared_dispatch_stub_369,
   (mapi_func) shared_dispatch_stub_370,
   (mapi_func) shared_dispatch_stub_371,
   (mapi_func) shared_dispatch_stub_372,
   (mapi_func) shared_dispatch_stub_373,
   (mapi_func) shared_dispatch_stub_374,
   (mapi_func) shared_dispatch_stub_375,
   (mapi_func) shared_dispatch_stub_376,
   (mapi_func) shared_dispatch_stub_377,
   (mapi_func) shared_dispatch_stub_378,
   (mapi_func) shared_dispatch_stub_379,
   (mapi_func) shared_dispatch_stub_380,
   (mapi_func) shared_dispatch_stub_381,
   (mapi_func) shared_dispatch_stub_382,
   (mapi_func) shared_dispatch_stub_383,
   (mapi_func) shared_dispatch_stub_384,
   (mapi_func) shared_dispatch_stub_385,
   (mapi_func) shared_dispatch_stub_386,
   (mapi_func) shared_dispatch_stub_387,
   (mapi_func) shared_dispatch_stub_388,
   (mapi_func) shared_dispatch_stub_389,
   (mapi_func) shared_dispatch_stub_390,
   (mapi_func) shared_dispatch_stub_391,
   (mapi_func) shared_dispatch_stub_392,
   (mapi_func) shared_dispatch_stub_393,
   (mapi_func) shared_dispatch_stub_394,
   (mapi_func) shared_dispatch_stub_395,
   (mapi_func) shared_dispatch_stub_396,
   (mapi_func) shared_dispatch_stub_397,
   (mapi_func) shared_dispatch_stub_398,
   (mapi_func) shared_dispatch_stub_399,
   (mapi_func) shared_dispatch_stub_400,
   (mapi_func) shared_dispatch_stub_401,
   (mapi_func) shared_dispatch_stub_402,
   (mapi_func) shared_dispatch_stub_403,
   (mapi_func) shared_dispatch_stub_404,
   (mapi_func) shared_dispatch_stub_405,
   (mapi_func) shared_dispatch_stub_406,
   (mapi_func) shared_dispatch_stub_407,
   (mapi_func) shared_dispatch_stub_408,
   (mapi_func) shared_dispatch_stub_409,
   (mapi_func) shared_dispatch_stub_410,
   (mapi_func) shared_dispatch_stub_411,
   (mapi_func) shared_dispatch_stub_412,
   (mapi_func) shared_dispatch_stub_413,
   (mapi_func) shared_dispatch_stub_414,
   (mapi_func) shared_dispatch_stub_415,
   (mapi_func) shared_dispatch_stub_416,
   (mapi_func) shared_dispatch_stub_417,
   (mapi_func) shared_dispatch_stub_418,
   (mapi_func) shared_dispatch_stub_419,
   (mapi_func) shared_dispatch_stub_420,
   (mapi_func) shared_dispatch_stub_421,
   (mapi_func) shared_dispatch_stub_422,
   (mapi_func) shared_dispatch_stub_423,
   (mapi_func) shared_dispatch_stub_424,
   (mapi_func) shared_dispatch_stub_425,
   (mapi_func) shared_dispatch_stub_426,
   (mapi_func) shared_dispatch_stub_427,
   (mapi_func) shared_dispatch_stub_428,
   (mapi_func) shared_dispatch_stub_429,
   (mapi_func) shared_dispatch_stub_430,
   (mapi_func) shared_dispatch_stub_431,
   (mapi_func) shared_dispatch_stub_432,
   (mapi_func) shared_dispatch_stub_433,
   (mapi_func) shared_dispatch_stub_434,
   (mapi_func) shared_dispatch_stub_435,
   (mapi_func) shared_dispatch_stub_436,
   (mapi_func) shared_dispatch_stub_437,
   (mapi_func) shared_dispatch_stub_438,
   (mapi_func) shared_dispatch_stub_439,
   (mapi_func) shared_dispatch_stub_440,
   (mapi_func) shared_dispatch_stub_441,
   (mapi_func) shared_dispatch_stub_442,
   (mapi_func) shared_dispatch_stub_443,
   (mapi_func) shared_dispatch_stub_444,
   (mapi_func) shared_dispatch_stub_445,
   (mapi_func) shared_dispatch_stub_446,
   (mapi_func) shared_dispatch_stub_447,
   (mapi_func) shared_dispatch_stub_448,
   (mapi_func) shared_dispatch_stub_449,
   (mapi_func) shared_dispatch_stub_450,
   (mapi_func) shared_dispatch_stub_451,
   (mapi_func) shared_dispatch_stub_452,
   (mapi_func) shared_dispatch_stub_453,
   (mapi_func) shared_dispatch_stub_454,
   (mapi_func) shared_dispatch_stub_455,
   (mapi_func) shared_dispatch_stub_456,
   (mapi_func) shared_dispatch_stub_457,
   (mapi_func) shared_dispatch_stub_458,
   (mapi_func) shared_dispatch_stub_459,
   (mapi_func) shared_dispatch_stub_460,
   (mapi_func) shared_dispatch_stub_461,
   (mapi_func) shared_dispatch_stub_462,
   (mapi_func) shared_dispatch_stub_463,
   (mapi_func) shared_dispatch_stub_464,
   (mapi_func) shared_dispatch_stub_465,
   (mapi_func) shared_dispatch_stub_466,
   (mapi_func) shared_dispatch_stub_467,
   (mapi_func) shared_dispatch_stub_468,
   (mapi_func) shared_dispatch_stub_469,
   (mapi_func) shared_dispatch_stub_470,
   (mapi_func) shared_dispatch_stub_471,
   (mapi_func) shared_dispatch_stub_472,
   (mapi_func) shared_dispatch_stub_473,
   (mapi_func) shared_dispatch_stub_474,
   (mapi_func) shared_dispatch_stub_475,
   (mapi_func) shared_dispatch_stub_476,
   (mapi_func) shared_dispatch_stub_477,
   (mapi_func) shared_dispatch_stub_478,
   (mapi_func) shared_dispatch_stub_479,
   (mapi_func) shared_dispatch_stub_480,
   (mapi_func) shared_dispatch_stub_481,
   (mapi_func) shared_dispatch_stub_482,
   (mapi_func) shared_dispatch_stub_483,
   (mapi_func) shared_dispatch_stub_484,
   (mapi_func) shared_dispatch_stub_485,
   (mapi_func) shared_dispatch_stub_486,
   (mapi_func) shared_dispatch_stub_487,
   (mapi_func) shared_dispatch_stub_488,
   (mapi_func) shared_dispatch_stub_489,
   (mapi_func) shared_dispatch_stub_490,
   (mapi_func) shared_dispatch_stub_491,
   (mapi_func) shared_dispatch_stub_492,
   (mapi_func) shared_dispatch_stub_493,
   (mapi_func) shared_dispatch_stub_494,
   (mapi_func) shared_dispatch_stub_495,
   (mapi_func) shared_dispatch_stub_496,
   (mapi_func) shared_dispatch_stub_497,
   (mapi_func) shared_dispatch_stub_498,
   (mapi_func) shared_dispatch_stub_499,
   (mapi_func) shared_dispatch_stub_500,
   (mapi_func) shared_dispatch_stub_501,
   (mapi_func) shared_dispatch_stub_502,
   (mapi_func) shared_dispatch_stub_503,
   (mapi_func) shared_dispatch_stub_504,
   (mapi_func) shared_dispatch_stub_505,
   (mapi_func) shared_dispatch_stub_506,
   (mapi_func) shared_dispatch_stub_507,
   (mapi_func) shared_dispatch_stub_508,
   (mapi_func) shared_dispatch_stub_509,
   (mapi_func) shared_dispatch_stub_510,
   (mapi_func) shared_dispatch_stub_511,
   (mapi_func) shared_dispatch_stub_512,
   (mapi_func) shared_dispatch_stub_513,
   (mapi_func) shared_dispatch_stub_514,
   (mapi_func) shared_dispatch_stub_515,
   (mapi_func) shared_dispatch_stub_516,
   (mapi_func) shared_dispatch_stub_517,
   (mapi_func) shared_dispatch_stub_518,
   (mapi_func) shared_dispatch_stub_519,
   (mapi_func) shared_dispatch_stub_520,
   (mapi_func) shared_dispatch_stub_521,
   (mapi_func) shared_dispatch_stub_522,
   (mapi_func) shared_dispatch_stub_523,
   (mapi_func) shared_dispatch_stub_524,
   (mapi_func) shared_dispatch_stub_525,
   (mapi_func) shared_dispatch_stub_526,
   (mapi_func) shared_dispatch_stub_527,
   (mapi_func) shared_dispatch_stub_528,
   (mapi_func) shared_dispatch_stub_529,
   (mapi_func) shared_dispatch_stub_530,
   (mapi_func) shared_dispatch_stub_531,
   (mapi_func) shared_dispatch_stub_532,
   (mapi_func) shared_dispatch_stub_533,
   (mapi_func) shared_dispatch_stub_534,
   (mapi_func) shared_dispatch_stub_535,
   (mapi_func) shared_dispatch_stub_536,
   (mapi_func) shared_dispatch_stub_537,
   (mapi_func) shared_dispatch_stub_538,
   (mapi_func) shared_dispatch_stub_539,
   (mapi_func) shared_dispatch_stub_540,
   (mapi_func) shared_dispatch_stub_541,
   (mapi_func) shared_dispatch_stub_542,
   (mapi_func) shared_dispatch_stub_543,
   (mapi_func) shared_dispatch_stub_544,
   (mapi_func) shared_dispatch_stub_545,
   (mapi_func) shared_dispatch_stub_546,
   (mapi_func) shared_dispatch_stub_547,
   (mapi_func) shared_dispatch_stub_548,
   (mapi_func) shared_dispatch_stub_549,
   (mapi_func) shared_dispatch_stub_550,
   (mapi_func) shared_dispatch_stub_551,
   (mapi_func) shared_dispatch_stub_552,
   (mapi_func) shared_dispatch_stub_553,
   (mapi_func) shared_dispatch_stub_554,
   (mapi_func) shared_dispatch_stub_555,
   (mapi_func) shared_dispatch_stub_556,
   (mapi_func) shared_dispatch_stub_557,
   (mapi_func) shared_dispatch_stub_558,
   (mapi_func) shared_dispatch_stub_559,
   (mapi_func) shared_dispatch_stub_560,
   (mapi_func) shared_dispatch_stub_561,
   (mapi_func) shared_dispatch_stub_562,
   (mapi_func) shared_dispatch_stub_563,
   (mapi_func) shared_dispatch_stub_564,
   (mapi_func) shared_dispatch_stub_565,
   (mapi_func) shared_dispatch_stub_566,
   (mapi_func) shared_dispatch_stub_567,
   (mapi_func) shared_dispatch_stub_568,
   (mapi_func) shared_dispatch_stub_569,
   (mapi_func) shared_dispatch_stub_570,
   (mapi_func) shared_dispatch_stub_571,
   (mapi_func) shared_dispatch_stub_572,
   (mapi_func) shared_dispatch_stub_573,
   (mapi_func) shared_dispatch_stub_574,
   (mapi_func) shared_dispatch_stub_575,
   (mapi_func) shared_dispatch_stub_576,
   (mapi_func) shared_dispatch_stub_577,
   (mapi_func) shared_dispatch_stub_578,
   (mapi_func) shared_dispatch_stub_579,
   (mapi_func) shared_dispatch_stub_580,
   (mapi_func) shared_dispatch_stub_581,
   (mapi_func) shared_dispatch_stub_582,
   (mapi_func) shared_dispatch_stub_583,
   (mapi_func) shared_dispatch_stub_584,
   (mapi_func) shared_dispatch_stub_585,
   (mapi_func) shared_dispatch_stub_586,
   (mapi_func) shared_dispatch_stub_587,
   (mapi_func) shared_dispatch_stub_588,
   (mapi_func) shared_dispatch_stub_589,
   (mapi_func) shared_dispatch_stub_590,
   (mapi_func) shared_dispatch_stub_591,
   (mapi_func) shared_dispatch_stub_592,
   (mapi_func) shared_dispatch_stub_593,
   (mapi_func) shared_dispatch_stub_594,
   (mapi_func) shared_dispatch_stub_595,
   (mapi_func) shared_dispatch_stub_596,
   (mapi_func) shared_dispatch_stub_597,
   (mapi_func) shared_dispatch_stub_598,
   (mapi_func) shared_dispatch_stub_599,
   (mapi_func) shared_dispatch_stub_600,
   (mapi_func) shared_dispatch_stub_601,
   (mapi_func) shared_dispatch_stub_602,
   (mapi_func) shared_dispatch_stub_603,
   (mapi_func) shared_dispatch_stub_604,
   (mapi_func) shared_dispatch_stub_605,
   (mapi_func) shared_dispatch_stub_606,
   (mapi_func) shared_dispatch_stub_607,
   (mapi_func) shared_dispatch_stub_608,
   (mapi_func) shared_dispatch_stub_609,
   (mapi_func) shared_dispatch_stub_610,
   (mapi_func) shared_dispatch_stub_611,
   (mapi_func) shared_dispatch_stub_612,
   (mapi_func) shared_dispatch_stub_613,
   (mapi_func) shared_dispatch_stub_614,
   (mapi_func) shared_dispatch_stub_615,
   (mapi_func) shared_dispatch_stub_616,
   (mapi_func) shared_dispatch_stub_617,
   (mapi_func) shared_dispatch_stub_618,
   (mapi_func) shared_dispatch_stub_619,
   (mapi_func) shared_dispatch_stub_620,
   (mapi_func) shared_dispatch_stub_621,
   (mapi_func) shared_dispatch_stub_622,
   (mapi_func) shared_dispatch_stub_623,
   (mapi_func) shared_dispatch_stub_624,
   (mapi_func) shared_dispatch_stub_625,
   (mapi_func) shared_dispatch_stub_626,
   (mapi_func) shared_dispatch_stub_627,
   (mapi_func) shared_dispatch_stub_628,
   (mapi_func) shared_dispatch_stub_629,
   (mapi_func) shared_dispatch_stub_630,
   (mapi_func) shared_dispatch_stub_631,
   (mapi_func) shared_dispatch_stub_632,
   (mapi_func) shared_dispatch_stub_633,
   (mapi_func) shared_dispatch_stub_634,
   (mapi_func) shared_dispatch_stub_635,
   (mapi_func) shared_dispatch_stub_636,
   (mapi_func) shared_dispatch_stub_637,
   (mapi_func) shared_dispatch_stub_638,
   (mapi_func) shared_dispatch_stub_639,
   (mapi_func) shared_dispatch_stub_640,
   (mapi_func) shared_dispatch_stub_641,
   (mapi_func) shared_dispatch_stub_642,
   (mapi_func) shared_dispatch_stub_643,
   (mapi_func) shared_dispatch_stub_644,
   (mapi_func) shared_dispatch_stub_645,
   (mapi_func) shared_dispatch_stub_646,
   (mapi_func) shared_dispatch_stub_647,
   (mapi_func) shared_dispatch_stub_648,
   (mapi_func) shared_dispatch_stub_649,
   (mapi_func) shared_dispatch_stub_650,
   (mapi_func) shared_dispatch_stub_651,
   (mapi_func) shared_dispatch_stub_652,
   (mapi_func) shared_dispatch_stub_653,
   (mapi_func) shared_dispatch_stub_654,
   (mapi_func) shared_dispatch_stub_655,
   (mapi_func) shared_dispatch_stub_656,
   (mapi_func) shared_dispatch_stub_657,
   (mapi_func) shared_dispatch_stub_658,
   (mapi_func) shared_dispatch_stub_659,
   (mapi_func) shared_dispatch_stub_660,
   (mapi_func) shared_dispatch_stub_661,
   (mapi_func) shared_dispatch_stub_662,
   (mapi_func) shared_dispatch_stub_663,
   (mapi_func) shared_dispatch_stub_664,
   (mapi_func) shared_dispatch_stub_665,
   (mapi_func) shared_dispatch_stub_666,
   (mapi_func) shared_dispatch_stub_667,
   (mapi_func) shared_dispatch_stub_668,
   (mapi_func) shared_dispatch_stub_669,
   (mapi_func) shared_dispatch_stub_670,
   (mapi_func) shared_dispatch_stub_671,
   (mapi_func) shared_dispatch_stub_672,
   (mapi_func) shared_dispatch_stub_673,
   (mapi_func) shared_dispatch_stub_674,
   (mapi_func) shared_dispatch_stub_675,
   (mapi_func) shared_dispatch_stub_676,
   (mapi_func) shared_dispatch_stub_677,
   (mapi_func) shared_dispatch_stub_678,
   (mapi_func) shared_dispatch_stub_679,
   (mapi_func) shared_dispatch_stub_680,
   (mapi_func) shared_dispatch_stub_681,
   (mapi_func) shared_dispatch_stub_682,
   (mapi_func) shared_dispatch_stub_683,
   (mapi_func) shared_dispatch_stub_684,
   (mapi_func) shared_dispatch_stub_685,
   (mapi_func) shared_dispatch_stub_686,
   (mapi_func) shared_dispatch_stub_687,
   (mapi_func) shared_dispatch_stub_688,
   (mapi_func) shared_dispatch_stub_689,
   (mapi_func) shared_dispatch_stub_690,
   (mapi_func) shared_dispatch_stub_691,
   (mapi_func) shared_dispatch_stub_692,
   (mapi_func) shared_dispatch_stub_693,
   (mapi_func) shared_dispatch_stub_694,
   (mapi_func) shared_dispatch_stub_695,
   (mapi_func) shared_dispatch_stub_696,
   (mapi_func) shared_dispatch_stub_697,
   (mapi_func) shared_dispatch_stub_698,
   (mapi_func) shared_dispatch_stub_699,
   (mapi_func) shared_dispatch_stub_700,
   (mapi_func) shared_dispatch_stub_701,
   (mapi_func) shared_dispatch_stub_702,
   (mapi_func) shared_dispatch_stub_703,
   (mapi_func) shared_dispatch_stub_704,
   (mapi_func) shared_dispatch_stub_705,
   (mapi_func) shared_dispatch_stub_706,
   (mapi_func) shared_dispatch_stub_707,
   (mapi_func) shared_dispatch_stub_708,
   (mapi_func) shared_dispatch_stub_709,
   (mapi_func) shared_dispatch_stub_710,
   (mapi_func) shared_dispatch_stub_711,
   (mapi_func) shared_dispatch_stub_712,
   (mapi_func) shared_dispatch_stub_713,
   (mapi_func) shared_dispatch_stub_714,
   (mapi_func) shared_dispatch_stub_715,
   (mapi_func) shared_dispatch_stub_716,
   (mapi_func) shared_dispatch_stub_717,
   (mapi_func) shared_dispatch_stub_718,
   (mapi_func) shared_dispatch_stub_719,
   (mapi_func) shared_dispatch_stub_720,
   (mapi_func) shared_dispatch_stub_721,
   (mapi_func) shared_dispatch_stub_722,
   (mapi_func) shared_dispatch_stub_723,
   (mapi_func) shared_dispatch_stub_724,
   (mapi_func) shared_dispatch_stub_725,
   (mapi_func) shared_dispatch_stub_726,
   (mapi_func) shared_dispatch_stub_727,
   (mapi_func) shared_dispatch_stub_728,
   (mapi_func) shared_dispatch_stub_729,
   (mapi_func) shared_dispatch_stub_730,
   (mapi_func) shared_dispatch_stub_731,
   (mapi_func) shared_dispatch_stub_732,
   (mapi_func) shared_dispatch_stub_733,
   (mapi_func) shared_dispatch_stub_734,
   (mapi_func) shared_dispatch_stub_735,
   (mapi_func) shared_dispatch_stub_736,
   (mapi_func) shared_dispatch_stub_737,
   (mapi_func) shared_dispatch_stub_738,
   (mapi_func) shared_dispatch_stub_739,
   (mapi_func) shared_dispatch_stub_740,
   (mapi_func) shared_dispatch_stub_741,
   (mapi_func) shared_dispatch_stub_742,
   (mapi_func) shared_dispatch_stub_743,
   (mapi_func) shared_dispatch_stub_744,
   (mapi_func) shared_dispatch_stub_745,
   (mapi_func) shared_dispatch_stub_746,
   (mapi_func) shared_dispatch_stub_747,
   (mapi_func) shared_dispatch_stub_748,
   (mapi_func) shared_dispatch_stub_749,
   (mapi_func) shared_dispatch_stub_750,
   (mapi_func) shared_dispatch_stub_751,
   (mapi_func) shared_dispatch_stub_752,
   (mapi_func) shared_dispatch_stub_753,
   (mapi_func) shared_dispatch_stub_754,
   (mapi_func) shared_dispatch_stub_755,
   (mapi_func) shared_dispatch_stub_756,
   (mapi_func) shared_dispatch_stub_757,
   (mapi_func) shared_dispatch_stub_758,
   (mapi_func) shared_dispatch_stub_759,
   (mapi_func) shared_dispatch_stub_760,
   (mapi_func) shared_dispatch_stub_761,
   (mapi_func) shared_dispatch_stub_762,
   (mapi_func) shared_dispatch_stub_763,
   (mapi_func) shared_dispatch_stub_764,
   (mapi_func) shared_dispatch_stub_765,
   (mapi_func) shared_dispatch_stub_766,
   (mapi_func) shared_dispatch_stub_767,
   (mapi_func) shared_dispatch_stub_768,
   (mapi_func) shared_dispatch_stub_769,
   (mapi_func) shared_dispatch_stub_770,
   (mapi_func) shared_dispatch_stub_771,
   (mapi_func) shared_dispatch_stub_772,
   (mapi_func) shared_dispatch_stub_773,
   (mapi_func) shared_dispatch_stub_774,
   (mapi_func) shared_dispatch_stub_775,
   (mapi_func) shared_dispatch_stub_776,
   (mapi_func) shared_dispatch_stub_777,
   (mapi_func) shared_dispatch_stub_778,
   (mapi_func) shared_dispatch_stub_779,
   (mapi_func) shared_dispatch_stub_780,
   (mapi_func) shared_dispatch_stub_781,
   (mapi_func) shared_dispatch_stub_782,
   (mapi_func) shared_dispatch_stub_783,
   (mapi_func) shared_dispatch_stub_784,
   (mapi_func) shared_dispatch_stub_785,
   (mapi_func) shared_dispatch_stub_786,
   (mapi_func) shared_dispatch_stub_787,
   (mapi_func) shared_dispatch_stub_788,
   (mapi_func) shared_dispatch_stub_789,
   (mapi_func) shared_dispatch_stub_790,
   (mapi_func) shared_dispatch_stub_791,
   (mapi_func) shared_dispatch_stub_792,
   (mapi_func) shared_dispatch_stub_793,
   (mapi_func) shared_dispatch_stub_794,
   (mapi_func) shared_dispatch_stub_795,
   (mapi_func) shared_dispatch_stub_796,
   (mapi_func) shared_dispatch_stub_797,
   (mapi_func) shared_dispatch_stub_798,
   (mapi_func) shared_dispatch_stub_799,
   (mapi_func) shared_dispatch_stub_800,
   (mapi_func) shared_dispatch_stub_801,
   (mapi_func) shared_dispatch_stub_802,
   (mapi_func) shared_dispatch_stub_803,
   (mapi_func) shared_dispatch_stub_804,
   (mapi_func) shared_dispatch_stub_805,
   (mapi_func) shared_dispatch_stub_806,
   (mapi_func) shared_dispatch_stub_807,
   (mapi_func) shared_dispatch_stub_808,
   (mapi_func) shared_dispatch_stub_809,
   (mapi_func) shared_dispatch_stub_810,
   (mapi_func) shared_dispatch_stub_811,
   (mapi_func) shared_dispatch_stub_812,
   (mapi_func) shared_dispatch_stub_813,
   (mapi_func) shared_dispatch_stub_814,
   (mapi_func) shared_dispatch_stub_815,
   (mapi_func) shared_dispatch_stub_816,
   (mapi_func) shared_dispatch_stub_817,
   (mapi_func) shared_dispatch_stub_818,
   (mapi_func) shared_dispatch_stub_819,
   (mapi_func) shared_dispatch_stub_820,
   (mapi_func) shared_dispatch_stub_821,
   (mapi_func) shared_dispatch_stub_822,
   (mapi_func) shared_dispatch_stub_823,
   (mapi_func) shared_dispatch_stub_824,
   (mapi_func) shared_dispatch_stub_825,
   (mapi_func) shared_dispatch_stub_826,
   (mapi_func) shared_dispatch_stub_827,
   (mapi_func) shared_dispatch_stub_828,
   (mapi_func) shared_dispatch_stub_829,
   (mapi_func) shared_dispatch_stub_830,
   (mapi_func) shared_dispatch_stub_831,
   (mapi_func) shared_dispatch_stub_832,
   (mapi_func) shared_dispatch_stub_833,
   (mapi_func) shared_dispatch_stub_834,
   (mapi_func) shared_dispatch_stub_835,
   (mapi_func) shared_dispatch_stub_836,
   (mapi_func) shared_dispatch_stub_837,
   (mapi_func) shared_dispatch_stub_838,
   (mapi_func) shared_dispatch_stub_839,
   (mapi_func) shared_dispatch_stub_840,
   (mapi_func) shared_dispatch_stub_841,
   (mapi_func) shared_dispatch_stub_842,
   (mapi_func) shared_dispatch_stub_843,
   (mapi_func) shared_dispatch_stub_844,
   (mapi_func) shared_dispatch_stub_845,
   (mapi_func) shared_dispatch_stub_846,
   (mapi_func) shared_dispatch_stub_847,
   (mapi_func) shared_dispatch_stub_848,
   (mapi_func) shared_dispatch_stub_849,
   (mapi_func) shared_dispatch_stub_850,
   (mapi_func) shared_dispatch_stub_851,
   (mapi_func) shared_dispatch_stub_852,
   (mapi_func) shared_dispatch_stub_853,
   (mapi_func) shared_dispatch_stub_854,
   (mapi_func) shared_dispatch_stub_855,
   (mapi_func) shared_dispatch_stub_856,
   (mapi_func) shared_dispatch_stub_857,
   (mapi_func) shared_dispatch_stub_858,
   (mapi_func) shared_dispatch_stub_859,
   (mapi_func) shared_dispatch_stub_860,
   (mapi_func) shared_dispatch_stub_861,
   (mapi_func) shared_dispatch_stub_862,
   (mapi_func) shared_dispatch_stub_863,
   (mapi_func) shared_dispatch_stub_864,
   (mapi_func) shared_dispatch_stub_865,
   (mapi_func) shared_dispatch_stub_866,
   (mapi_func) shared_dispatch_stub_867,
   (mapi_func) shared_dispatch_stub_868,
   (mapi_func) shared_dispatch_stub_869,
   (mapi_func) shared_dispatch_stub_870,
   (mapi_func) shared_dispatch_stub_871,
   (mapi_func) shared_dispatch_stub_872,
   (mapi_func) shared_dispatch_stub_873,
   (mapi_func) shared_dispatch_stub_874,
   (mapi_func) shared_dispatch_stub_875,
   (mapi_func) shared_dispatch_stub_876,
   (mapi_func) shared_dispatch_stub_877,
   (mapi_func) shared_dispatch_stub_878,
   (mapi_func) shared_dispatch_stub_879,
   (mapi_func) shared_dispatch_stub_880,
   (mapi_func) shared_dispatch_stub_881,
   (mapi_func) shared_dispatch_stub_882,
   (mapi_func) shared_dispatch_stub_883,
   (mapi_func) shared_dispatch_stub_884,
   (mapi_func) shared_dispatch_stub_885,
   (mapi_func) shared_dispatch_stub_886,
   (mapi_func) shared_dispatch_stub_887,
   (mapi_func) shared_dispatch_stub_888,
   (mapi_func) shared_dispatch_stub_889,
   (mapi_func) shared_dispatch_stub_890,
   (mapi_func) shared_dispatch_stub_891,
   (mapi_func) shared_dispatch_stub_892,
   (mapi_func) shared_dispatch_stub_893,
   (mapi_func) shared_dispatch_stub_894,
   (mapi_func) shared_dispatch_stub_895,
   (mapi_func) shared_dispatch_stub_896,
   (mapi_func) shared_dispatch_stub_897,
   (mapi_func) shared_dispatch_stub_898,
   (mapi_func) shared_dispatch_stub_899,
   (mapi_func) shared_dispatch_stub_900,
   (mapi_func) shared_dispatch_stub_901,
   (mapi_func) shared_dispatch_stub_902,
   (mapi_func) shared_dispatch_stub_903,
   (mapi_func) shared_dispatch_stub_904,
   (mapi_func) shared_dispatch_stub_905,
   (mapi_func) shared_dispatch_stub_906,
   (mapi_func) shared_dispatch_stub_907,
   (mapi_func) shared_dispatch_stub_908,
   (mapi_func) shared_dispatch_stub_909,
   (mapi_func) shared_dispatch_stub_910,
   (mapi_func) shared_dispatch_stub_911,
   (mapi_func) shared_dispatch_stub_912,
   (mapi_func) shared_dispatch_stub_913,
   (mapi_func) shared_dispatch_stub_914,
   (mapi_func) shared_dispatch_stub_915,
   (mapi_func) shared_dispatch_stub_916,
   (mapi_func) shared_dispatch_stub_917,
   (mapi_func) shared_dispatch_stub_918,
   (mapi_func) shared_dispatch_stub_919,
   (mapi_func) shared_dispatch_stub_920,
   (mapi_func) shared_dispatch_stub_921,
   (mapi_func) shared_dispatch_stub_922,
   (mapi_func) shared_dispatch_stub_923,
   (mapi_func) shared_dispatch_stub_924,
   (mapi_func) shared_dispatch_stub_925,
   (mapi_func) shared_dispatch_stub_926,
   (mapi_func) shared_dispatch_stub_927,
   (mapi_func) shared_dispatch_stub_928,
   (mapi_func) shared_dispatch_stub_929,
   (mapi_func) shared_dispatch_stub_930,
   (mapi_func) shared_dispatch_stub_931,
   (mapi_func) shared_dispatch_stub_932,
   (mapi_func) shared_dispatch_stub_933,
   (mapi_func) shared_dispatch_stub_934,
   (mapi_func) shared_dispatch_stub_935,
   (mapi_func) shared_dispatch_stub_936,
   (mapi_func) shared_dispatch_stub_937,
   (mapi_func) shared_dispatch_stub_938,
   (mapi_func) shared_dispatch_stub_939,
   (mapi_func) shared_dispatch_stub_940,
   (mapi_func) shared_dispatch_stub_941,
   (mapi_func) shared_dispatch_stub_942,
   (mapi_func) shared_dispatch_stub_943,
   (mapi_func) shared_dispatch_stub_944,
   (mapi_func) shared_dispatch_stub_945,
   (mapi_func) shared_dispatch_stub_946,
   (mapi_func) shared_dispatch_stub_947,
   (mapi_func) shared_dispatch_stub_948,
   (mapi_func) shared_dispatch_stub_949,
   (mapi_func) shared_dispatch_stub_950,
   (mapi_func) shared_dispatch_stub_951,
   (mapi_func) shared_dispatch_stub_952,
   (mapi_func) shared_dispatch_stub_953,
   (mapi_func) shared_dispatch_stub_954,
   (mapi_func) shared_dispatch_stub_955,
   (mapi_func) shared_dispatch_stub_956,
   (mapi_func) shared_dispatch_stub_957,
   (mapi_func) shared_dispatch_stub_958,
   (mapi_func) shared_dispatch_stub_959,
   (mapi_func) shared_dispatch_stub_960,
   (mapi_func) shared_dispatch_stub_961,
   (mapi_func) shared_dispatch_stub_962,
   (mapi_func) shared_dispatch_stub_963,
   (mapi_func) shared_dispatch_stub_964,
   (mapi_func) shared_dispatch_stub_965,
   (mapi_func) shared_dispatch_stub_966,
   (mapi_func) shared_dispatch_stub_967,
   (mapi_func) shared_dispatch_stub_968,
   (mapi_func) shared_dispatch_stub_969,
   (mapi_func) shared_dispatch_stub_970,
   (mapi_func) shared_dispatch_stub_971,
   (mapi_func) shared_dispatch_stub_972,
   (mapi_func) shared_dispatch_stub_973,
   (mapi_func) shared_dispatch_stub_974,
   (mapi_func) shared_dispatch_stub_975,
   (mapi_func) shared_dispatch_stub_976,
   (mapi_func) shared_dispatch_stub_977,
   (mapi_func) shared_dispatch_stub_978,
   (mapi_func) shared_dispatch_stub_979,
   (mapi_func) shared_dispatch_stub_980,
   (mapi_func) shared_dispatch_stub_981,
   (mapi_func) shared_dispatch_stub_982,
   (mapi_func) shared_dispatch_stub_983,
   (mapi_func) shared_dispatch_stub_984,
   (mapi_func) shared_dispatch_stub_985,
   (mapi_func) shared_dispatch_stub_986,
   (mapi_func) shared_dispatch_stub_987,
   (mapi_func) shared_dispatch_stub_988,
   (mapi_func) shared_dispatch_stub_989,
   (mapi_func) shared_dispatch_stub_990,
   (mapi_func) shared_dispatch_stub_991,
   (mapi_func) shared_dispatch_stub_992,
   (mapi_func) shared_dispatch_stub_993,
   (mapi_func) shared_dispatch_stub_994,
   (mapi_func) shared_dispatch_stub_995,
   (mapi_func) shared_dispatch_stub_996,
   (mapi_func) shared_dispatch_stub_997,
   (mapi_func) shared_dispatch_stub_998,
   (mapi_func) shared_dispatch_stub_999,
   (mapi_func) shared_dispatch_stub_1000,
   (mapi_func) shared_dispatch_stub_1001,
   (mapi_func) shared_dispatch_stub_1002,
   (mapi_func) shared_dispatch_stub_1003,
   (mapi_func) shared_dispatch_stub_1004,
   (mapi_func) shared_dispatch_stub_1005,
   (mapi_func) shared_dispatch_stub_1006,
   (mapi_func) shared_dispatch_stub_1007,
   (mapi_func) shared_dispatch_stub_1008,
   (mapi_func) shared_dispatch_stub_1009,
   (mapi_func) shared_dispatch_stub_1010,
   (mapi_func) shared_dispatch_stub_1011,
   (mapi_func) shared_dispatch_stub_1012,
   (mapi_func) shared_dispatch_stub_1013,
   (mapi_func) shared_dispatch_stub_1014,
   (mapi_func) shared_dispatch_stub_1015,
   (mapi_func) shared_dispatch_stub_1016,
   (mapi_func) shared_dispatch_stub_1017,
   (mapi_func) shared_dispatch_stub_1018,
   (mapi_func) shared_dispatch_stub_1019,
   (mapi_func) shared_dispatch_stub_1020,
   (mapi_func) shared_dispatch_stub_1021,
   (mapi_func) shared_dispatch_stub_1022,
   (mapi_func) shared_dispatch_stub_1023,
   (mapi_func) shared_dispatch_stub_1024,
   (mapi_func) shared_dispatch_stub_1025,
   (mapi_func) shared_dispatch_stub_1026,
   (mapi_func) shared_dispatch_stub_1027,
   (mapi_func) shared_dispatch_stub_1028,
   (mapi_func) shared_dispatch_stub_1029,
   (mapi_func) shared_dispatch_stub_1030,
   (mapi_func) shared_dispatch_stub_1031,
   (mapi_func) shared_dispatch_stub_1032,
   (mapi_func) shared_dispatch_stub_1033,
   (mapi_func) shared_dispatch_stub_1034,
   (mapi_func) shared_dispatch_stub_1035
};
#undef MAPI_TMP_PUBLIC_ENTRIES
#endif /* MAPI_TMP_PUBLIC_ENTRIES */

#ifdef MAPI_TMP_STUB_ASM_GCC
__asm__(
".hidden ""shared_dispatch_stub_0""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_0")"\n"
"\t"STUB_ASM_CODE("0")"\n"

".hidden ""shared_dispatch_stub_1""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1")"\n"
"\t"STUB_ASM_CODE("1")"\n"

".hidden ""shared_dispatch_stub_2""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_2")"\n"
"\t"STUB_ASM_CODE("2")"\n"

".hidden ""shared_dispatch_stub_3""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_3")"\n"
"\t"STUB_ASM_CODE("3")"\n"

".hidden ""shared_dispatch_stub_4""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_4")"\n"
"\t"STUB_ASM_CODE("4")"\n"

".hidden ""shared_dispatch_stub_5""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_5")"\n"
"\t"STUB_ASM_CODE("5")"\n"

".hidden ""shared_dispatch_stub_6""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_6")"\n"
"\t"STUB_ASM_CODE("6")"\n"

".hidden ""shared_dispatch_stub_7""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_7")"\n"
"\t"STUB_ASM_CODE("7")"\n"

".hidden ""shared_dispatch_stub_8""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_8")"\n"
"\t"STUB_ASM_CODE("8")"\n"

".hidden ""shared_dispatch_stub_9""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_9")"\n"
"\t"STUB_ASM_CODE("9")"\n"

".hidden ""shared_dispatch_stub_10""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_10")"\n"
"\t"STUB_ASM_CODE("10")"\n"

".hidden ""shared_dispatch_stub_11""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_11")"\n"
"\t"STUB_ASM_CODE("11")"\n"

".hidden ""shared_dispatch_stub_12""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_12")"\n"
"\t"STUB_ASM_CODE("12")"\n"

".hidden ""shared_dispatch_stub_13""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_13")"\n"
"\t"STUB_ASM_CODE("13")"\n"

".hidden ""shared_dispatch_stub_14""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_14")"\n"
"\t"STUB_ASM_CODE("14")"\n"

".hidden ""shared_dispatch_stub_15""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_15")"\n"
"\t"STUB_ASM_CODE("15")"\n"

".hidden ""shared_dispatch_stub_16""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_16")"\n"
"\t"STUB_ASM_CODE("16")"\n"

".hidden ""shared_dispatch_stub_17""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_17")"\n"
"\t"STUB_ASM_CODE("17")"\n"

".hidden ""shared_dispatch_stub_18""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_18")"\n"
"\t"STUB_ASM_CODE("18")"\n"

".hidden ""shared_dispatch_stub_19""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_19")"\n"
"\t"STUB_ASM_CODE("19")"\n"

".hidden ""shared_dispatch_stub_20""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_20")"\n"
"\t"STUB_ASM_CODE("20")"\n"

".hidden ""shared_dispatch_stub_21""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_21")"\n"
"\t"STUB_ASM_CODE("21")"\n"

".hidden ""shared_dispatch_stub_22""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_22")"\n"
"\t"STUB_ASM_CODE("22")"\n"

".hidden ""shared_dispatch_stub_23""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_23")"\n"
"\t"STUB_ASM_CODE("23")"\n"

".hidden ""shared_dispatch_stub_24""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_24")"\n"
"\t"STUB_ASM_CODE("24")"\n"

".hidden ""shared_dispatch_stub_25""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_25")"\n"
"\t"STUB_ASM_CODE("25")"\n"

".hidden ""shared_dispatch_stub_26""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_26")"\n"
"\t"STUB_ASM_CODE("26")"\n"

".hidden ""shared_dispatch_stub_27""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_27")"\n"
"\t"STUB_ASM_CODE("27")"\n"

".hidden ""shared_dispatch_stub_28""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_28")"\n"
"\t"STUB_ASM_CODE("28")"\n"

".hidden ""shared_dispatch_stub_29""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_29")"\n"
"\t"STUB_ASM_CODE("29")"\n"

".hidden ""shared_dispatch_stub_30""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_30")"\n"
"\t"STUB_ASM_CODE("30")"\n"

".hidden ""shared_dispatch_stub_31""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_31")"\n"
"\t"STUB_ASM_CODE("31")"\n"

".hidden ""shared_dispatch_stub_32""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_32")"\n"
"\t"STUB_ASM_CODE("32")"\n"

".hidden ""shared_dispatch_stub_33""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_33")"\n"
"\t"STUB_ASM_CODE("33")"\n"

".hidden ""shared_dispatch_stub_34""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_34")"\n"
"\t"STUB_ASM_CODE("34")"\n"

".hidden ""shared_dispatch_stub_35""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_35")"\n"
"\t"STUB_ASM_CODE("35")"\n"

".hidden ""shared_dispatch_stub_36""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_36")"\n"
"\t"STUB_ASM_CODE("36")"\n"

".hidden ""shared_dispatch_stub_37""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_37")"\n"
"\t"STUB_ASM_CODE("37")"\n"

".hidden ""shared_dispatch_stub_38""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_38")"\n"
"\t"STUB_ASM_CODE("38")"\n"

".hidden ""shared_dispatch_stub_39""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_39")"\n"
"\t"STUB_ASM_CODE("39")"\n"

".hidden ""shared_dispatch_stub_40""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_40")"\n"
"\t"STUB_ASM_CODE("40")"\n"

".hidden ""shared_dispatch_stub_41""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_41")"\n"
"\t"STUB_ASM_CODE("41")"\n"

".hidden ""shared_dispatch_stub_42""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_42")"\n"
"\t"STUB_ASM_CODE("42")"\n"

".hidden ""shared_dispatch_stub_43""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_43")"\n"
"\t"STUB_ASM_CODE("43")"\n"

".hidden ""shared_dispatch_stub_44""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_44")"\n"
"\t"STUB_ASM_CODE("44")"\n"

".hidden ""shared_dispatch_stub_45""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_45")"\n"
"\t"STUB_ASM_CODE("45")"\n"

".hidden ""shared_dispatch_stub_46""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_46")"\n"
"\t"STUB_ASM_CODE("46")"\n"

".hidden ""shared_dispatch_stub_47""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_47")"\n"
"\t"STUB_ASM_CODE("47")"\n"

".hidden ""shared_dispatch_stub_48""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_48")"\n"
"\t"STUB_ASM_CODE("48")"\n"

".hidden ""shared_dispatch_stub_49""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_49")"\n"
"\t"STUB_ASM_CODE("49")"\n"

".hidden ""shared_dispatch_stub_50""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_50")"\n"
"\t"STUB_ASM_CODE("50")"\n"

".hidden ""shared_dispatch_stub_51""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_51")"\n"
"\t"STUB_ASM_CODE("51")"\n"

".hidden ""shared_dispatch_stub_52""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_52")"\n"
"\t"STUB_ASM_CODE("52")"\n"

".hidden ""shared_dispatch_stub_53""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_53")"\n"
"\t"STUB_ASM_CODE("53")"\n"

".hidden ""shared_dispatch_stub_54""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_54")"\n"
"\t"STUB_ASM_CODE("54")"\n"

".hidden ""shared_dispatch_stub_55""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_55")"\n"
"\t"STUB_ASM_CODE("55")"\n"

".hidden ""shared_dispatch_stub_56""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_56")"\n"
"\t"STUB_ASM_CODE("56")"\n"

".hidden ""shared_dispatch_stub_57""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_57")"\n"
"\t"STUB_ASM_CODE("57")"\n"

".hidden ""shared_dispatch_stub_58""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_58")"\n"
"\t"STUB_ASM_CODE("58")"\n"

".hidden ""shared_dispatch_stub_59""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_59")"\n"
"\t"STUB_ASM_CODE("59")"\n"

".hidden ""shared_dispatch_stub_60""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_60")"\n"
"\t"STUB_ASM_CODE("60")"\n"

".hidden ""shared_dispatch_stub_61""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_61")"\n"
"\t"STUB_ASM_CODE("61")"\n"

".hidden ""shared_dispatch_stub_62""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_62")"\n"
"\t"STUB_ASM_CODE("62")"\n"

".hidden ""shared_dispatch_stub_63""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_63")"\n"
"\t"STUB_ASM_CODE("63")"\n"

".hidden ""shared_dispatch_stub_64""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_64")"\n"
"\t"STUB_ASM_CODE("64")"\n"

".hidden ""shared_dispatch_stub_65""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_65")"\n"
"\t"STUB_ASM_CODE("65")"\n"

".hidden ""shared_dispatch_stub_66""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_66")"\n"
"\t"STUB_ASM_CODE("66")"\n"

".hidden ""shared_dispatch_stub_67""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_67")"\n"
"\t"STUB_ASM_CODE("67")"\n"

".hidden ""shared_dispatch_stub_68""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_68")"\n"
"\t"STUB_ASM_CODE("68")"\n"

".hidden ""shared_dispatch_stub_69""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_69")"\n"
"\t"STUB_ASM_CODE("69")"\n"

".hidden ""shared_dispatch_stub_70""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_70")"\n"
"\t"STUB_ASM_CODE("70")"\n"

".hidden ""shared_dispatch_stub_71""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_71")"\n"
"\t"STUB_ASM_CODE("71")"\n"

".hidden ""shared_dispatch_stub_72""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_72")"\n"
"\t"STUB_ASM_CODE("72")"\n"

".hidden ""shared_dispatch_stub_73""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_73")"\n"
"\t"STUB_ASM_CODE("73")"\n"

".hidden ""shared_dispatch_stub_74""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_74")"\n"
"\t"STUB_ASM_CODE("74")"\n"

".hidden ""shared_dispatch_stub_75""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_75")"\n"
"\t"STUB_ASM_CODE("75")"\n"

".hidden ""shared_dispatch_stub_76""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_76")"\n"
"\t"STUB_ASM_CODE("76")"\n"

".hidden ""shared_dispatch_stub_77""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_77")"\n"
"\t"STUB_ASM_CODE("77")"\n"

".hidden ""shared_dispatch_stub_78""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_78")"\n"
"\t"STUB_ASM_CODE("78")"\n"

".hidden ""shared_dispatch_stub_79""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_79")"\n"
"\t"STUB_ASM_CODE("79")"\n"

".hidden ""shared_dispatch_stub_80""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_80")"\n"
"\t"STUB_ASM_CODE("80")"\n"

".hidden ""shared_dispatch_stub_81""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_81")"\n"
"\t"STUB_ASM_CODE("81")"\n"

".hidden ""shared_dispatch_stub_82""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_82")"\n"
"\t"STUB_ASM_CODE("82")"\n"

".hidden ""shared_dispatch_stub_83""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_83")"\n"
"\t"STUB_ASM_CODE("83")"\n"

".hidden ""shared_dispatch_stub_84""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_84")"\n"
"\t"STUB_ASM_CODE("84")"\n"

".hidden ""shared_dispatch_stub_85""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_85")"\n"
"\t"STUB_ASM_CODE("85")"\n"

".hidden ""shared_dispatch_stub_86""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_86")"\n"
"\t"STUB_ASM_CODE("86")"\n"

".hidden ""shared_dispatch_stub_87""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_87")"\n"
"\t"STUB_ASM_CODE("87")"\n"

".hidden ""shared_dispatch_stub_88""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_88")"\n"
"\t"STUB_ASM_CODE("88")"\n"

".hidden ""shared_dispatch_stub_89""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_89")"\n"
"\t"STUB_ASM_CODE("89")"\n"

".hidden ""shared_dispatch_stub_90""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_90")"\n"
"\t"STUB_ASM_CODE("90")"\n"

".hidden ""shared_dispatch_stub_91""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_91")"\n"
"\t"STUB_ASM_CODE("91")"\n"

".hidden ""shared_dispatch_stub_92""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_92")"\n"
"\t"STUB_ASM_CODE("92")"\n"

".hidden ""shared_dispatch_stub_93""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_93")"\n"
"\t"STUB_ASM_CODE("93")"\n"

".hidden ""shared_dispatch_stub_94""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_94")"\n"
"\t"STUB_ASM_CODE("94")"\n"

".hidden ""shared_dispatch_stub_95""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_95")"\n"
"\t"STUB_ASM_CODE("95")"\n"

".hidden ""shared_dispatch_stub_96""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_96")"\n"
"\t"STUB_ASM_CODE("96")"\n"

".hidden ""shared_dispatch_stub_97""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_97")"\n"
"\t"STUB_ASM_CODE("97")"\n"

".hidden ""shared_dispatch_stub_98""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_98")"\n"
"\t"STUB_ASM_CODE("98")"\n"

".hidden ""shared_dispatch_stub_99""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_99")"\n"
"\t"STUB_ASM_CODE("99")"\n"

".hidden ""shared_dispatch_stub_100""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_100")"\n"
"\t"STUB_ASM_CODE("100")"\n"

".hidden ""shared_dispatch_stub_101""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_101")"\n"
"\t"STUB_ASM_CODE("101")"\n"

".hidden ""shared_dispatch_stub_102""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_102")"\n"
"\t"STUB_ASM_CODE("102")"\n"

".hidden ""shared_dispatch_stub_103""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_103")"\n"
"\t"STUB_ASM_CODE("103")"\n"

".hidden ""shared_dispatch_stub_104""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_104")"\n"
"\t"STUB_ASM_CODE("104")"\n"

".hidden ""shared_dispatch_stub_105""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_105")"\n"
"\t"STUB_ASM_CODE("105")"\n"

".hidden ""shared_dispatch_stub_106""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_106")"\n"
"\t"STUB_ASM_CODE("106")"\n"

".hidden ""shared_dispatch_stub_107""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_107")"\n"
"\t"STUB_ASM_CODE("107")"\n"

".hidden ""shared_dispatch_stub_108""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_108")"\n"
"\t"STUB_ASM_CODE("108")"\n"

".hidden ""shared_dispatch_stub_109""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_109")"\n"
"\t"STUB_ASM_CODE("109")"\n"

".hidden ""shared_dispatch_stub_110""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_110")"\n"
"\t"STUB_ASM_CODE("110")"\n"

".hidden ""shared_dispatch_stub_111""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_111")"\n"
"\t"STUB_ASM_CODE("111")"\n"

".hidden ""shared_dispatch_stub_112""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_112")"\n"
"\t"STUB_ASM_CODE("112")"\n"

".hidden ""shared_dispatch_stub_113""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_113")"\n"
"\t"STUB_ASM_CODE("113")"\n"

".hidden ""shared_dispatch_stub_114""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_114")"\n"
"\t"STUB_ASM_CODE("114")"\n"

".hidden ""shared_dispatch_stub_115""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_115")"\n"
"\t"STUB_ASM_CODE("115")"\n"

".hidden ""shared_dispatch_stub_116""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_116")"\n"
"\t"STUB_ASM_CODE("116")"\n"

".hidden ""shared_dispatch_stub_117""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_117")"\n"
"\t"STUB_ASM_CODE("117")"\n"

".hidden ""shared_dispatch_stub_118""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_118")"\n"
"\t"STUB_ASM_CODE("118")"\n"

".hidden ""shared_dispatch_stub_119""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_119")"\n"
"\t"STUB_ASM_CODE("119")"\n"

".hidden ""shared_dispatch_stub_120""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_120")"\n"
"\t"STUB_ASM_CODE("120")"\n"

".hidden ""shared_dispatch_stub_121""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_121")"\n"
"\t"STUB_ASM_CODE("121")"\n"

".hidden ""shared_dispatch_stub_122""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_122")"\n"
"\t"STUB_ASM_CODE("122")"\n"

".hidden ""shared_dispatch_stub_123""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_123")"\n"
"\t"STUB_ASM_CODE("123")"\n"

".hidden ""shared_dispatch_stub_124""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_124")"\n"
"\t"STUB_ASM_CODE("124")"\n"

".hidden ""shared_dispatch_stub_125""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_125")"\n"
"\t"STUB_ASM_CODE("125")"\n"

".hidden ""shared_dispatch_stub_126""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_126")"\n"
"\t"STUB_ASM_CODE("126")"\n"

".hidden ""shared_dispatch_stub_127""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_127")"\n"
"\t"STUB_ASM_CODE("127")"\n"

".hidden ""shared_dispatch_stub_128""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_128")"\n"
"\t"STUB_ASM_CODE("128")"\n"

".hidden ""shared_dispatch_stub_129""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_129")"\n"
"\t"STUB_ASM_CODE("129")"\n"

".hidden ""shared_dispatch_stub_130""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_130")"\n"
"\t"STUB_ASM_CODE("130")"\n"

".hidden ""shared_dispatch_stub_131""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_131")"\n"
"\t"STUB_ASM_CODE("131")"\n"

".hidden ""shared_dispatch_stub_132""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_132")"\n"
"\t"STUB_ASM_CODE("132")"\n"

".hidden ""shared_dispatch_stub_133""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_133")"\n"
"\t"STUB_ASM_CODE("133")"\n"

".hidden ""shared_dispatch_stub_134""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_134")"\n"
"\t"STUB_ASM_CODE("134")"\n"

".hidden ""shared_dispatch_stub_135""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_135")"\n"
"\t"STUB_ASM_CODE("135")"\n"

".hidden ""shared_dispatch_stub_136""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_136")"\n"
"\t"STUB_ASM_CODE("136")"\n"

".hidden ""shared_dispatch_stub_137""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_137")"\n"
"\t"STUB_ASM_CODE("137")"\n"

".hidden ""shared_dispatch_stub_138""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_138")"\n"
"\t"STUB_ASM_CODE("138")"\n"

".hidden ""shared_dispatch_stub_139""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_139")"\n"
"\t"STUB_ASM_CODE("139")"\n"

".hidden ""shared_dispatch_stub_140""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_140")"\n"
"\t"STUB_ASM_CODE("140")"\n"

".hidden ""shared_dispatch_stub_141""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_141")"\n"
"\t"STUB_ASM_CODE("141")"\n"

".hidden ""shared_dispatch_stub_142""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_142")"\n"
"\t"STUB_ASM_CODE("142")"\n"

".hidden ""shared_dispatch_stub_143""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_143")"\n"
"\t"STUB_ASM_CODE("143")"\n"

".hidden ""shared_dispatch_stub_144""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_144")"\n"
"\t"STUB_ASM_CODE("144")"\n"

".hidden ""shared_dispatch_stub_145""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_145")"\n"
"\t"STUB_ASM_CODE("145")"\n"

".hidden ""shared_dispatch_stub_146""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_146")"\n"
"\t"STUB_ASM_CODE("146")"\n"

".hidden ""shared_dispatch_stub_147""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_147")"\n"
"\t"STUB_ASM_CODE("147")"\n"

".hidden ""shared_dispatch_stub_148""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_148")"\n"
"\t"STUB_ASM_CODE("148")"\n"

".hidden ""shared_dispatch_stub_149""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_149")"\n"
"\t"STUB_ASM_CODE("149")"\n"

".hidden ""shared_dispatch_stub_150""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_150")"\n"
"\t"STUB_ASM_CODE("150")"\n"

".hidden ""shared_dispatch_stub_151""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_151")"\n"
"\t"STUB_ASM_CODE("151")"\n"

".hidden ""shared_dispatch_stub_152""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_152")"\n"
"\t"STUB_ASM_CODE("152")"\n"

".hidden ""shared_dispatch_stub_153""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_153")"\n"
"\t"STUB_ASM_CODE("153")"\n"

".hidden ""shared_dispatch_stub_154""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_154")"\n"
"\t"STUB_ASM_CODE("154")"\n"

".hidden ""shared_dispatch_stub_155""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_155")"\n"
"\t"STUB_ASM_CODE("155")"\n"

".hidden ""shared_dispatch_stub_156""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_156")"\n"
"\t"STUB_ASM_CODE("156")"\n"

".hidden ""shared_dispatch_stub_157""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_157")"\n"
"\t"STUB_ASM_CODE("157")"\n"

".hidden ""shared_dispatch_stub_158""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_158")"\n"
"\t"STUB_ASM_CODE("158")"\n"

".hidden ""shared_dispatch_stub_159""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_159")"\n"
"\t"STUB_ASM_CODE("159")"\n"

".hidden ""shared_dispatch_stub_160""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_160")"\n"
"\t"STUB_ASM_CODE("160")"\n"

".hidden ""shared_dispatch_stub_161""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_161")"\n"
"\t"STUB_ASM_CODE("161")"\n"

".hidden ""shared_dispatch_stub_162""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_162")"\n"
"\t"STUB_ASM_CODE("162")"\n"

".hidden ""shared_dispatch_stub_163""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_163")"\n"
"\t"STUB_ASM_CODE("163")"\n"

".hidden ""shared_dispatch_stub_164""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_164")"\n"
"\t"STUB_ASM_CODE("164")"\n"

".hidden ""shared_dispatch_stub_165""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_165")"\n"
"\t"STUB_ASM_CODE("165")"\n"

".hidden ""shared_dispatch_stub_166""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_166")"\n"
"\t"STUB_ASM_CODE("166")"\n"

".hidden ""shared_dispatch_stub_167""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_167")"\n"
"\t"STUB_ASM_CODE("167")"\n"

".hidden ""shared_dispatch_stub_168""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_168")"\n"
"\t"STUB_ASM_CODE("168")"\n"

".hidden ""shared_dispatch_stub_169""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_169")"\n"
"\t"STUB_ASM_CODE("169")"\n"

".hidden ""shared_dispatch_stub_170""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_170")"\n"
"\t"STUB_ASM_CODE("170")"\n"

".hidden ""shared_dispatch_stub_171""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_171")"\n"
"\t"STUB_ASM_CODE("171")"\n"

".hidden ""shared_dispatch_stub_172""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_172")"\n"
"\t"STUB_ASM_CODE("172")"\n"

".hidden ""shared_dispatch_stub_173""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_173")"\n"
"\t"STUB_ASM_CODE("173")"\n"

".hidden ""shared_dispatch_stub_174""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_174")"\n"
"\t"STUB_ASM_CODE("174")"\n"

".hidden ""shared_dispatch_stub_175""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_175")"\n"
"\t"STUB_ASM_CODE("175")"\n"

".hidden ""shared_dispatch_stub_176""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_176")"\n"
"\t"STUB_ASM_CODE("176")"\n"

".hidden ""shared_dispatch_stub_177""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_177")"\n"
"\t"STUB_ASM_CODE("177")"\n"

".hidden ""shared_dispatch_stub_178""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_178")"\n"
"\t"STUB_ASM_CODE("178")"\n"

".hidden ""shared_dispatch_stub_179""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_179")"\n"
"\t"STUB_ASM_CODE("179")"\n"

".hidden ""shared_dispatch_stub_180""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_180")"\n"
"\t"STUB_ASM_CODE("180")"\n"

".hidden ""shared_dispatch_stub_181""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_181")"\n"
"\t"STUB_ASM_CODE("181")"\n"

".hidden ""shared_dispatch_stub_182""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_182")"\n"
"\t"STUB_ASM_CODE("182")"\n"

".hidden ""shared_dispatch_stub_183""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_183")"\n"
"\t"STUB_ASM_CODE("183")"\n"

".hidden ""shared_dispatch_stub_184""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_184")"\n"
"\t"STUB_ASM_CODE("184")"\n"

".hidden ""shared_dispatch_stub_185""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_185")"\n"
"\t"STUB_ASM_CODE("185")"\n"

".hidden ""shared_dispatch_stub_186""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_186")"\n"
"\t"STUB_ASM_CODE("186")"\n"

".hidden ""shared_dispatch_stub_187""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_187")"\n"
"\t"STUB_ASM_CODE("187")"\n"

".hidden ""shared_dispatch_stub_188""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_188")"\n"
"\t"STUB_ASM_CODE("188")"\n"

".hidden ""shared_dispatch_stub_189""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_189")"\n"
"\t"STUB_ASM_CODE("189")"\n"

".hidden ""shared_dispatch_stub_190""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_190")"\n"
"\t"STUB_ASM_CODE("190")"\n"

".hidden ""shared_dispatch_stub_191""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_191")"\n"
"\t"STUB_ASM_CODE("191")"\n"

".hidden ""shared_dispatch_stub_192""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_192")"\n"
"\t"STUB_ASM_CODE("192")"\n"

".hidden ""shared_dispatch_stub_193""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_193")"\n"
"\t"STUB_ASM_CODE("193")"\n"

".hidden ""shared_dispatch_stub_194""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_194")"\n"
"\t"STUB_ASM_CODE("194")"\n"

".hidden ""shared_dispatch_stub_195""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_195")"\n"
"\t"STUB_ASM_CODE("195")"\n"

".hidden ""shared_dispatch_stub_196""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_196")"\n"
"\t"STUB_ASM_CODE("196")"\n"

".hidden ""shared_dispatch_stub_197""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_197")"\n"
"\t"STUB_ASM_CODE("197")"\n"

".hidden ""shared_dispatch_stub_198""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_198")"\n"
"\t"STUB_ASM_CODE("198")"\n"

".hidden ""shared_dispatch_stub_199""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_199")"\n"
"\t"STUB_ASM_CODE("199")"\n"

".hidden ""shared_dispatch_stub_200""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_200")"\n"
"\t"STUB_ASM_CODE("200")"\n"

".hidden ""shared_dispatch_stub_201""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_201")"\n"
"\t"STUB_ASM_CODE("201")"\n"

".hidden ""shared_dispatch_stub_202""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_202")"\n"
"\t"STUB_ASM_CODE("202")"\n"

".hidden ""shared_dispatch_stub_203""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_203")"\n"
"\t"STUB_ASM_CODE("203")"\n"

".hidden ""shared_dispatch_stub_204""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_204")"\n"
"\t"STUB_ASM_CODE("204")"\n"

".hidden ""shared_dispatch_stub_205""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_205")"\n"
"\t"STUB_ASM_CODE("205")"\n"

".hidden ""shared_dispatch_stub_206""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_206")"\n"
"\t"STUB_ASM_CODE("206")"\n"

".hidden ""shared_dispatch_stub_207""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_207")"\n"
"\t"STUB_ASM_CODE("207")"\n"

".hidden ""shared_dispatch_stub_208""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_208")"\n"
"\t"STUB_ASM_CODE("208")"\n"

".hidden ""shared_dispatch_stub_209""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_209")"\n"
"\t"STUB_ASM_CODE("209")"\n"

".hidden ""shared_dispatch_stub_210""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_210")"\n"
"\t"STUB_ASM_CODE("210")"\n"

".hidden ""shared_dispatch_stub_211""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_211")"\n"
"\t"STUB_ASM_CODE("211")"\n"

".hidden ""shared_dispatch_stub_212""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_212")"\n"
"\t"STUB_ASM_CODE("212")"\n"

".hidden ""shared_dispatch_stub_213""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_213")"\n"
"\t"STUB_ASM_CODE("213")"\n"

".hidden ""shared_dispatch_stub_214""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_214")"\n"
"\t"STUB_ASM_CODE("214")"\n"

".hidden ""shared_dispatch_stub_215""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_215")"\n"
"\t"STUB_ASM_CODE("215")"\n"

".hidden ""shared_dispatch_stub_216""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_216")"\n"
"\t"STUB_ASM_CODE("216")"\n"

".hidden ""shared_dispatch_stub_217""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_217")"\n"
"\t"STUB_ASM_CODE("217")"\n"

".hidden ""shared_dispatch_stub_218""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_218")"\n"
"\t"STUB_ASM_CODE("218")"\n"

".hidden ""shared_dispatch_stub_219""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_219")"\n"
"\t"STUB_ASM_CODE("219")"\n"

".hidden ""shared_dispatch_stub_220""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_220")"\n"
"\t"STUB_ASM_CODE("220")"\n"

".hidden ""shared_dispatch_stub_221""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_221")"\n"
"\t"STUB_ASM_CODE("221")"\n"

".hidden ""shared_dispatch_stub_222""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_222")"\n"
"\t"STUB_ASM_CODE("222")"\n"

".hidden ""shared_dispatch_stub_223""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_223")"\n"
"\t"STUB_ASM_CODE("223")"\n"

".hidden ""shared_dispatch_stub_224""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_224")"\n"
"\t"STUB_ASM_CODE("224")"\n"

".hidden ""shared_dispatch_stub_225""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_225")"\n"
"\t"STUB_ASM_CODE("225")"\n"

".hidden ""shared_dispatch_stub_226""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_226")"\n"
"\t"STUB_ASM_CODE("226")"\n"

".hidden ""shared_dispatch_stub_227""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_227")"\n"
"\t"STUB_ASM_CODE("227")"\n"

".hidden ""shared_dispatch_stub_228""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_228")"\n"
"\t"STUB_ASM_CODE("228")"\n"

".hidden ""shared_dispatch_stub_229""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_229")"\n"
"\t"STUB_ASM_CODE("229")"\n"

".hidden ""shared_dispatch_stub_230""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_230")"\n"
"\t"STUB_ASM_CODE("230")"\n"

".hidden ""shared_dispatch_stub_231""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_231")"\n"
"\t"STUB_ASM_CODE("231")"\n"

".hidden ""shared_dispatch_stub_232""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_232")"\n"
"\t"STUB_ASM_CODE("232")"\n"

".hidden ""shared_dispatch_stub_233""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_233")"\n"
"\t"STUB_ASM_CODE("233")"\n"

".hidden ""shared_dispatch_stub_234""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_234")"\n"
"\t"STUB_ASM_CODE("234")"\n"

".hidden ""shared_dispatch_stub_235""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_235")"\n"
"\t"STUB_ASM_CODE("235")"\n"

".hidden ""shared_dispatch_stub_236""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_236")"\n"
"\t"STUB_ASM_CODE("236")"\n"

".hidden ""shared_dispatch_stub_237""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_237")"\n"
"\t"STUB_ASM_CODE("237")"\n"

".hidden ""shared_dispatch_stub_238""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_238")"\n"
"\t"STUB_ASM_CODE("238")"\n"

".hidden ""shared_dispatch_stub_239""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_239")"\n"
"\t"STUB_ASM_CODE("239")"\n"

".hidden ""shared_dispatch_stub_240""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_240")"\n"
"\t"STUB_ASM_CODE("240")"\n"

".hidden ""shared_dispatch_stub_241""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_241")"\n"
"\t"STUB_ASM_CODE("241")"\n"

".hidden ""shared_dispatch_stub_242""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_242")"\n"
"\t"STUB_ASM_CODE("242")"\n"

".hidden ""shared_dispatch_stub_243""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_243")"\n"
"\t"STUB_ASM_CODE("243")"\n"

".hidden ""shared_dispatch_stub_244""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_244")"\n"
"\t"STUB_ASM_CODE("244")"\n"

".hidden ""shared_dispatch_stub_245""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_245")"\n"
"\t"STUB_ASM_CODE("245")"\n"

".hidden ""shared_dispatch_stub_246""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_246")"\n"
"\t"STUB_ASM_CODE("246")"\n"

".hidden ""shared_dispatch_stub_247""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_247")"\n"
"\t"STUB_ASM_CODE("247")"\n"

".hidden ""shared_dispatch_stub_248""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_248")"\n"
"\t"STUB_ASM_CODE("248")"\n"

".hidden ""shared_dispatch_stub_249""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_249")"\n"
"\t"STUB_ASM_CODE("249")"\n"

".hidden ""shared_dispatch_stub_250""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_250")"\n"
"\t"STUB_ASM_CODE("250")"\n"

".hidden ""shared_dispatch_stub_251""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_251")"\n"
"\t"STUB_ASM_CODE("251")"\n"

".hidden ""shared_dispatch_stub_252""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_252")"\n"
"\t"STUB_ASM_CODE("252")"\n"

".hidden ""shared_dispatch_stub_253""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_253")"\n"
"\t"STUB_ASM_CODE("253")"\n"

".hidden ""shared_dispatch_stub_254""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_254")"\n"
"\t"STUB_ASM_CODE("254")"\n"

".hidden ""shared_dispatch_stub_255""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_255")"\n"
"\t"STUB_ASM_CODE("255")"\n"

".hidden ""shared_dispatch_stub_256""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_256")"\n"
"\t"STUB_ASM_CODE("256")"\n"

".hidden ""shared_dispatch_stub_257""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_257")"\n"
"\t"STUB_ASM_CODE("257")"\n"

".hidden ""shared_dispatch_stub_258""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_258")"\n"
"\t"STUB_ASM_CODE("258")"\n"

".hidden ""shared_dispatch_stub_259""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_259")"\n"
"\t"STUB_ASM_CODE("259")"\n"

".hidden ""shared_dispatch_stub_260""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_260")"\n"
"\t"STUB_ASM_CODE("260")"\n"

".hidden ""shared_dispatch_stub_261""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_261")"\n"
"\t"STUB_ASM_CODE("261")"\n"

".hidden ""shared_dispatch_stub_262""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_262")"\n"
"\t"STUB_ASM_CODE("262")"\n"

".hidden ""shared_dispatch_stub_263""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_263")"\n"
"\t"STUB_ASM_CODE("263")"\n"

".hidden ""shared_dispatch_stub_264""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_264")"\n"
"\t"STUB_ASM_CODE("264")"\n"

".hidden ""shared_dispatch_stub_265""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_265")"\n"
"\t"STUB_ASM_CODE("265")"\n"

".hidden ""shared_dispatch_stub_266""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_266")"\n"
"\t"STUB_ASM_CODE("266")"\n"

".hidden ""shared_dispatch_stub_267""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_267")"\n"
"\t"STUB_ASM_CODE("267")"\n"

".hidden ""shared_dispatch_stub_268""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_268")"\n"
"\t"STUB_ASM_CODE("268")"\n"

".hidden ""shared_dispatch_stub_269""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_269")"\n"
"\t"STUB_ASM_CODE("269")"\n"

".hidden ""shared_dispatch_stub_270""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_270")"\n"
"\t"STUB_ASM_CODE("270")"\n"

".hidden ""shared_dispatch_stub_271""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_271")"\n"
"\t"STUB_ASM_CODE("271")"\n"

".hidden ""shared_dispatch_stub_272""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_272")"\n"
"\t"STUB_ASM_CODE("272")"\n"

".hidden ""shared_dispatch_stub_273""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_273")"\n"
"\t"STUB_ASM_CODE("273")"\n"

".hidden ""shared_dispatch_stub_274""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_274")"\n"
"\t"STUB_ASM_CODE("274")"\n"

".hidden ""shared_dispatch_stub_275""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_275")"\n"
"\t"STUB_ASM_CODE("275")"\n"

".hidden ""shared_dispatch_stub_276""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_276")"\n"
"\t"STUB_ASM_CODE("276")"\n"

".hidden ""shared_dispatch_stub_277""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_277")"\n"
"\t"STUB_ASM_CODE("277")"\n"

".hidden ""shared_dispatch_stub_278""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_278")"\n"
"\t"STUB_ASM_CODE("278")"\n"

".hidden ""shared_dispatch_stub_279""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_279")"\n"
"\t"STUB_ASM_CODE("279")"\n"

".hidden ""shared_dispatch_stub_280""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_280")"\n"
"\t"STUB_ASM_CODE("280")"\n"

".hidden ""shared_dispatch_stub_281""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_281")"\n"
"\t"STUB_ASM_CODE("281")"\n"

".hidden ""shared_dispatch_stub_282""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_282")"\n"
"\t"STUB_ASM_CODE("282")"\n"

".hidden ""shared_dispatch_stub_283""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_283")"\n"
"\t"STUB_ASM_CODE("283")"\n"

".hidden ""shared_dispatch_stub_284""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_284")"\n"
"\t"STUB_ASM_CODE("284")"\n"

".hidden ""shared_dispatch_stub_285""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_285")"\n"
"\t"STUB_ASM_CODE("285")"\n"

".hidden ""shared_dispatch_stub_286""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_286")"\n"
"\t"STUB_ASM_CODE("286")"\n"

".hidden ""shared_dispatch_stub_287""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_287")"\n"
"\t"STUB_ASM_CODE("287")"\n"

".hidden ""shared_dispatch_stub_288""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_288")"\n"
"\t"STUB_ASM_CODE("288")"\n"

".hidden ""shared_dispatch_stub_289""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_289")"\n"
"\t"STUB_ASM_CODE("289")"\n"

".hidden ""shared_dispatch_stub_290""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_290")"\n"
"\t"STUB_ASM_CODE("290")"\n"

".hidden ""shared_dispatch_stub_291""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_291")"\n"
"\t"STUB_ASM_CODE("291")"\n"

".hidden ""shared_dispatch_stub_292""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_292")"\n"
"\t"STUB_ASM_CODE("292")"\n"

".hidden ""shared_dispatch_stub_293""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_293")"\n"
"\t"STUB_ASM_CODE("293")"\n"

".hidden ""shared_dispatch_stub_294""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_294")"\n"
"\t"STUB_ASM_CODE("294")"\n"

".hidden ""shared_dispatch_stub_295""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_295")"\n"
"\t"STUB_ASM_CODE("295")"\n"

".hidden ""shared_dispatch_stub_296""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_296")"\n"
"\t"STUB_ASM_CODE("296")"\n"

".hidden ""shared_dispatch_stub_297""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_297")"\n"
"\t"STUB_ASM_CODE("297")"\n"

".hidden ""shared_dispatch_stub_298""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_298")"\n"
"\t"STUB_ASM_CODE("298")"\n"

".hidden ""shared_dispatch_stub_299""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_299")"\n"
"\t"STUB_ASM_CODE("299")"\n"

".hidden ""shared_dispatch_stub_300""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_300")"\n"
"\t"STUB_ASM_CODE("300")"\n"

".hidden ""shared_dispatch_stub_301""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_301")"\n"
"\t"STUB_ASM_CODE("301")"\n"

".hidden ""shared_dispatch_stub_302""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_302")"\n"
"\t"STUB_ASM_CODE("302")"\n"

".hidden ""shared_dispatch_stub_303""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_303")"\n"
"\t"STUB_ASM_CODE("303")"\n"

".hidden ""shared_dispatch_stub_304""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_304")"\n"
"\t"STUB_ASM_CODE("304")"\n"

".hidden ""shared_dispatch_stub_305""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_305")"\n"
"\t"STUB_ASM_CODE("305")"\n"

".hidden ""shared_dispatch_stub_306""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_306")"\n"
"\t"STUB_ASM_CODE("306")"\n"

".hidden ""shared_dispatch_stub_307""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_307")"\n"
"\t"STUB_ASM_CODE("307")"\n"

".hidden ""shared_dispatch_stub_308""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_308")"\n"
"\t"STUB_ASM_CODE("308")"\n"

".hidden ""shared_dispatch_stub_309""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_309")"\n"
"\t"STUB_ASM_CODE("309")"\n"

".hidden ""shared_dispatch_stub_310""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_310")"\n"
"\t"STUB_ASM_CODE("310")"\n"

".hidden ""shared_dispatch_stub_311""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_311")"\n"
"\t"STUB_ASM_CODE("311")"\n"

".hidden ""shared_dispatch_stub_312""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_312")"\n"
"\t"STUB_ASM_CODE("312")"\n"

".hidden ""shared_dispatch_stub_313""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_313")"\n"
"\t"STUB_ASM_CODE("313")"\n"

".hidden ""shared_dispatch_stub_314""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_314")"\n"
"\t"STUB_ASM_CODE("314")"\n"

".hidden ""shared_dispatch_stub_315""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_315")"\n"
"\t"STUB_ASM_CODE("315")"\n"

".hidden ""shared_dispatch_stub_316""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_316")"\n"
"\t"STUB_ASM_CODE("316")"\n"

".hidden ""shared_dispatch_stub_317""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_317")"\n"
"\t"STUB_ASM_CODE("317")"\n"

".hidden ""shared_dispatch_stub_318""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_318")"\n"
"\t"STUB_ASM_CODE("318")"\n"

".hidden ""shared_dispatch_stub_319""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_319")"\n"
"\t"STUB_ASM_CODE("319")"\n"

".hidden ""shared_dispatch_stub_320""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_320")"\n"
"\t"STUB_ASM_CODE("320")"\n"

".hidden ""shared_dispatch_stub_321""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_321")"\n"
"\t"STUB_ASM_CODE("321")"\n"

".hidden ""shared_dispatch_stub_322""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_322")"\n"
"\t"STUB_ASM_CODE("322")"\n"

".hidden ""shared_dispatch_stub_323""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_323")"\n"
"\t"STUB_ASM_CODE("323")"\n"

".hidden ""shared_dispatch_stub_324""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_324")"\n"
"\t"STUB_ASM_CODE("324")"\n"

".hidden ""shared_dispatch_stub_325""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_325")"\n"
"\t"STUB_ASM_CODE("325")"\n"

".hidden ""shared_dispatch_stub_326""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_326")"\n"
"\t"STUB_ASM_CODE("326")"\n"

".hidden ""shared_dispatch_stub_327""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_327")"\n"
"\t"STUB_ASM_CODE("327")"\n"

".hidden ""shared_dispatch_stub_328""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_328")"\n"
"\t"STUB_ASM_CODE("328")"\n"

".hidden ""shared_dispatch_stub_329""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_329")"\n"
"\t"STUB_ASM_CODE("329")"\n"

".hidden ""shared_dispatch_stub_330""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_330")"\n"
"\t"STUB_ASM_CODE("330")"\n"

".hidden ""shared_dispatch_stub_331""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_331")"\n"
"\t"STUB_ASM_CODE("331")"\n"

".hidden ""shared_dispatch_stub_332""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_332")"\n"
"\t"STUB_ASM_CODE("332")"\n"

".hidden ""shared_dispatch_stub_333""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_333")"\n"
"\t"STUB_ASM_CODE("333")"\n"

".hidden ""shared_dispatch_stub_334""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_334")"\n"
"\t"STUB_ASM_CODE("334")"\n"

".hidden ""shared_dispatch_stub_335""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_335")"\n"
"\t"STUB_ASM_CODE("335")"\n"

".hidden ""shared_dispatch_stub_336""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_336")"\n"
"\t"STUB_ASM_CODE("336")"\n"

".hidden ""shared_dispatch_stub_337""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_337")"\n"
"\t"STUB_ASM_CODE("337")"\n"

".hidden ""shared_dispatch_stub_338""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_338")"\n"
"\t"STUB_ASM_CODE("338")"\n"

".hidden ""shared_dispatch_stub_339""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_339")"\n"
"\t"STUB_ASM_CODE("339")"\n"

".hidden ""shared_dispatch_stub_340""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_340")"\n"
"\t"STUB_ASM_CODE("340")"\n"

".hidden ""shared_dispatch_stub_341""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_341")"\n"
"\t"STUB_ASM_CODE("341")"\n"

".hidden ""shared_dispatch_stub_342""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_342")"\n"
"\t"STUB_ASM_CODE("342")"\n"

".hidden ""shared_dispatch_stub_343""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_343")"\n"
"\t"STUB_ASM_CODE("343")"\n"

".hidden ""shared_dispatch_stub_344""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_344")"\n"
"\t"STUB_ASM_CODE("344")"\n"

".hidden ""shared_dispatch_stub_345""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_345")"\n"
"\t"STUB_ASM_CODE("345")"\n"

".hidden ""shared_dispatch_stub_346""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_346")"\n"
"\t"STUB_ASM_CODE("346")"\n"

".hidden ""shared_dispatch_stub_347""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_347")"\n"
"\t"STUB_ASM_CODE("347")"\n"

".hidden ""shared_dispatch_stub_348""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_348")"\n"
"\t"STUB_ASM_CODE("348")"\n"

".hidden ""shared_dispatch_stub_349""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_349")"\n"
"\t"STUB_ASM_CODE("349")"\n"

".hidden ""shared_dispatch_stub_350""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_350")"\n"
"\t"STUB_ASM_CODE("350")"\n"

".hidden ""shared_dispatch_stub_351""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_351")"\n"
"\t"STUB_ASM_CODE("351")"\n"

".hidden ""shared_dispatch_stub_352""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_352")"\n"
"\t"STUB_ASM_CODE("352")"\n"

".hidden ""shared_dispatch_stub_353""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_353")"\n"
"\t"STUB_ASM_CODE("353")"\n"

".hidden ""shared_dispatch_stub_354""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_354")"\n"
"\t"STUB_ASM_CODE("354")"\n"

".hidden ""shared_dispatch_stub_355""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_355")"\n"
"\t"STUB_ASM_CODE("355")"\n"

".hidden ""shared_dispatch_stub_356""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_356")"\n"
"\t"STUB_ASM_CODE("356")"\n"

".hidden ""shared_dispatch_stub_357""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_357")"\n"
"\t"STUB_ASM_CODE("357")"\n"

".hidden ""shared_dispatch_stub_358""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_358")"\n"
"\t"STUB_ASM_CODE("358")"\n"

".hidden ""shared_dispatch_stub_359""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_359")"\n"
"\t"STUB_ASM_CODE("359")"\n"

".hidden ""shared_dispatch_stub_360""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_360")"\n"
"\t"STUB_ASM_CODE("360")"\n"

".hidden ""shared_dispatch_stub_361""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_361")"\n"
"\t"STUB_ASM_CODE("361")"\n"

".hidden ""shared_dispatch_stub_362""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_362")"\n"
"\t"STUB_ASM_CODE("362")"\n"

".hidden ""shared_dispatch_stub_363""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_363")"\n"
"\t"STUB_ASM_CODE("363")"\n"

".hidden ""shared_dispatch_stub_364""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_364")"\n"
"\t"STUB_ASM_CODE("364")"\n"

".hidden ""shared_dispatch_stub_365""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_365")"\n"
"\t"STUB_ASM_CODE("365")"\n"

".hidden ""shared_dispatch_stub_366""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_366")"\n"
"\t"STUB_ASM_CODE("366")"\n"

".hidden ""shared_dispatch_stub_367""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_367")"\n"
"\t"STUB_ASM_CODE("367")"\n"

".hidden ""shared_dispatch_stub_368""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_368")"\n"
"\t"STUB_ASM_CODE("368")"\n"

".hidden ""shared_dispatch_stub_369""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_369")"\n"
"\t"STUB_ASM_CODE("369")"\n"

".hidden ""shared_dispatch_stub_370""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_370")"\n"
"\t"STUB_ASM_CODE("370")"\n"

".hidden ""shared_dispatch_stub_371""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_371")"\n"
"\t"STUB_ASM_CODE("371")"\n"

".hidden ""shared_dispatch_stub_372""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_372")"\n"
"\t"STUB_ASM_CODE("372")"\n"

".hidden ""shared_dispatch_stub_373""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_373")"\n"
"\t"STUB_ASM_CODE("373")"\n"

".hidden ""shared_dispatch_stub_374""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_374")"\n"
"\t"STUB_ASM_CODE("374")"\n"

".hidden ""shared_dispatch_stub_375""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_375")"\n"
"\t"STUB_ASM_CODE("375")"\n"

".hidden ""shared_dispatch_stub_376""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_376")"\n"
"\t"STUB_ASM_CODE("376")"\n"

".hidden ""shared_dispatch_stub_377""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_377")"\n"
"\t"STUB_ASM_CODE("377")"\n"

".hidden ""shared_dispatch_stub_378""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_378")"\n"
"\t"STUB_ASM_CODE("378")"\n"

".hidden ""shared_dispatch_stub_379""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_379")"\n"
"\t"STUB_ASM_CODE("379")"\n"

".hidden ""shared_dispatch_stub_380""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_380")"\n"
"\t"STUB_ASM_CODE("380")"\n"

".hidden ""shared_dispatch_stub_381""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_381")"\n"
"\t"STUB_ASM_CODE("381")"\n"

".hidden ""shared_dispatch_stub_382""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_382")"\n"
"\t"STUB_ASM_CODE("382")"\n"

".hidden ""shared_dispatch_stub_383""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_383")"\n"
"\t"STUB_ASM_CODE("383")"\n"

".hidden ""shared_dispatch_stub_384""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_384")"\n"
"\t"STUB_ASM_CODE("384")"\n"

".hidden ""shared_dispatch_stub_385""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_385")"\n"
"\t"STUB_ASM_CODE("385")"\n"

".hidden ""shared_dispatch_stub_386""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_386")"\n"
"\t"STUB_ASM_CODE("386")"\n"

".hidden ""shared_dispatch_stub_387""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_387")"\n"
"\t"STUB_ASM_CODE("387")"\n"

".hidden ""shared_dispatch_stub_388""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_388")"\n"
"\t"STUB_ASM_CODE("388")"\n"

".hidden ""shared_dispatch_stub_389""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_389")"\n"
"\t"STUB_ASM_CODE("389")"\n"

".hidden ""shared_dispatch_stub_390""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_390")"\n"
"\t"STUB_ASM_CODE("390")"\n"

".hidden ""shared_dispatch_stub_391""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_391")"\n"
"\t"STUB_ASM_CODE("391")"\n"

".hidden ""shared_dispatch_stub_392""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_392")"\n"
"\t"STUB_ASM_CODE("392")"\n"

".hidden ""shared_dispatch_stub_393""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_393")"\n"
"\t"STUB_ASM_CODE("393")"\n"

".hidden ""shared_dispatch_stub_394""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_394")"\n"
"\t"STUB_ASM_CODE("394")"\n"

".hidden ""shared_dispatch_stub_395""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_395")"\n"
"\t"STUB_ASM_CODE("395")"\n"

".hidden ""shared_dispatch_stub_396""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_396")"\n"
"\t"STUB_ASM_CODE("396")"\n"

".hidden ""shared_dispatch_stub_397""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_397")"\n"
"\t"STUB_ASM_CODE("397")"\n"

".hidden ""shared_dispatch_stub_398""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_398")"\n"
"\t"STUB_ASM_CODE("398")"\n"

".hidden ""shared_dispatch_stub_399""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_399")"\n"
"\t"STUB_ASM_CODE("399")"\n"

".hidden ""shared_dispatch_stub_400""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_400")"\n"
"\t"STUB_ASM_CODE("400")"\n"

".hidden ""shared_dispatch_stub_401""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_401")"\n"
"\t"STUB_ASM_CODE("401")"\n"

".hidden ""shared_dispatch_stub_402""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_402")"\n"
"\t"STUB_ASM_CODE("402")"\n"

".hidden ""shared_dispatch_stub_403""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_403")"\n"
"\t"STUB_ASM_CODE("403")"\n"

".hidden ""shared_dispatch_stub_404""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_404")"\n"
"\t"STUB_ASM_CODE("404")"\n"

".hidden ""shared_dispatch_stub_405""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_405")"\n"
"\t"STUB_ASM_CODE("405")"\n"

".hidden ""shared_dispatch_stub_406""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_406")"\n"
"\t"STUB_ASM_CODE("406")"\n"

".hidden ""shared_dispatch_stub_407""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_407")"\n"
"\t"STUB_ASM_CODE("407")"\n"

".hidden ""shared_dispatch_stub_408""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_408")"\n"
"\t"STUB_ASM_CODE("408")"\n"

".hidden ""shared_dispatch_stub_409""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_409")"\n"
"\t"STUB_ASM_CODE("409")"\n"

".hidden ""shared_dispatch_stub_410""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_410")"\n"
"\t"STUB_ASM_CODE("410")"\n"

".hidden ""shared_dispatch_stub_411""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_411")"\n"
"\t"STUB_ASM_CODE("411")"\n"

".hidden ""shared_dispatch_stub_412""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_412")"\n"
"\t"STUB_ASM_CODE("412")"\n"

".hidden ""shared_dispatch_stub_413""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_413")"\n"
"\t"STUB_ASM_CODE("413")"\n"

".hidden ""shared_dispatch_stub_414""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_414")"\n"
"\t"STUB_ASM_CODE("414")"\n"

".hidden ""shared_dispatch_stub_415""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_415")"\n"
"\t"STUB_ASM_CODE("415")"\n"

".hidden ""shared_dispatch_stub_416""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_416")"\n"
"\t"STUB_ASM_CODE("416")"\n"

".hidden ""shared_dispatch_stub_417""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_417")"\n"
"\t"STUB_ASM_CODE("417")"\n"

".hidden ""shared_dispatch_stub_418""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_418")"\n"
"\t"STUB_ASM_CODE("418")"\n"

".hidden ""shared_dispatch_stub_419""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_419")"\n"
"\t"STUB_ASM_CODE("419")"\n"

".hidden ""shared_dispatch_stub_420""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_420")"\n"
"\t"STUB_ASM_CODE("420")"\n"

".hidden ""shared_dispatch_stub_421""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_421")"\n"
"\t"STUB_ASM_CODE("421")"\n"

".hidden ""shared_dispatch_stub_422""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_422")"\n"
"\t"STUB_ASM_CODE("422")"\n"

".hidden ""shared_dispatch_stub_423""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_423")"\n"
"\t"STUB_ASM_CODE("423")"\n"

".hidden ""shared_dispatch_stub_424""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_424")"\n"
"\t"STUB_ASM_CODE("424")"\n"

".hidden ""shared_dispatch_stub_425""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_425")"\n"
"\t"STUB_ASM_CODE("425")"\n"

".hidden ""shared_dispatch_stub_426""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_426")"\n"
"\t"STUB_ASM_CODE("426")"\n"

".hidden ""shared_dispatch_stub_427""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_427")"\n"
"\t"STUB_ASM_CODE("427")"\n"

".hidden ""shared_dispatch_stub_428""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_428")"\n"
"\t"STUB_ASM_CODE("428")"\n"

".hidden ""shared_dispatch_stub_429""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_429")"\n"
"\t"STUB_ASM_CODE("429")"\n"

".hidden ""shared_dispatch_stub_430""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_430")"\n"
"\t"STUB_ASM_CODE("430")"\n"

".hidden ""shared_dispatch_stub_431""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_431")"\n"
"\t"STUB_ASM_CODE("431")"\n"

".hidden ""shared_dispatch_stub_432""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_432")"\n"
"\t"STUB_ASM_CODE("432")"\n"

".hidden ""shared_dispatch_stub_433""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_433")"\n"
"\t"STUB_ASM_CODE("433")"\n"

".hidden ""shared_dispatch_stub_434""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_434")"\n"
"\t"STUB_ASM_CODE("434")"\n"

".hidden ""shared_dispatch_stub_435""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_435")"\n"
"\t"STUB_ASM_CODE("435")"\n"

".hidden ""shared_dispatch_stub_436""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_436")"\n"
"\t"STUB_ASM_CODE("436")"\n"

".hidden ""shared_dispatch_stub_437""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_437")"\n"
"\t"STUB_ASM_CODE("437")"\n"

".hidden ""shared_dispatch_stub_438""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_438")"\n"
"\t"STUB_ASM_CODE("438")"\n"

".hidden ""shared_dispatch_stub_439""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_439")"\n"
"\t"STUB_ASM_CODE("439")"\n"

".hidden ""shared_dispatch_stub_440""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_440")"\n"
"\t"STUB_ASM_CODE("440")"\n"

".hidden ""shared_dispatch_stub_441""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_441")"\n"
"\t"STUB_ASM_CODE("441")"\n"

".hidden ""shared_dispatch_stub_442""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_442")"\n"
"\t"STUB_ASM_CODE("442")"\n"

".hidden ""shared_dispatch_stub_443""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_443")"\n"
"\t"STUB_ASM_CODE("443")"\n"

".hidden ""shared_dispatch_stub_444""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_444")"\n"
"\t"STUB_ASM_CODE("444")"\n"

".hidden ""shared_dispatch_stub_445""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_445")"\n"
"\t"STUB_ASM_CODE("445")"\n"

".hidden ""shared_dispatch_stub_446""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_446")"\n"
"\t"STUB_ASM_CODE("446")"\n"

".hidden ""shared_dispatch_stub_447""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_447")"\n"
"\t"STUB_ASM_CODE("447")"\n"

".hidden ""shared_dispatch_stub_448""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_448")"\n"
"\t"STUB_ASM_CODE("448")"\n"

".hidden ""shared_dispatch_stub_449""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_449")"\n"
"\t"STUB_ASM_CODE("449")"\n"

".hidden ""shared_dispatch_stub_450""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_450")"\n"
"\t"STUB_ASM_CODE("450")"\n"

".hidden ""shared_dispatch_stub_451""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_451")"\n"
"\t"STUB_ASM_CODE("451")"\n"

".hidden ""shared_dispatch_stub_452""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_452")"\n"
"\t"STUB_ASM_CODE("452")"\n"

".hidden ""shared_dispatch_stub_453""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_453")"\n"
"\t"STUB_ASM_CODE("453")"\n"

".hidden ""shared_dispatch_stub_454""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_454")"\n"
"\t"STUB_ASM_CODE("454")"\n"

".hidden ""shared_dispatch_stub_455""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_455")"\n"
"\t"STUB_ASM_CODE("455")"\n"

".hidden ""shared_dispatch_stub_456""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_456")"\n"
"\t"STUB_ASM_CODE("456")"\n"

".hidden ""shared_dispatch_stub_457""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_457")"\n"
"\t"STUB_ASM_CODE("457")"\n"

".hidden ""shared_dispatch_stub_458""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_458")"\n"
"\t"STUB_ASM_CODE("458")"\n"

".hidden ""shared_dispatch_stub_459""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_459")"\n"
"\t"STUB_ASM_CODE("459")"\n"

".hidden ""shared_dispatch_stub_460""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_460")"\n"
"\t"STUB_ASM_CODE("460")"\n"

".hidden ""shared_dispatch_stub_461""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_461")"\n"
"\t"STUB_ASM_CODE("461")"\n"

".hidden ""shared_dispatch_stub_462""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_462")"\n"
"\t"STUB_ASM_CODE("462")"\n"

".hidden ""shared_dispatch_stub_463""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_463")"\n"
"\t"STUB_ASM_CODE("463")"\n"

".hidden ""shared_dispatch_stub_464""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_464")"\n"
"\t"STUB_ASM_CODE("464")"\n"

".hidden ""shared_dispatch_stub_465""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_465")"\n"
"\t"STUB_ASM_CODE("465")"\n"

".hidden ""shared_dispatch_stub_466""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_466")"\n"
"\t"STUB_ASM_CODE("466")"\n"

".hidden ""shared_dispatch_stub_467""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_467")"\n"
"\t"STUB_ASM_CODE("467")"\n"

".hidden ""shared_dispatch_stub_468""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_468")"\n"
"\t"STUB_ASM_CODE("468")"\n"

".hidden ""shared_dispatch_stub_469""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_469")"\n"
"\t"STUB_ASM_CODE("469")"\n"

".hidden ""shared_dispatch_stub_470""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_470")"\n"
"\t"STUB_ASM_CODE("470")"\n"

".hidden ""shared_dispatch_stub_471""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_471")"\n"
"\t"STUB_ASM_CODE("471")"\n"

".hidden ""shared_dispatch_stub_472""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_472")"\n"
"\t"STUB_ASM_CODE("472")"\n"

".hidden ""shared_dispatch_stub_473""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_473")"\n"
"\t"STUB_ASM_CODE("473")"\n"

".hidden ""shared_dispatch_stub_474""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_474")"\n"
"\t"STUB_ASM_CODE("474")"\n"

".hidden ""shared_dispatch_stub_475""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_475")"\n"
"\t"STUB_ASM_CODE("475")"\n"

".hidden ""shared_dispatch_stub_476""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_476")"\n"
"\t"STUB_ASM_CODE("476")"\n"

".hidden ""shared_dispatch_stub_477""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_477")"\n"
"\t"STUB_ASM_CODE("477")"\n"

".hidden ""shared_dispatch_stub_478""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_478")"\n"
"\t"STUB_ASM_CODE("478")"\n"

".hidden ""shared_dispatch_stub_479""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_479")"\n"
"\t"STUB_ASM_CODE("479")"\n"

".hidden ""shared_dispatch_stub_480""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_480")"\n"
"\t"STUB_ASM_CODE("480")"\n"

".hidden ""shared_dispatch_stub_481""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_481")"\n"
"\t"STUB_ASM_CODE("481")"\n"

".hidden ""shared_dispatch_stub_482""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_482")"\n"
"\t"STUB_ASM_CODE("482")"\n"

".hidden ""shared_dispatch_stub_483""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_483")"\n"
"\t"STUB_ASM_CODE("483")"\n"

".hidden ""shared_dispatch_stub_484""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_484")"\n"
"\t"STUB_ASM_CODE("484")"\n"

".hidden ""shared_dispatch_stub_485""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_485")"\n"
"\t"STUB_ASM_CODE("485")"\n"

".hidden ""shared_dispatch_stub_486""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_486")"\n"
"\t"STUB_ASM_CODE("486")"\n"

".hidden ""shared_dispatch_stub_487""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_487")"\n"
"\t"STUB_ASM_CODE("487")"\n"

".hidden ""shared_dispatch_stub_488""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_488")"\n"
"\t"STUB_ASM_CODE("488")"\n"

".hidden ""shared_dispatch_stub_489""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_489")"\n"
"\t"STUB_ASM_CODE("489")"\n"

".hidden ""shared_dispatch_stub_490""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_490")"\n"
"\t"STUB_ASM_CODE("490")"\n"

".hidden ""shared_dispatch_stub_491""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_491")"\n"
"\t"STUB_ASM_CODE("491")"\n"

".hidden ""shared_dispatch_stub_492""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_492")"\n"
"\t"STUB_ASM_CODE("492")"\n"

".hidden ""shared_dispatch_stub_493""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_493")"\n"
"\t"STUB_ASM_CODE("493")"\n"

".hidden ""shared_dispatch_stub_494""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_494")"\n"
"\t"STUB_ASM_CODE("494")"\n"

".hidden ""shared_dispatch_stub_495""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_495")"\n"
"\t"STUB_ASM_CODE("495")"\n"

".hidden ""shared_dispatch_stub_496""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_496")"\n"
"\t"STUB_ASM_CODE("496")"\n"

".hidden ""shared_dispatch_stub_497""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_497")"\n"
"\t"STUB_ASM_CODE("497")"\n"

".hidden ""shared_dispatch_stub_498""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_498")"\n"
"\t"STUB_ASM_CODE("498")"\n"

".hidden ""shared_dispatch_stub_499""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_499")"\n"
"\t"STUB_ASM_CODE("499")"\n"

".hidden ""shared_dispatch_stub_500""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_500")"\n"
"\t"STUB_ASM_CODE("500")"\n"

".hidden ""shared_dispatch_stub_501""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_501")"\n"
"\t"STUB_ASM_CODE("501")"\n"

".hidden ""shared_dispatch_stub_502""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_502")"\n"
"\t"STUB_ASM_CODE("502")"\n"

".hidden ""shared_dispatch_stub_503""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_503")"\n"
"\t"STUB_ASM_CODE("503")"\n"

".hidden ""shared_dispatch_stub_504""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_504")"\n"
"\t"STUB_ASM_CODE("504")"\n"

".hidden ""shared_dispatch_stub_505""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_505")"\n"
"\t"STUB_ASM_CODE("505")"\n"

".hidden ""shared_dispatch_stub_506""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_506")"\n"
"\t"STUB_ASM_CODE("506")"\n"

".hidden ""shared_dispatch_stub_507""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_507")"\n"
"\t"STUB_ASM_CODE("507")"\n"

".hidden ""shared_dispatch_stub_508""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_508")"\n"
"\t"STUB_ASM_CODE("508")"\n"

".hidden ""shared_dispatch_stub_509""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_509")"\n"
"\t"STUB_ASM_CODE("509")"\n"

".hidden ""shared_dispatch_stub_510""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_510")"\n"
"\t"STUB_ASM_CODE("510")"\n"

".hidden ""shared_dispatch_stub_511""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_511")"\n"
"\t"STUB_ASM_CODE("511")"\n"

".hidden ""shared_dispatch_stub_512""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_512")"\n"
"\t"STUB_ASM_CODE("512")"\n"

".hidden ""shared_dispatch_stub_513""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_513")"\n"
"\t"STUB_ASM_CODE("513")"\n"

".hidden ""shared_dispatch_stub_514""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_514")"\n"
"\t"STUB_ASM_CODE("514")"\n"

".hidden ""shared_dispatch_stub_515""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_515")"\n"
"\t"STUB_ASM_CODE("515")"\n"

".hidden ""shared_dispatch_stub_516""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_516")"\n"
"\t"STUB_ASM_CODE("516")"\n"

".hidden ""shared_dispatch_stub_517""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_517")"\n"
"\t"STUB_ASM_CODE("517")"\n"

".hidden ""shared_dispatch_stub_518""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_518")"\n"
"\t"STUB_ASM_CODE("518")"\n"

".hidden ""shared_dispatch_stub_519""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_519")"\n"
"\t"STUB_ASM_CODE("519")"\n"

".hidden ""shared_dispatch_stub_520""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_520")"\n"
"\t"STUB_ASM_CODE("520")"\n"

".hidden ""shared_dispatch_stub_521""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_521")"\n"
"\t"STUB_ASM_CODE("521")"\n"

".hidden ""shared_dispatch_stub_522""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_522")"\n"
"\t"STUB_ASM_CODE("522")"\n"

".hidden ""shared_dispatch_stub_523""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_523")"\n"
"\t"STUB_ASM_CODE("523")"\n"

".hidden ""shared_dispatch_stub_524""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_524")"\n"
"\t"STUB_ASM_CODE("524")"\n"

".hidden ""shared_dispatch_stub_525""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_525")"\n"
"\t"STUB_ASM_CODE("525")"\n"

".hidden ""shared_dispatch_stub_526""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_526")"\n"
"\t"STUB_ASM_CODE("526")"\n"

".hidden ""shared_dispatch_stub_527""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_527")"\n"
"\t"STUB_ASM_CODE("527")"\n"

".hidden ""shared_dispatch_stub_528""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_528")"\n"
"\t"STUB_ASM_CODE("528")"\n"

".hidden ""shared_dispatch_stub_529""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_529")"\n"
"\t"STUB_ASM_CODE("529")"\n"

".hidden ""shared_dispatch_stub_530""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_530")"\n"
"\t"STUB_ASM_CODE("530")"\n"

".hidden ""shared_dispatch_stub_531""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_531")"\n"
"\t"STUB_ASM_CODE("531")"\n"

".hidden ""shared_dispatch_stub_532""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_532")"\n"
"\t"STUB_ASM_CODE("532")"\n"

".hidden ""shared_dispatch_stub_533""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_533")"\n"
"\t"STUB_ASM_CODE("533")"\n"

".hidden ""shared_dispatch_stub_534""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_534")"\n"
"\t"STUB_ASM_CODE("534")"\n"

".hidden ""shared_dispatch_stub_535""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_535")"\n"
"\t"STUB_ASM_CODE("535")"\n"

".hidden ""shared_dispatch_stub_536""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_536")"\n"
"\t"STUB_ASM_CODE("536")"\n"

".hidden ""shared_dispatch_stub_537""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_537")"\n"
"\t"STUB_ASM_CODE("537")"\n"

".hidden ""shared_dispatch_stub_538""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_538")"\n"
"\t"STUB_ASM_CODE("538")"\n"

".hidden ""shared_dispatch_stub_539""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_539")"\n"
"\t"STUB_ASM_CODE("539")"\n"

".hidden ""shared_dispatch_stub_540""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_540")"\n"
"\t"STUB_ASM_CODE("540")"\n"

".hidden ""shared_dispatch_stub_541""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_541")"\n"
"\t"STUB_ASM_CODE("541")"\n"

".hidden ""shared_dispatch_stub_542""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_542")"\n"
"\t"STUB_ASM_CODE("542")"\n"

".hidden ""shared_dispatch_stub_543""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_543")"\n"
"\t"STUB_ASM_CODE("543")"\n"

".hidden ""shared_dispatch_stub_544""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_544")"\n"
"\t"STUB_ASM_CODE("544")"\n"

".hidden ""shared_dispatch_stub_545""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_545")"\n"
"\t"STUB_ASM_CODE("545")"\n"

".hidden ""shared_dispatch_stub_546""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_546")"\n"
"\t"STUB_ASM_CODE("546")"\n"

".hidden ""shared_dispatch_stub_547""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_547")"\n"
"\t"STUB_ASM_CODE("547")"\n"

".hidden ""shared_dispatch_stub_548""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_548")"\n"
"\t"STUB_ASM_CODE("548")"\n"

".hidden ""shared_dispatch_stub_549""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_549")"\n"
"\t"STUB_ASM_CODE("549")"\n"

".hidden ""shared_dispatch_stub_550""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_550")"\n"
"\t"STUB_ASM_CODE("550")"\n"

".hidden ""shared_dispatch_stub_551""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_551")"\n"
"\t"STUB_ASM_CODE("551")"\n"

".hidden ""shared_dispatch_stub_552""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_552")"\n"
"\t"STUB_ASM_CODE("552")"\n"

".hidden ""shared_dispatch_stub_553""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_553")"\n"
"\t"STUB_ASM_CODE("553")"\n"

".hidden ""shared_dispatch_stub_554""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_554")"\n"
"\t"STUB_ASM_CODE("554")"\n"

".hidden ""shared_dispatch_stub_555""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_555")"\n"
"\t"STUB_ASM_CODE("555")"\n"

".hidden ""shared_dispatch_stub_556""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_556")"\n"
"\t"STUB_ASM_CODE("556")"\n"

".hidden ""shared_dispatch_stub_557""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_557")"\n"
"\t"STUB_ASM_CODE("557")"\n"

".hidden ""shared_dispatch_stub_558""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_558")"\n"
"\t"STUB_ASM_CODE("558")"\n"

".hidden ""shared_dispatch_stub_559""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_559")"\n"
"\t"STUB_ASM_CODE("559")"\n"

".hidden ""shared_dispatch_stub_560""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_560")"\n"
"\t"STUB_ASM_CODE("560")"\n"

".hidden ""shared_dispatch_stub_561""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_561")"\n"
"\t"STUB_ASM_CODE("561")"\n"

".hidden ""shared_dispatch_stub_562""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_562")"\n"
"\t"STUB_ASM_CODE("562")"\n"

".hidden ""shared_dispatch_stub_563""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_563")"\n"
"\t"STUB_ASM_CODE("563")"\n"

".hidden ""shared_dispatch_stub_564""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_564")"\n"
"\t"STUB_ASM_CODE("564")"\n"

".hidden ""shared_dispatch_stub_565""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_565")"\n"
"\t"STUB_ASM_CODE("565")"\n"

".hidden ""shared_dispatch_stub_566""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_566")"\n"
"\t"STUB_ASM_CODE("566")"\n"

".hidden ""shared_dispatch_stub_567""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_567")"\n"
"\t"STUB_ASM_CODE("567")"\n"

".hidden ""shared_dispatch_stub_568""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_568")"\n"
"\t"STUB_ASM_CODE("568")"\n"

".hidden ""shared_dispatch_stub_569""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_569")"\n"
"\t"STUB_ASM_CODE("569")"\n"

".hidden ""shared_dispatch_stub_570""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_570")"\n"
"\t"STUB_ASM_CODE("570")"\n"

".hidden ""shared_dispatch_stub_571""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_571")"\n"
"\t"STUB_ASM_CODE("571")"\n"

".hidden ""shared_dispatch_stub_572""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_572")"\n"
"\t"STUB_ASM_CODE("572")"\n"

".hidden ""shared_dispatch_stub_573""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_573")"\n"
"\t"STUB_ASM_CODE("573")"\n"

".hidden ""shared_dispatch_stub_574""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_574")"\n"
"\t"STUB_ASM_CODE("574")"\n"

".hidden ""shared_dispatch_stub_575""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_575")"\n"
"\t"STUB_ASM_CODE("575")"\n"

".hidden ""shared_dispatch_stub_576""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_576")"\n"
"\t"STUB_ASM_CODE("576")"\n"

".hidden ""shared_dispatch_stub_577""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_577")"\n"
"\t"STUB_ASM_CODE("577")"\n"

".hidden ""shared_dispatch_stub_578""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_578")"\n"
"\t"STUB_ASM_CODE("578")"\n"

".hidden ""shared_dispatch_stub_579""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_579")"\n"
"\t"STUB_ASM_CODE("579")"\n"

".hidden ""shared_dispatch_stub_580""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_580")"\n"
"\t"STUB_ASM_CODE("580")"\n"

".hidden ""shared_dispatch_stub_581""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_581")"\n"
"\t"STUB_ASM_CODE("581")"\n"

".hidden ""shared_dispatch_stub_582""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_582")"\n"
"\t"STUB_ASM_CODE("582")"\n"

".hidden ""shared_dispatch_stub_583""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_583")"\n"
"\t"STUB_ASM_CODE("583")"\n"

".hidden ""shared_dispatch_stub_584""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_584")"\n"
"\t"STUB_ASM_CODE("584")"\n"

".hidden ""shared_dispatch_stub_585""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_585")"\n"
"\t"STUB_ASM_CODE("585")"\n"

".hidden ""shared_dispatch_stub_586""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_586")"\n"
"\t"STUB_ASM_CODE("586")"\n"

".hidden ""shared_dispatch_stub_587""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_587")"\n"
"\t"STUB_ASM_CODE("587")"\n"

".hidden ""shared_dispatch_stub_588""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_588")"\n"
"\t"STUB_ASM_CODE("588")"\n"

".hidden ""shared_dispatch_stub_589""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_589")"\n"
"\t"STUB_ASM_CODE("589")"\n"

".hidden ""shared_dispatch_stub_590""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_590")"\n"
"\t"STUB_ASM_CODE("590")"\n"

".hidden ""shared_dispatch_stub_591""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_591")"\n"
"\t"STUB_ASM_CODE("591")"\n"

".hidden ""shared_dispatch_stub_592""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_592")"\n"
"\t"STUB_ASM_CODE("592")"\n"

".hidden ""shared_dispatch_stub_593""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_593")"\n"
"\t"STUB_ASM_CODE("593")"\n"

".hidden ""shared_dispatch_stub_594""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_594")"\n"
"\t"STUB_ASM_CODE("594")"\n"

".hidden ""shared_dispatch_stub_595""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_595")"\n"
"\t"STUB_ASM_CODE("595")"\n"

".hidden ""shared_dispatch_stub_596""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_596")"\n"
"\t"STUB_ASM_CODE("596")"\n"

".hidden ""shared_dispatch_stub_597""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_597")"\n"
"\t"STUB_ASM_CODE("597")"\n"

".hidden ""shared_dispatch_stub_598""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_598")"\n"
"\t"STUB_ASM_CODE("598")"\n"

".hidden ""shared_dispatch_stub_599""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_599")"\n"
"\t"STUB_ASM_CODE("599")"\n"

".hidden ""shared_dispatch_stub_600""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_600")"\n"
"\t"STUB_ASM_CODE("600")"\n"

".hidden ""shared_dispatch_stub_601""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_601")"\n"
"\t"STUB_ASM_CODE("601")"\n"

".hidden ""shared_dispatch_stub_602""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_602")"\n"
"\t"STUB_ASM_CODE("602")"\n"

".hidden ""shared_dispatch_stub_603""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_603")"\n"
"\t"STUB_ASM_CODE("603")"\n"

".hidden ""shared_dispatch_stub_604""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_604")"\n"
"\t"STUB_ASM_CODE("604")"\n"

".hidden ""shared_dispatch_stub_605""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_605")"\n"
"\t"STUB_ASM_CODE("605")"\n"

".hidden ""shared_dispatch_stub_606""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_606")"\n"
"\t"STUB_ASM_CODE("606")"\n"

".hidden ""shared_dispatch_stub_607""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_607")"\n"
"\t"STUB_ASM_CODE("607")"\n"

".hidden ""shared_dispatch_stub_608""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_608")"\n"
"\t"STUB_ASM_CODE("608")"\n"

".hidden ""shared_dispatch_stub_609""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_609")"\n"
"\t"STUB_ASM_CODE("609")"\n"

".hidden ""shared_dispatch_stub_610""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_610")"\n"
"\t"STUB_ASM_CODE("610")"\n"

".hidden ""shared_dispatch_stub_611""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_611")"\n"
"\t"STUB_ASM_CODE("611")"\n"

".hidden ""shared_dispatch_stub_612""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_612")"\n"
"\t"STUB_ASM_CODE("612")"\n"

".hidden ""shared_dispatch_stub_613""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_613")"\n"
"\t"STUB_ASM_CODE("613")"\n"

".hidden ""shared_dispatch_stub_614""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_614")"\n"
"\t"STUB_ASM_CODE("614")"\n"

".hidden ""shared_dispatch_stub_615""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_615")"\n"
"\t"STUB_ASM_CODE("615")"\n"

".hidden ""shared_dispatch_stub_616""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_616")"\n"
"\t"STUB_ASM_CODE("616")"\n"

".hidden ""shared_dispatch_stub_617""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_617")"\n"
"\t"STUB_ASM_CODE("617")"\n"

".hidden ""shared_dispatch_stub_618""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_618")"\n"
"\t"STUB_ASM_CODE("618")"\n"

".hidden ""shared_dispatch_stub_619""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_619")"\n"
"\t"STUB_ASM_CODE("619")"\n"

".hidden ""shared_dispatch_stub_620""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_620")"\n"
"\t"STUB_ASM_CODE("620")"\n"

".hidden ""shared_dispatch_stub_621""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_621")"\n"
"\t"STUB_ASM_CODE("621")"\n"

".hidden ""shared_dispatch_stub_622""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_622")"\n"
"\t"STUB_ASM_CODE("622")"\n"

".hidden ""shared_dispatch_stub_623""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_623")"\n"
"\t"STUB_ASM_CODE("623")"\n"

".hidden ""shared_dispatch_stub_624""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_624")"\n"
"\t"STUB_ASM_CODE("624")"\n"

".hidden ""shared_dispatch_stub_625""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_625")"\n"
"\t"STUB_ASM_CODE("625")"\n"

".hidden ""shared_dispatch_stub_626""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_626")"\n"
"\t"STUB_ASM_CODE("626")"\n"

".hidden ""shared_dispatch_stub_627""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_627")"\n"
"\t"STUB_ASM_CODE("627")"\n"

".hidden ""shared_dispatch_stub_628""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_628")"\n"
"\t"STUB_ASM_CODE("628")"\n"

".hidden ""shared_dispatch_stub_629""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_629")"\n"
"\t"STUB_ASM_CODE("629")"\n"

".hidden ""shared_dispatch_stub_630""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_630")"\n"
"\t"STUB_ASM_CODE("630")"\n"

".hidden ""shared_dispatch_stub_631""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_631")"\n"
"\t"STUB_ASM_CODE("631")"\n"

".hidden ""shared_dispatch_stub_632""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_632")"\n"
"\t"STUB_ASM_CODE("632")"\n"

".hidden ""shared_dispatch_stub_633""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_633")"\n"
"\t"STUB_ASM_CODE("633")"\n"

".hidden ""shared_dispatch_stub_634""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_634")"\n"
"\t"STUB_ASM_CODE("634")"\n"

".hidden ""shared_dispatch_stub_635""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_635")"\n"
"\t"STUB_ASM_CODE("635")"\n"

".hidden ""shared_dispatch_stub_636""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_636")"\n"
"\t"STUB_ASM_CODE("636")"\n"

".hidden ""shared_dispatch_stub_637""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_637")"\n"
"\t"STUB_ASM_CODE("637")"\n"

".hidden ""shared_dispatch_stub_638""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_638")"\n"
"\t"STUB_ASM_CODE("638")"\n"

".hidden ""shared_dispatch_stub_639""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_639")"\n"
"\t"STUB_ASM_CODE("639")"\n"

".hidden ""shared_dispatch_stub_640""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_640")"\n"
"\t"STUB_ASM_CODE("640")"\n"

".hidden ""shared_dispatch_stub_641""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_641")"\n"
"\t"STUB_ASM_CODE("641")"\n"

".hidden ""shared_dispatch_stub_642""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_642")"\n"
"\t"STUB_ASM_CODE("642")"\n"

".hidden ""shared_dispatch_stub_643""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_643")"\n"
"\t"STUB_ASM_CODE("643")"\n"

".hidden ""shared_dispatch_stub_644""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_644")"\n"
"\t"STUB_ASM_CODE("644")"\n"

".hidden ""shared_dispatch_stub_645""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_645")"\n"
"\t"STUB_ASM_CODE("645")"\n"

".hidden ""shared_dispatch_stub_646""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_646")"\n"
"\t"STUB_ASM_CODE("646")"\n"

".hidden ""shared_dispatch_stub_647""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_647")"\n"
"\t"STUB_ASM_CODE("647")"\n"

".hidden ""shared_dispatch_stub_648""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_648")"\n"
"\t"STUB_ASM_CODE("648")"\n"

".hidden ""shared_dispatch_stub_649""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_649")"\n"
"\t"STUB_ASM_CODE("649")"\n"

".hidden ""shared_dispatch_stub_650""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_650")"\n"
"\t"STUB_ASM_CODE("650")"\n"

".hidden ""shared_dispatch_stub_651""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_651")"\n"
"\t"STUB_ASM_CODE("651")"\n"

".hidden ""shared_dispatch_stub_652""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_652")"\n"
"\t"STUB_ASM_CODE("652")"\n"

".hidden ""shared_dispatch_stub_653""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_653")"\n"
"\t"STUB_ASM_CODE("653")"\n"

".hidden ""shared_dispatch_stub_654""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_654")"\n"
"\t"STUB_ASM_CODE("654")"\n"

".hidden ""shared_dispatch_stub_655""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_655")"\n"
"\t"STUB_ASM_CODE("655")"\n"

".hidden ""shared_dispatch_stub_656""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_656")"\n"
"\t"STUB_ASM_CODE("656")"\n"

".hidden ""shared_dispatch_stub_657""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_657")"\n"
"\t"STUB_ASM_CODE("657")"\n"

".hidden ""shared_dispatch_stub_658""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_658")"\n"
"\t"STUB_ASM_CODE("658")"\n"

".hidden ""shared_dispatch_stub_659""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_659")"\n"
"\t"STUB_ASM_CODE("659")"\n"

".hidden ""shared_dispatch_stub_660""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_660")"\n"
"\t"STUB_ASM_CODE("660")"\n"

".hidden ""shared_dispatch_stub_661""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_661")"\n"
"\t"STUB_ASM_CODE("661")"\n"

".hidden ""shared_dispatch_stub_662""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_662")"\n"
"\t"STUB_ASM_CODE("662")"\n"

".hidden ""shared_dispatch_stub_663""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_663")"\n"
"\t"STUB_ASM_CODE("663")"\n"

".hidden ""shared_dispatch_stub_664""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_664")"\n"
"\t"STUB_ASM_CODE("664")"\n"

".hidden ""shared_dispatch_stub_665""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_665")"\n"
"\t"STUB_ASM_CODE("665")"\n"

".hidden ""shared_dispatch_stub_666""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_666")"\n"
"\t"STUB_ASM_CODE("666")"\n"

".hidden ""shared_dispatch_stub_667""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_667")"\n"
"\t"STUB_ASM_CODE("667")"\n"

".hidden ""shared_dispatch_stub_668""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_668")"\n"
"\t"STUB_ASM_CODE("668")"\n"

".hidden ""shared_dispatch_stub_669""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_669")"\n"
"\t"STUB_ASM_CODE("669")"\n"

".hidden ""shared_dispatch_stub_670""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_670")"\n"
"\t"STUB_ASM_CODE("670")"\n"

".hidden ""shared_dispatch_stub_671""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_671")"\n"
"\t"STUB_ASM_CODE("671")"\n"

".hidden ""shared_dispatch_stub_672""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_672")"\n"
"\t"STUB_ASM_CODE("672")"\n"

".hidden ""shared_dispatch_stub_673""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_673")"\n"
"\t"STUB_ASM_CODE("673")"\n"

".hidden ""shared_dispatch_stub_674""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_674")"\n"
"\t"STUB_ASM_CODE("674")"\n"

".hidden ""shared_dispatch_stub_675""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_675")"\n"
"\t"STUB_ASM_CODE("675")"\n"

".hidden ""shared_dispatch_stub_676""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_676")"\n"
"\t"STUB_ASM_CODE("676")"\n"

".hidden ""shared_dispatch_stub_677""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_677")"\n"
"\t"STUB_ASM_CODE("677")"\n"

".hidden ""shared_dispatch_stub_678""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_678")"\n"
"\t"STUB_ASM_CODE("678")"\n"

".hidden ""shared_dispatch_stub_679""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_679")"\n"
"\t"STUB_ASM_CODE("679")"\n"

".hidden ""shared_dispatch_stub_680""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_680")"\n"
"\t"STUB_ASM_CODE("680")"\n"

".hidden ""shared_dispatch_stub_681""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_681")"\n"
"\t"STUB_ASM_CODE("681")"\n"

".hidden ""shared_dispatch_stub_682""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_682")"\n"
"\t"STUB_ASM_CODE("682")"\n"

".hidden ""shared_dispatch_stub_683""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_683")"\n"
"\t"STUB_ASM_CODE("683")"\n"

".hidden ""shared_dispatch_stub_684""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_684")"\n"
"\t"STUB_ASM_CODE("684")"\n"

".hidden ""shared_dispatch_stub_685""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_685")"\n"
"\t"STUB_ASM_CODE("685")"\n"

".hidden ""shared_dispatch_stub_686""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_686")"\n"
"\t"STUB_ASM_CODE("686")"\n"

".hidden ""shared_dispatch_stub_687""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_687")"\n"
"\t"STUB_ASM_CODE("687")"\n"

".hidden ""shared_dispatch_stub_688""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_688")"\n"
"\t"STUB_ASM_CODE("688")"\n"

".hidden ""shared_dispatch_stub_689""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_689")"\n"
"\t"STUB_ASM_CODE("689")"\n"

".hidden ""shared_dispatch_stub_690""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_690")"\n"
"\t"STUB_ASM_CODE("690")"\n"

".hidden ""shared_dispatch_stub_691""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_691")"\n"
"\t"STUB_ASM_CODE("691")"\n"

".hidden ""shared_dispatch_stub_692""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_692")"\n"
"\t"STUB_ASM_CODE("692")"\n"

".hidden ""shared_dispatch_stub_693""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_693")"\n"
"\t"STUB_ASM_CODE("693")"\n"

".hidden ""shared_dispatch_stub_694""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_694")"\n"
"\t"STUB_ASM_CODE("694")"\n"

".hidden ""shared_dispatch_stub_695""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_695")"\n"
"\t"STUB_ASM_CODE("695")"\n"

".hidden ""shared_dispatch_stub_696""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_696")"\n"
"\t"STUB_ASM_CODE("696")"\n"

".hidden ""shared_dispatch_stub_697""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_697")"\n"
"\t"STUB_ASM_CODE("697")"\n"

".hidden ""shared_dispatch_stub_698""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_698")"\n"
"\t"STUB_ASM_CODE("698")"\n"

".hidden ""shared_dispatch_stub_699""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_699")"\n"
"\t"STUB_ASM_CODE("699")"\n"

".hidden ""shared_dispatch_stub_700""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_700")"\n"
"\t"STUB_ASM_CODE("700")"\n"

".hidden ""shared_dispatch_stub_701""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_701")"\n"
"\t"STUB_ASM_CODE("701")"\n"

".hidden ""shared_dispatch_stub_702""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_702")"\n"
"\t"STUB_ASM_CODE("702")"\n"

".hidden ""shared_dispatch_stub_703""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_703")"\n"
"\t"STUB_ASM_CODE("703")"\n"

".hidden ""shared_dispatch_stub_704""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_704")"\n"
"\t"STUB_ASM_CODE("704")"\n"

".hidden ""shared_dispatch_stub_705""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_705")"\n"
"\t"STUB_ASM_CODE("705")"\n"

".hidden ""shared_dispatch_stub_706""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_706")"\n"
"\t"STUB_ASM_CODE("706")"\n"

".hidden ""shared_dispatch_stub_707""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_707")"\n"
"\t"STUB_ASM_CODE("707")"\n"

".hidden ""shared_dispatch_stub_708""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_708")"\n"
"\t"STUB_ASM_CODE("708")"\n"

".hidden ""shared_dispatch_stub_709""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_709")"\n"
"\t"STUB_ASM_CODE("709")"\n"

".hidden ""shared_dispatch_stub_710""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_710")"\n"
"\t"STUB_ASM_CODE("710")"\n"

".hidden ""shared_dispatch_stub_711""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_711")"\n"
"\t"STUB_ASM_CODE("711")"\n"

".hidden ""shared_dispatch_stub_712""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_712")"\n"
"\t"STUB_ASM_CODE("712")"\n"

".hidden ""shared_dispatch_stub_713""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_713")"\n"
"\t"STUB_ASM_CODE("713")"\n"

".hidden ""shared_dispatch_stub_714""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_714")"\n"
"\t"STUB_ASM_CODE("714")"\n"

".hidden ""shared_dispatch_stub_715""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_715")"\n"
"\t"STUB_ASM_CODE("715")"\n"

".hidden ""shared_dispatch_stub_716""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_716")"\n"
"\t"STUB_ASM_CODE("716")"\n"

".hidden ""shared_dispatch_stub_717""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_717")"\n"
"\t"STUB_ASM_CODE("717")"\n"

".hidden ""shared_dispatch_stub_718""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_718")"\n"
"\t"STUB_ASM_CODE("718")"\n"

".hidden ""shared_dispatch_stub_719""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_719")"\n"
"\t"STUB_ASM_CODE("719")"\n"

".hidden ""shared_dispatch_stub_720""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_720")"\n"
"\t"STUB_ASM_CODE("720")"\n"

".hidden ""shared_dispatch_stub_721""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_721")"\n"
"\t"STUB_ASM_CODE("721")"\n"

".hidden ""shared_dispatch_stub_722""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_722")"\n"
"\t"STUB_ASM_CODE("722")"\n"

".hidden ""shared_dispatch_stub_723""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_723")"\n"
"\t"STUB_ASM_CODE("723")"\n"

".hidden ""shared_dispatch_stub_724""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_724")"\n"
"\t"STUB_ASM_CODE("724")"\n"

".hidden ""shared_dispatch_stub_725""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_725")"\n"
"\t"STUB_ASM_CODE("725")"\n"

".hidden ""shared_dispatch_stub_726""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_726")"\n"
"\t"STUB_ASM_CODE("726")"\n"

".hidden ""shared_dispatch_stub_727""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_727")"\n"
"\t"STUB_ASM_CODE("727")"\n"

".hidden ""shared_dispatch_stub_728""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_728")"\n"
"\t"STUB_ASM_CODE("728")"\n"

".hidden ""shared_dispatch_stub_729""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_729")"\n"
"\t"STUB_ASM_CODE("729")"\n"

".hidden ""shared_dispatch_stub_730""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_730")"\n"
"\t"STUB_ASM_CODE("730")"\n"

".hidden ""shared_dispatch_stub_731""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_731")"\n"
"\t"STUB_ASM_CODE("731")"\n"

".hidden ""shared_dispatch_stub_732""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_732")"\n"
"\t"STUB_ASM_CODE("732")"\n"

".hidden ""shared_dispatch_stub_733""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_733")"\n"
"\t"STUB_ASM_CODE("733")"\n"

".hidden ""shared_dispatch_stub_734""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_734")"\n"
"\t"STUB_ASM_CODE("734")"\n"

".hidden ""shared_dispatch_stub_735""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_735")"\n"
"\t"STUB_ASM_CODE("735")"\n"

".hidden ""shared_dispatch_stub_736""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_736")"\n"
"\t"STUB_ASM_CODE("736")"\n"

".hidden ""shared_dispatch_stub_737""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_737")"\n"
"\t"STUB_ASM_CODE("737")"\n"

".hidden ""shared_dispatch_stub_738""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_738")"\n"
"\t"STUB_ASM_CODE("738")"\n"

".hidden ""shared_dispatch_stub_739""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_739")"\n"
"\t"STUB_ASM_CODE("739")"\n"

".hidden ""shared_dispatch_stub_740""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_740")"\n"
"\t"STUB_ASM_CODE("740")"\n"

".hidden ""shared_dispatch_stub_741""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_741")"\n"
"\t"STUB_ASM_CODE("741")"\n"

".hidden ""shared_dispatch_stub_742""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_742")"\n"
"\t"STUB_ASM_CODE("742")"\n"

".hidden ""shared_dispatch_stub_743""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_743")"\n"
"\t"STUB_ASM_CODE("743")"\n"

".hidden ""shared_dispatch_stub_744""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_744")"\n"
"\t"STUB_ASM_CODE("744")"\n"

".hidden ""shared_dispatch_stub_745""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_745")"\n"
"\t"STUB_ASM_CODE("745")"\n"

".hidden ""shared_dispatch_stub_746""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_746")"\n"
"\t"STUB_ASM_CODE("746")"\n"

".hidden ""shared_dispatch_stub_747""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_747")"\n"
"\t"STUB_ASM_CODE("747")"\n"

".hidden ""shared_dispatch_stub_748""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_748")"\n"
"\t"STUB_ASM_CODE("748")"\n"

".hidden ""shared_dispatch_stub_749""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_749")"\n"
"\t"STUB_ASM_CODE("749")"\n"

".hidden ""shared_dispatch_stub_750""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_750")"\n"
"\t"STUB_ASM_CODE("750")"\n"

".hidden ""shared_dispatch_stub_751""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_751")"\n"
"\t"STUB_ASM_CODE("751")"\n"

".hidden ""shared_dispatch_stub_752""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_752")"\n"
"\t"STUB_ASM_CODE("752")"\n"

".hidden ""shared_dispatch_stub_753""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_753")"\n"
"\t"STUB_ASM_CODE("753")"\n"

".hidden ""shared_dispatch_stub_754""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_754")"\n"
"\t"STUB_ASM_CODE("754")"\n"

".hidden ""shared_dispatch_stub_755""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_755")"\n"
"\t"STUB_ASM_CODE("755")"\n"

".hidden ""shared_dispatch_stub_756""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_756")"\n"
"\t"STUB_ASM_CODE("756")"\n"

".hidden ""shared_dispatch_stub_757""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_757")"\n"
"\t"STUB_ASM_CODE("757")"\n"

".hidden ""shared_dispatch_stub_758""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_758")"\n"
"\t"STUB_ASM_CODE("758")"\n"

".hidden ""shared_dispatch_stub_759""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_759")"\n"
"\t"STUB_ASM_CODE("759")"\n"

".hidden ""shared_dispatch_stub_760""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_760")"\n"
"\t"STUB_ASM_CODE("760")"\n"

".hidden ""shared_dispatch_stub_761""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_761")"\n"
"\t"STUB_ASM_CODE("761")"\n"

".hidden ""shared_dispatch_stub_762""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_762")"\n"
"\t"STUB_ASM_CODE("762")"\n"

".hidden ""shared_dispatch_stub_763""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_763")"\n"
"\t"STUB_ASM_CODE("763")"\n"

".hidden ""shared_dispatch_stub_764""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_764")"\n"
"\t"STUB_ASM_CODE("764")"\n"

".hidden ""shared_dispatch_stub_765""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_765")"\n"
"\t"STUB_ASM_CODE("765")"\n"

".hidden ""shared_dispatch_stub_766""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_766")"\n"
"\t"STUB_ASM_CODE("766")"\n"

".hidden ""shared_dispatch_stub_767""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_767")"\n"
"\t"STUB_ASM_CODE("767")"\n"

".hidden ""shared_dispatch_stub_768""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_768")"\n"
"\t"STUB_ASM_CODE("768")"\n"

".hidden ""shared_dispatch_stub_769""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_769")"\n"
"\t"STUB_ASM_CODE("769")"\n"

".hidden ""shared_dispatch_stub_770""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_770")"\n"
"\t"STUB_ASM_CODE("770")"\n"

".hidden ""shared_dispatch_stub_771""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_771")"\n"
"\t"STUB_ASM_CODE("771")"\n"

".hidden ""shared_dispatch_stub_772""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_772")"\n"
"\t"STUB_ASM_CODE("772")"\n"

".hidden ""shared_dispatch_stub_773""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_773")"\n"
"\t"STUB_ASM_CODE("773")"\n"

".hidden ""shared_dispatch_stub_774""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_774")"\n"
"\t"STUB_ASM_CODE("774")"\n"

".hidden ""shared_dispatch_stub_775""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_775")"\n"
"\t"STUB_ASM_CODE("775")"\n"

".hidden ""shared_dispatch_stub_776""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_776")"\n"
"\t"STUB_ASM_CODE("776")"\n"

".hidden ""shared_dispatch_stub_777""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_777")"\n"
"\t"STUB_ASM_CODE("777")"\n"

".hidden ""shared_dispatch_stub_778""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_778")"\n"
"\t"STUB_ASM_CODE("778")"\n"

".hidden ""shared_dispatch_stub_779""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_779")"\n"
"\t"STUB_ASM_CODE("779")"\n"

".hidden ""shared_dispatch_stub_780""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_780")"\n"
"\t"STUB_ASM_CODE("780")"\n"

".hidden ""shared_dispatch_stub_781""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_781")"\n"
"\t"STUB_ASM_CODE("781")"\n"

".hidden ""shared_dispatch_stub_782""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_782")"\n"
"\t"STUB_ASM_CODE("782")"\n"

".hidden ""shared_dispatch_stub_783""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_783")"\n"
"\t"STUB_ASM_CODE("783")"\n"

".hidden ""shared_dispatch_stub_784""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_784")"\n"
"\t"STUB_ASM_CODE("784")"\n"

".hidden ""shared_dispatch_stub_785""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_785")"\n"
"\t"STUB_ASM_CODE("785")"\n"

".hidden ""shared_dispatch_stub_786""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_786")"\n"
"\t"STUB_ASM_CODE("786")"\n"

".hidden ""shared_dispatch_stub_787""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_787")"\n"
"\t"STUB_ASM_CODE("787")"\n"

".hidden ""shared_dispatch_stub_788""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_788")"\n"
"\t"STUB_ASM_CODE("788")"\n"

".hidden ""shared_dispatch_stub_789""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_789")"\n"
"\t"STUB_ASM_CODE("789")"\n"

".hidden ""shared_dispatch_stub_790""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_790")"\n"
"\t"STUB_ASM_CODE("790")"\n"

".hidden ""shared_dispatch_stub_791""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_791")"\n"
"\t"STUB_ASM_CODE("791")"\n"

".hidden ""shared_dispatch_stub_792""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_792")"\n"
"\t"STUB_ASM_CODE("792")"\n"

".hidden ""shared_dispatch_stub_793""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_793")"\n"
"\t"STUB_ASM_CODE("793")"\n"

".hidden ""shared_dispatch_stub_794""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_794")"\n"
"\t"STUB_ASM_CODE("794")"\n"

".hidden ""shared_dispatch_stub_795""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_795")"\n"
"\t"STUB_ASM_CODE("795")"\n"

".hidden ""shared_dispatch_stub_796""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_796")"\n"
"\t"STUB_ASM_CODE("796")"\n"

".hidden ""shared_dispatch_stub_797""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_797")"\n"
"\t"STUB_ASM_CODE("797")"\n"

".hidden ""shared_dispatch_stub_798""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_798")"\n"
"\t"STUB_ASM_CODE("798")"\n"

".hidden ""shared_dispatch_stub_799""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_799")"\n"
"\t"STUB_ASM_CODE("799")"\n"

".hidden ""shared_dispatch_stub_800""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_800")"\n"
"\t"STUB_ASM_CODE("800")"\n"

".hidden ""shared_dispatch_stub_801""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_801")"\n"
"\t"STUB_ASM_CODE("801")"\n"

".hidden ""shared_dispatch_stub_802""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_802")"\n"
"\t"STUB_ASM_CODE("802")"\n"

".hidden ""shared_dispatch_stub_803""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_803")"\n"
"\t"STUB_ASM_CODE("803")"\n"

".hidden ""shared_dispatch_stub_804""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_804")"\n"
"\t"STUB_ASM_CODE("804")"\n"

".hidden ""shared_dispatch_stub_805""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_805")"\n"
"\t"STUB_ASM_CODE("805")"\n"

".hidden ""shared_dispatch_stub_806""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_806")"\n"
"\t"STUB_ASM_CODE("806")"\n"

".hidden ""shared_dispatch_stub_807""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_807")"\n"
"\t"STUB_ASM_CODE("807")"\n"

".hidden ""shared_dispatch_stub_808""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_808")"\n"
"\t"STUB_ASM_CODE("808")"\n"

".hidden ""shared_dispatch_stub_809""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_809")"\n"
"\t"STUB_ASM_CODE("809")"\n"

".hidden ""shared_dispatch_stub_810""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_810")"\n"
"\t"STUB_ASM_CODE("810")"\n"

".hidden ""shared_dispatch_stub_811""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_811")"\n"
"\t"STUB_ASM_CODE("811")"\n"

".hidden ""shared_dispatch_stub_812""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_812")"\n"
"\t"STUB_ASM_CODE("812")"\n"

".hidden ""shared_dispatch_stub_813""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_813")"\n"
"\t"STUB_ASM_CODE("813")"\n"

".hidden ""shared_dispatch_stub_814""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_814")"\n"
"\t"STUB_ASM_CODE("814")"\n"

".hidden ""shared_dispatch_stub_815""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_815")"\n"
"\t"STUB_ASM_CODE("815")"\n"

".hidden ""shared_dispatch_stub_816""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_816")"\n"
"\t"STUB_ASM_CODE("816")"\n"

".hidden ""shared_dispatch_stub_817""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_817")"\n"
"\t"STUB_ASM_CODE("817")"\n"

".hidden ""shared_dispatch_stub_818""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_818")"\n"
"\t"STUB_ASM_CODE("818")"\n"

".hidden ""shared_dispatch_stub_819""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_819")"\n"
"\t"STUB_ASM_CODE("819")"\n"

".hidden ""shared_dispatch_stub_820""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_820")"\n"
"\t"STUB_ASM_CODE("820")"\n"

".hidden ""shared_dispatch_stub_821""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_821")"\n"
"\t"STUB_ASM_CODE("821")"\n"

".hidden ""shared_dispatch_stub_822""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_822")"\n"
"\t"STUB_ASM_CODE("822")"\n"

".hidden ""shared_dispatch_stub_823""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_823")"\n"
"\t"STUB_ASM_CODE("823")"\n"

".hidden ""shared_dispatch_stub_824""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_824")"\n"
"\t"STUB_ASM_CODE("824")"\n"

".hidden ""shared_dispatch_stub_825""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_825")"\n"
"\t"STUB_ASM_CODE("825")"\n"

".hidden ""shared_dispatch_stub_826""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_826")"\n"
"\t"STUB_ASM_CODE("826")"\n"

".hidden ""shared_dispatch_stub_827""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_827")"\n"
"\t"STUB_ASM_CODE("827")"\n"

".hidden ""shared_dispatch_stub_828""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_828")"\n"
"\t"STUB_ASM_CODE("828")"\n"

".hidden ""shared_dispatch_stub_829""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_829")"\n"
"\t"STUB_ASM_CODE("829")"\n"

".hidden ""shared_dispatch_stub_830""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_830")"\n"
"\t"STUB_ASM_CODE("830")"\n"

".hidden ""shared_dispatch_stub_831""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_831")"\n"
"\t"STUB_ASM_CODE("831")"\n"

".hidden ""shared_dispatch_stub_832""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_832")"\n"
"\t"STUB_ASM_CODE("832")"\n"

".hidden ""shared_dispatch_stub_833""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_833")"\n"
"\t"STUB_ASM_CODE("833")"\n"

".hidden ""shared_dispatch_stub_834""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_834")"\n"
"\t"STUB_ASM_CODE("834")"\n"

".hidden ""shared_dispatch_stub_835""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_835")"\n"
"\t"STUB_ASM_CODE("835")"\n"

".hidden ""shared_dispatch_stub_836""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_836")"\n"
"\t"STUB_ASM_CODE("836")"\n"

".hidden ""shared_dispatch_stub_837""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_837")"\n"
"\t"STUB_ASM_CODE("837")"\n"

".hidden ""shared_dispatch_stub_838""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_838")"\n"
"\t"STUB_ASM_CODE("838")"\n"

".hidden ""shared_dispatch_stub_839""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_839")"\n"
"\t"STUB_ASM_CODE("839")"\n"

".hidden ""shared_dispatch_stub_840""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_840")"\n"
"\t"STUB_ASM_CODE("840")"\n"

".hidden ""shared_dispatch_stub_841""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_841")"\n"
"\t"STUB_ASM_CODE("841")"\n"

".hidden ""shared_dispatch_stub_842""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_842")"\n"
"\t"STUB_ASM_CODE("842")"\n"

".hidden ""shared_dispatch_stub_843""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_843")"\n"
"\t"STUB_ASM_CODE("843")"\n"

".hidden ""shared_dispatch_stub_844""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_844")"\n"
"\t"STUB_ASM_CODE("844")"\n"

".hidden ""shared_dispatch_stub_845""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_845")"\n"
"\t"STUB_ASM_CODE("845")"\n"

".hidden ""shared_dispatch_stub_846""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_846")"\n"
"\t"STUB_ASM_CODE("846")"\n"

".hidden ""shared_dispatch_stub_847""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_847")"\n"
"\t"STUB_ASM_CODE("847")"\n"

".hidden ""shared_dispatch_stub_848""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_848")"\n"
"\t"STUB_ASM_CODE("848")"\n"

".hidden ""shared_dispatch_stub_849""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_849")"\n"
"\t"STUB_ASM_CODE("849")"\n"

".hidden ""shared_dispatch_stub_850""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_850")"\n"
"\t"STUB_ASM_CODE("850")"\n"

".hidden ""shared_dispatch_stub_851""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_851")"\n"
"\t"STUB_ASM_CODE("851")"\n"

".hidden ""shared_dispatch_stub_852""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_852")"\n"
"\t"STUB_ASM_CODE("852")"\n"

".hidden ""shared_dispatch_stub_853""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_853")"\n"
"\t"STUB_ASM_CODE("853")"\n"

".hidden ""shared_dispatch_stub_854""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_854")"\n"
"\t"STUB_ASM_CODE("854")"\n"

".hidden ""shared_dispatch_stub_855""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_855")"\n"
"\t"STUB_ASM_CODE("855")"\n"

".hidden ""shared_dispatch_stub_856""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_856")"\n"
"\t"STUB_ASM_CODE("856")"\n"

".hidden ""shared_dispatch_stub_857""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_857")"\n"
"\t"STUB_ASM_CODE("857")"\n"

".hidden ""shared_dispatch_stub_858""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_858")"\n"
"\t"STUB_ASM_CODE("858")"\n"

".hidden ""shared_dispatch_stub_859""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_859")"\n"
"\t"STUB_ASM_CODE("859")"\n"

".hidden ""shared_dispatch_stub_860""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_860")"\n"
"\t"STUB_ASM_CODE("860")"\n"

".hidden ""shared_dispatch_stub_861""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_861")"\n"
"\t"STUB_ASM_CODE("861")"\n"

".hidden ""shared_dispatch_stub_862""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_862")"\n"
"\t"STUB_ASM_CODE("862")"\n"

".hidden ""shared_dispatch_stub_863""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_863")"\n"
"\t"STUB_ASM_CODE("863")"\n"

".hidden ""shared_dispatch_stub_864""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_864")"\n"
"\t"STUB_ASM_CODE("864")"\n"

".hidden ""shared_dispatch_stub_865""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_865")"\n"
"\t"STUB_ASM_CODE("865")"\n"

".hidden ""shared_dispatch_stub_866""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_866")"\n"
"\t"STUB_ASM_CODE("866")"\n"

".hidden ""shared_dispatch_stub_867""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_867")"\n"
"\t"STUB_ASM_CODE("867")"\n"

".hidden ""shared_dispatch_stub_868""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_868")"\n"
"\t"STUB_ASM_CODE("868")"\n"

".hidden ""shared_dispatch_stub_869""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_869")"\n"
"\t"STUB_ASM_CODE("869")"\n"

".hidden ""shared_dispatch_stub_870""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_870")"\n"
"\t"STUB_ASM_CODE("870")"\n"

".hidden ""shared_dispatch_stub_871""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_871")"\n"
"\t"STUB_ASM_CODE("871")"\n"

".hidden ""shared_dispatch_stub_872""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_872")"\n"
"\t"STUB_ASM_CODE("872")"\n"

".hidden ""shared_dispatch_stub_873""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_873")"\n"
"\t"STUB_ASM_CODE("873")"\n"

".hidden ""shared_dispatch_stub_874""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_874")"\n"
"\t"STUB_ASM_CODE("874")"\n"

".hidden ""shared_dispatch_stub_875""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_875")"\n"
"\t"STUB_ASM_CODE("875")"\n"

".hidden ""shared_dispatch_stub_876""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_876")"\n"
"\t"STUB_ASM_CODE("876")"\n"

".hidden ""shared_dispatch_stub_877""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_877")"\n"
"\t"STUB_ASM_CODE("877")"\n"

".hidden ""shared_dispatch_stub_878""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_878")"\n"
"\t"STUB_ASM_CODE("878")"\n"

".hidden ""shared_dispatch_stub_879""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_879")"\n"
"\t"STUB_ASM_CODE("879")"\n"

".hidden ""shared_dispatch_stub_880""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_880")"\n"
"\t"STUB_ASM_CODE("880")"\n"

".hidden ""shared_dispatch_stub_881""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_881")"\n"
"\t"STUB_ASM_CODE("881")"\n"

".hidden ""shared_dispatch_stub_882""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_882")"\n"
"\t"STUB_ASM_CODE("882")"\n"

".hidden ""shared_dispatch_stub_883""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_883")"\n"
"\t"STUB_ASM_CODE("883")"\n"

".hidden ""shared_dispatch_stub_884""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_884")"\n"
"\t"STUB_ASM_CODE("884")"\n"

".hidden ""shared_dispatch_stub_885""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_885")"\n"
"\t"STUB_ASM_CODE("885")"\n"

".hidden ""shared_dispatch_stub_886""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_886")"\n"
"\t"STUB_ASM_CODE("886")"\n"

".hidden ""shared_dispatch_stub_887""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_887")"\n"
"\t"STUB_ASM_CODE("887")"\n"

".hidden ""shared_dispatch_stub_888""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_888")"\n"
"\t"STUB_ASM_CODE("888")"\n"

".hidden ""shared_dispatch_stub_889""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_889")"\n"
"\t"STUB_ASM_CODE("889")"\n"

".hidden ""shared_dispatch_stub_890""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_890")"\n"
"\t"STUB_ASM_CODE("890")"\n"

".hidden ""shared_dispatch_stub_891""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_891")"\n"
"\t"STUB_ASM_CODE("891")"\n"

".hidden ""shared_dispatch_stub_892""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_892")"\n"
"\t"STUB_ASM_CODE("892")"\n"

".hidden ""shared_dispatch_stub_893""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_893")"\n"
"\t"STUB_ASM_CODE("893")"\n"

".hidden ""shared_dispatch_stub_894""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_894")"\n"
"\t"STUB_ASM_CODE("894")"\n"

".hidden ""shared_dispatch_stub_895""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_895")"\n"
"\t"STUB_ASM_CODE("895")"\n"

".hidden ""shared_dispatch_stub_896""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_896")"\n"
"\t"STUB_ASM_CODE("896")"\n"

".hidden ""shared_dispatch_stub_897""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_897")"\n"
"\t"STUB_ASM_CODE("897")"\n"

".hidden ""shared_dispatch_stub_898""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_898")"\n"
"\t"STUB_ASM_CODE("898")"\n"

".hidden ""shared_dispatch_stub_899""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_899")"\n"
"\t"STUB_ASM_CODE("899")"\n"

".hidden ""shared_dispatch_stub_900""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_900")"\n"
"\t"STUB_ASM_CODE("900")"\n"

".hidden ""shared_dispatch_stub_901""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_901")"\n"
"\t"STUB_ASM_CODE("901")"\n"

".hidden ""shared_dispatch_stub_902""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_902")"\n"
"\t"STUB_ASM_CODE("902")"\n"

".hidden ""shared_dispatch_stub_903""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_903")"\n"
"\t"STUB_ASM_CODE("903")"\n"

".hidden ""shared_dispatch_stub_904""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_904")"\n"
"\t"STUB_ASM_CODE("904")"\n"

".hidden ""shared_dispatch_stub_905""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_905")"\n"
"\t"STUB_ASM_CODE("905")"\n"

".hidden ""shared_dispatch_stub_906""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_906")"\n"
"\t"STUB_ASM_CODE("906")"\n"

".hidden ""shared_dispatch_stub_907""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_907")"\n"
"\t"STUB_ASM_CODE("907")"\n"

".hidden ""shared_dispatch_stub_908""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_908")"\n"
"\t"STUB_ASM_CODE("908")"\n"

".hidden ""shared_dispatch_stub_909""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_909")"\n"
"\t"STUB_ASM_CODE("909")"\n"

".hidden ""shared_dispatch_stub_910""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_910")"\n"
"\t"STUB_ASM_CODE("910")"\n"

".hidden ""shared_dispatch_stub_911""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_911")"\n"
"\t"STUB_ASM_CODE("911")"\n"

".hidden ""shared_dispatch_stub_912""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_912")"\n"
"\t"STUB_ASM_CODE("912")"\n"

".hidden ""shared_dispatch_stub_913""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_913")"\n"
"\t"STUB_ASM_CODE("913")"\n"

".hidden ""shared_dispatch_stub_914""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_914")"\n"
"\t"STUB_ASM_CODE("914")"\n"

".hidden ""shared_dispatch_stub_915""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_915")"\n"
"\t"STUB_ASM_CODE("915")"\n"

".hidden ""shared_dispatch_stub_916""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_916")"\n"
"\t"STUB_ASM_CODE("916")"\n"

".hidden ""shared_dispatch_stub_917""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_917")"\n"
"\t"STUB_ASM_CODE("917")"\n"

".hidden ""shared_dispatch_stub_918""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_918")"\n"
"\t"STUB_ASM_CODE("918")"\n"

".hidden ""shared_dispatch_stub_919""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_919")"\n"
"\t"STUB_ASM_CODE("919")"\n"

".hidden ""shared_dispatch_stub_920""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_920")"\n"
"\t"STUB_ASM_CODE("920")"\n"

".hidden ""shared_dispatch_stub_921""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_921")"\n"
"\t"STUB_ASM_CODE("921")"\n"

".hidden ""shared_dispatch_stub_922""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_922")"\n"
"\t"STUB_ASM_CODE("922")"\n"

".hidden ""shared_dispatch_stub_923""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_923")"\n"
"\t"STUB_ASM_CODE("923")"\n"

".hidden ""shared_dispatch_stub_924""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_924")"\n"
"\t"STUB_ASM_CODE("924")"\n"

".hidden ""shared_dispatch_stub_925""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_925")"\n"
"\t"STUB_ASM_CODE("925")"\n"

".hidden ""shared_dispatch_stub_926""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_926")"\n"
"\t"STUB_ASM_CODE("926")"\n"

".hidden ""shared_dispatch_stub_927""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_927")"\n"
"\t"STUB_ASM_CODE("927")"\n"

".hidden ""shared_dispatch_stub_928""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_928")"\n"
"\t"STUB_ASM_CODE("928")"\n"

".hidden ""shared_dispatch_stub_929""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_929")"\n"
"\t"STUB_ASM_CODE("929")"\n"

".hidden ""shared_dispatch_stub_930""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_930")"\n"
"\t"STUB_ASM_CODE("930")"\n"

".hidden ""shared_dispatch_stub_931""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_931")"\n"
"\t"STUB_ASM_CODE("931")"\n"

".hidden ""shared_dispatch_stub_932""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_932")"\n"
"\t"STUB_ASM_CODE("932")"\n"

".hidden ""shared_dispatch_stub_933""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_933")"\n"
"\t"STUB_ASM_CODE("933")"\n"

".hidden ""shared_dispatch_stub_934""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_934")"\n"
"\t"STUB_ASM_CODE("934")"\n"

".hidden ""shared_dispatch_stub_935""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_935")"\n"
"\t"STUB_ASM_CODE("935")"\n"

".hidden ""shared_dispatch_stub_936""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_936")"\n"
"\t"STUB_ASM_CODE("936")"\n"

".hidden ""shared_dispatch_stub_937""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_937")"\n"
"\t"STUB_ASM_CODE("937")"\n"

".hidden ""shared_dispatch_stub_938""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_938")"\n"
"\t"STUB_ASM_CODE("938")"\n"

".hidden ""shared_dispatch_stub_939""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_939")"\n"
"\t"STUB_ASM_CODE("939")"\n"

".hidden ""shared_dispatch_stub_940""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_940")"\n"
"\t"STUB_ASM_CODE("940")"\n"

".hidden ""shared_dispatch_stub_941""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_941")"\n"
"\t"STUB_ASM_CODE("941")"\n"

".hidden ""shared_dispatch_stub_942""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_942")"\n"
"\t"STUB_ASM_CODE("942")"\n"

".hidden ""shared_dispatch_stub_943""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_943")"\n"
"\t"STUB_ASM_CODE("943")"\n"

".hidden ""shared_dispatch_stub_944""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_944")"\n"
"\t"STUB_ASM_CODE("944")"\n"

".hidden ""shared_dispatch_stub_945""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_945")"\n"
"\t"STUB_ASM_CODE("945")"\n"

".hidden ""shared_dispatch_stub_946""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_946")"\n"
"\t"STUB_ASM_CODE("946")"\n"

".hidden ""shared_dispatch_stub_947""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_947")"\n"
"\t"STUB_ASM_CODE("947")"\n"

".hidden ""shared_dispatch_stub_948""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_948")"\n"
"\t"STUB_ASM_CODE("948")"\n"

".hidden ""shared_dispatch_stub_949""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_949")"\n"
"\t"STUB_ASM_CODE("949")"\n"

".hidden ""shared_dispatch_stub_950""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_950")"\n"
"\t"STUB_ASM_CODE("950")"\n"

".hidden ""shared_dispatch_stub_951""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_951")"\n"
"\t"STUB_ASM_CODE("951")"\n"

".hidden ""shared_dispatch_stub_952""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_952")"\n"
"\t"STUB_ASM_CODE("952")"\n"

".hidden ""shared_dispatch_stub_953""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_953")"\n"
"\t"STUB_ASM_CODE("953")"\n"

".hidden ""shared_dispatch_stub_954""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_954")"\n"
"\t"STUB_ASM_CODE("954")"\n"

".hidden ""shared_dispatch_stub_955""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_955")"\n"
"\t"STUB_ASM_CODE("955")"\n"

".hidden ""shared_dispatch_stub_956""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_956")"\n"
"\t"STUB_ASM_CODE("956")"\n"

".hidden ""shared_dispatch_stub_957""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_957")"\n"
"\t"STUB_ASM_CODE("957")"\n"

".hidden ""shared_dispatch_stub_958""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_958")"\n"
"\t"STUB_ASM_CODE("958")"\n"

".hidden ""shared_dispatch_stub_959""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_959")"\n"
"\t"STUB_ASM_CODE("959")"\n"

".hidden ""shared_dispatch_stub_960""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_960")"\n"
"\t"STUB_ASM_CODE("960")"\n"

".hidden ""shared_dispatch_stub_961""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_961")"\n"
"\t"STUB_ASM_CODE("961")"\n"

".hidden ""shared_dispatch_stub_962""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_962")"\n"
"\t"STUB_ASM_CODE("962")"\n"

".hidden ""shared_dispatch_stub_963""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_963")"\n"
"\t"STUB_ASM_CODE("963")"\n"

".hidden ""shared_dispatch_stub_964""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_964")"\n"
"\t"STUB_ASM_CODE("964")"\n"

".hidden ""shared_dispatch_stub_965""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_965")"\n"
"\t"STUB_ASM_CODE("965")"\n"

".hidden ""shared_dispatch_stub_966""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_966")"\n"
"\t"STUB_ASM_CODE("966")"\n"

".hidden ""shared_dispatch_stub_967""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_967")"\n"
"\t"STUB_ASM_CODE("967")"\n"

".hidden ""shared_dispatch_stub_968""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_968")"\n"
"\t"STUB_ASM_CODE("968")"\n"

".hidden ""shared_dispatch_stub_969""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_969")"\n"
"\t"STUB_ASM_CODE("969")"\n"

".hidden ""shared_dispatch_stub_970""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_970")"\n"
"\t"STUB_ASM_CODE("970")"\n"

".hidden ""shared_dispatch_stub_971""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_971")"\n"
"\t"STUB_ASM_CODE("971")"\n"

".hidden ""shared_dispatch_stub_972""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_972")"\n"
"\t"STUB_ASM_CODE("972")"\n"

".hidden ""shared_dispatch_stub_973""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_973")"\n"
"\t"STUB_ASM_CODE("973")"\n"

".hidden ""shared_dispatch_stub_974""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_974")"\n"
"\t"STUB_ASM_CODE("974")"\n"

".hidden ""shared_dispatch_stub_975""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_975")"\n"
"\t"STUB_ASM_CODE("975")"\n"

".hidden ""shared_dispatch_stub_976""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_976")"\n"
"\t"STUB_ASM_CODE("976")"\n"

".hidden ""shared_dispatch_stub_977""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_977")"\n"
"\t"STUB_ASM_CODE("977")"\n"

".hidden ""shared_dispatch_stub_978""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_978")"\n"
"\t"STUB_ASM_CODE("978")"\n"

".hidden ""shared_dispatch_stub_979""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_979")"\n"
"\t"STUB_ASM_CODE("979")"\n"

".hidden ""shared_dispatch_stub_980""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_980")"\n"
"\t"STUB_ASM_CODE("980")"\n"

".hidden ""shared_dispatch_stub_981""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_981")"\n"
"\t"STUB_ASM_CODE("981")"\n"

".hidden ""shared_dispatch_stub_982""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_982")"\n"
"\t"STUB_ASM_CODE("982")"\n"

".hidden ""shared_dispatch_stub_983""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_983")"\n"
"\t"STUB_ASM_CODE("983")"\n"

".hidden ""shared_dispatch_stub_984""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_984")"\n"
"\t"STUB_ASM_CODE("984")"\n"

".hidden ""shared_dispatch_stub_985""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_985")"\n"
"\t"STUB_ASM_CODE("985")"\n"

".hidden ""shared_dispatch_stub_986""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_986")"\n"
"\t"STUB_ASM_CODE("986")"\n"

".hidden ""shared_dispatch_stub_987""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_987")"\n"
"\t"STUB_ASM_CODE("987")"\n"

".hidden ""shared_dispatch_stub_988""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_988")"\n"
"\t"STUB_ASM_CODE("988")"\n"

".hidden ""shared_dispatch_stub_989""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_989")"\n"
"\t"STUB_ASM_CODE("989")"\n"

".hidden ""shared_dispatch_stub_990""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_990")"\n"
"\t"STUB_ASM_CODE("990")"\n"

".hidden ""shared_dispatch_stub_991""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_991")"\n"
"\t"STUB_ASM_CODE("991")"\n"

".hidden ""shared_dispatch_stub_992""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_992")"\n"
"\t"STUB_ASM_CODE("992")"\n"

".hidden ""shared_dispatch_stub_993""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_993")"\n"
"\t"STUB_ASM_CODE("993")"\n"

".hidden ""shared_dispatch_stub_994""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_994")"\n"
"\t"STUB_ASM_CODE("994")"\n"

".hidden ""shared_dispatch_stub_995""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_995")"\n"
"\t"STUB_ASM_CODE("995")"\n"

".hidden ""shared_dispatch_stub_996""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_996")"\n"
"\t"STUB_ASM_CODE("996")"\n"

".hidden ""shared_dispatch_stub_997""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_997")"\n"
"\t"STUB_ASM_CODE("997")"\n"

".hidden ""shared_dispatch_stub_998""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_998")"\n"
"\t"STUB_ASM_CODE("998")"\n"

".hidden ""shared_dispatch_stub_999""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_999")"\n"
"\t"STUB_ASM_CODE("999")"\n"

".hidden ""shared_dispatch_stub_1000""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1000")"\n"
"\t"STUB_ASM_CODE("1000")"\n"

".hidden ""shared_dispatch_stub_1001""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1001")"\n"
"\t"STUB_ASM_CODE("1001")"\n"

".hidden ""shared_dispatch_stub_1002""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1002")"\n"
"\t"STUB_ASM_CODE("1002")"\n"

".hidden ""shared_dispatch_stub_1003""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1003")"\n"
"\t"STUB_ASM_CODE("1003")"\n"

".hidden ""shared_dispatch_stub_1004""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1004")"\n"
"\t"STUB_ASM_CODE("1004")"\n"

".hidden ""shared_dispatch_stub_1005""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1005")"\n"
"\t"STUB_ASM_CODE("1005")"\n"

".hidden ""shared_dispatch_stub_1006""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1006")"\n"
"\t"STUB_ASM_CODE("1006")"\n"

".hidden ""shared_dispatch_stub_1007""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1007")"\n"
"\t"STUB_ASM_CODE("1007")"\n"

".hidden ""shared_dispatch_stub_1008""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1008")"\n"
"\t"STUB_ASM_CODE("1008")"\n"

".hidden ""shared_dispatch_stub_1009""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1009")"\n"
"\t"STUB_ASM_CODE("1009")"\n"

".hidden ""shared_dispatch_stub_1010""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1010")"\n"
"\t"STUB_ASM_CODE("1010")"\n"

".hidden ""shared_dispatch_stub_1011""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1011")"\n"
"\t"STUB_ASM_CODE("1011")"\n"

".hidden ""shared_dispatch_stub_1012""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1012")"\n"
"\t"STUB_ASM_CODE("1012")"\n"

".hidden ""shared_dispatch_stub_1013""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1013")"\n"
"\t"STUB_ASM_CODE("1013")"\n"

".hidden ""shared_dispatch_stub_1014""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1014")"\n"
"\t"STUB_ASM_CODE("1014")"\n"

".hidden ""shared_dispatch_stub_1015""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1015")"\n"
"\t"STUB_ASM_CODE("1015")"\n"

".hidden ""shared_dispatch_stub_1016""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1016")"\n"
"\t"STUB_ASM_CODE("1016")"\n"

".hidden ""shared_dispatch_stub_1017""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1017")"\n"
"\t"STUB_ASM_CODE("1017")"\n"

".hidden ""shared_dispatch_stub_1018""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1018")"\n"
"\t"STUB_ASM_CODE("1018")"\n"

".hidden ""shared_dispatch_stub_1019""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1019")"\n"
"\t"STUB_ASM_CODE("1019")"\n"

".hidden ""shared_dispatch_stub_1020""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1020")"\n"
"\t"STUB_ASM_CODE("1020")"\n"

".hidden ""shared_dispatch_stub_1021""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1021")"\n"
"\t"STUB_ASM_CODE("1021")"\n"

".hidden ""shared_dispatch_stub_1022""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1022")"\n"
"\t"STUB_ASM_CODE("1022")"\n"

".hidden ""shared_dispatch_stub_1023""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1023")"\n"
"\t"STUB_ASM_CODE("1023")"\n"

".hidden ""shared_dispatch_stub_1024""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1024")"\n"
"\t"STUB_ASM_CODE("1024")"\n"

".hidden ""shared_dispatch_stub_1025""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1025")"\n"
"\t"STUB_ASM_CODE("1025")"\n"

".hidden ""shared_dispatch_stub_1026""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1026")"\n"
"\t"STUB_ASM_CODE("1026")"\n"

".hidden ""shared_dispatch_stub_1027""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1027")"\n"
"\t"STUB_ASM_CODE("1027")"\n"

".hidden ""shared_dispatch_stub_1028""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1028")"\n"
"\t"STUB_ASM_CODE("1028")"\n"

".hidden ""shared_dispatch_stub_1029""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1029")"\n"
"\t"STUB_ASM_CODE("1029")"\n"

".hidden ""shared_dispatch_stub_1030""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1030")"\n"
"\t"STUB_ASM_CODE("1030")"\n"

".hidden ""shared_dispatch_stub_1031""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1031")"\n"
"\t"STUB_ASM_CODE("1031")"\n"

".hidden ""shared_dispatch_stub_1032""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1032")"\n"
"\t"STUB_ASM_CODE("1032")"\n"

".hidden ""shared_dispatch_stub_1033""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1033")"\n"
"\t"STUB_ASM_CODE("1033")"\n"

".hidden ""shared_dispatch_stub_1034""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1034")"\n"
"\t"STUB_ASM_CODE("1034")"\n"

".hidden ""shared_dispatch_stub_1035""\n"
STUB_ASM_ENTRY("shared_dispatch_stub_1035")"\n"
"\t"STUB_ASM_CODE("1035")"\n"

);
#undef MAPI_TMP_STUB_ASM_GCC
#endif /* MAPI_TMP_STUB_ASM_GCC */
