#line 2 "glsl_lexer.cpp"

#line 4 "glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_glsl_lexer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_glsl_lexer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_glsl_lexer_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_glsl_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_glsl_lexer__load_buffer_state (yyscan_t yyscanner );
static void _mesa_glsl_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_glsl_lexer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *_mesa_glsl_lexer_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_glsl_lexer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_glsl_lexer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_glsl_lexer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 265
#define YY_END_OF_BUFFER 266
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1043] =
    {   0,
        0,    0,   16,   16,    0,    0,  266,  264,    1,   22,
      264,  264,  264,  264,  264,  264,  263,  264,  178,  176,
      264,  264,  264,  262,  264,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  264,    1,  264,   21,   16,
       20,   21,   19,   17,   18,   14,   13,    1,  160,  169,
      161,  172,  166,  155,  168,  156,  175,  180,  167,  181,
      178,    0,    0,  178,    0,  176,  176,  164,  157,  159,
      158,  165,  262,  173,  163,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,   31,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,   35,  262,  262,   62,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  174,  162,    1,    0,    0,    2,    0,    0,    0,
        0,   16,   15,   19,   18,    0,  180,    0,    0,  179,
        0,  181,    0,    0,    0,  182,  177,  170,  171,  262,
      189,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,   34,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,   27,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,   63,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,    0,    0,    0,    0,   15,
        0,  180,  184,    0,  179,    0,    0,    0,  181,  185,
      182,    0,    0,  177,  262,  262,  262,   25,  262,  262,
      262,  247,  240,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,   33,  192,  262,  262,  262,  262,
       70,  262,  262,  197,  210,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  207,  243,   50,
       51,   52,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  195,  187,  262,
      262,   28,  262,  262,  262,  262,  262,  262,  262,   47,
       48,   49,  153,  262,  262,  262,    0,    0,    0,    0,
        0,  179,  183,  186,  262,  262,  262,   29,  262,   38,
       39,   40,  262,  190,  262,  262,   24,  262,  262,  262,

      221,  222,  223,  262,  218,  219,  220,  262,  188,  262,
      211,   26,  233,  234,  235,  245,  215,  216,  217,  262,
      262,  262,   64,  213,  262,  262,  262,   41,   42,   43,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,   73,  262,  262,  262,  262,  262,  262,  262,  262,
      208,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  191,  262,  262,  242,   44,   45,   46,  262,
      262,   32,  262,    0,    0,    0,    0,  250,  262,  262,
       66,  262,  262,  248,  262,  262,  262,  262,  262,  262,
      209,  204,  253,  262,  262,  262,  262,  262,  262,  200,

      262,  262,  262,  154,   53,   54,   55,   56,   57,   58,
       59,   60,   61,  262,  262,  262,  262,  214,  196,  262,
      262,  202,  262,  262,  262,   37,  262,  260,  239,   71,
      203,  152,  262,  251,  198,  262,  262,  262,  262,  262,
      262,  262,  262,  262,    0,    0,    0,    0,  262,  262,
      262,  262,  262,  199,   36,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  262,  262,  262,  262,  262,  262,
      109,  110,  111,  262,  262,  262,  262,  262,  244,  262,
      262,  262,  262,  108,  262,  262,  262,  262,  262,  262,
      262,  262,  193,  262,  262,  262,  262,  262,   65,  262,

      262,   67,  262,  262,    0,    0,    0,    0,    0,  262,
      262,   68,  146,   30,  205,  120,  121,  122,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  201,  262,  262,  262,  149,  259,  148,  262,
      262,  262,  262,  262,  262,  262,  262,  194,  131,  132,
      133,  262,  262,  212,  262,  147,  262,    0,    0,    6,
        0,    0,    0,   12,    3,  262,   23,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  118,  262,  262,  262,
      113,  206,   69,  262,  262,  262,  262,  262,  241,  262,
      249,  246,  254,   74,   75,   76,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  150,    0,    0,    0,    0,    0,    0,    0,  262,
      262,  262,  129,  262,  262,  124,  262,  262,  262,  262,
      262,  262,  262,  262,   85,   86,   87,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      261,  262,  262,  140,  262,  262,  135,   91,   92,   93,
      262,  262,    4,    0,    5,    0,    0,    0,    0,    0,
        0,  151,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  112,  262,  114,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,   97,  262,  262,  262,

      262,   77,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,    0,    0,    0,    0,  262,
      262,  262,  123,  125,  262,  115,  262,  116,  262,  262,
      262,  262,  262,   98,  262,  262,   88,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  134,  136,  262,  262,  262,   99,  262,  262,
       94,    0,    0,    0,  126,  127,  262,  262,  262,  142,
      262,  262,  143,  262,  262,  262,  262,  262,  262,  262,
       72,  262,  262,  262,  262,  236,  262,  237,  252,  262,
      262,  262,  137,  138,  262,  262,  262,  262,  262,  262,

      262,  262,    0,    0,    0,  262,  262,  262,  262,  119,
      117,  262,  262,  262,  255,  257,  262,   78,  262,   79,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  256,  258,  262,    0,    0,    0,    0,  130,  128,
      262,  262,   89,   90,  262,  262,  262,   80,  262,  262,
      262,   81,  262,  262,  262,  141,  139,   95,   96,  262,
      262,    0,    0,    0,    0,  262,  262,  262,  262,  262,
      262,  100,  262,  103,  262,  262,  262,  262,    0,    0,
        0,    0,  262,  262,  101,  104,  262,  262,  262,  262,
       82,  262,  102,  105,    0,    0,    0,    7,    0,    0,

      144,  145,  262,  262,  262,  262,  107,    0,    0,    8,
        0,    0,  262,  262,  238,  262,    0,    0,    0,   83,
       84,  262,    0,    0,    0,    9,  262,    0,    0,   10,
      106,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,    1,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   34,   34,   34,   35,   36,   34,   37,   34,
       34,   38,   39,   40,   41,   34,   34,   42,   34,   34,
        1,    1,    1,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   34,   61,   62,   63,   64,   65,   66,   67,
       68,   69,    1,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    3,    5,    5,    6,    5,    5,    5,    5,    5,
        5,    5,    1,    5,    4,    4,    4,    4,    4,    3,
        5,    5,    5,    5,    5,    6,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[1055] =
    {   0,
        0,   69,   75,  145, 1414, 1413, 1415, 1418,   70, 1418,
     1389, 1388,   94, 1387,   91,   92,   90, 1386,  202,  256,
       89, 1385,   95,    0,   79,   68,   64,  127,  125,   68,
      136, 1350,  132,  141,   82,   87,  128, 1344,  148,   84,
      182,  179,  149,  151,  152,  109,  136,  234, 1418,  135,
     1418, 1392,  236, 1418,    0, 1418, 1418,  228, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418,  305, 1418,  346,
      138,  297,  331, 1418,    0,    0, 1418, 1381, 1418, 1418,
     1418, 1380,    0, 1418, 1418, 1341, 1346,  166, 1343, 1352,
     1350, 1350, 1336, 1339, 1351,  207, 1345, 1332, 1348, 1328,

     1342, 1328, 1325, 1325, 1331,  182,  222, 1325, 1336, 1321,
     1327, 1331, 1332,    0, 1323, 1334,  226, 1333, 1328, 1308,
      184, 1312, 1326, 1316,  208, 1309,  232, 1322, 1324,  239,
     1303, 1311, 1308, 1297, 1306,  235,  246, 1311, 1306, 1309,
     1297, 1300,  205,  155,  255, 1310, 1297, 1310,  251, 1303,
     1302, 1418, 1418,  327,  354,  356, 1418, 1287, 1300, 1291,
     1302,  308,    0,  353,    0,  367, 1418, 1318, 1299,  359,
      410, 1418, 1316, 1297,  417,  408,  268, 1418, 1418, 1293,
        0, 1288, 1283, 1287, 1297, 1291, 1293,  343, 1276, 1276,
     1288, 1279,  272, 1290, 1287, 1270, 1286, 1284, 1281, 1272,

     1279, 1265, 1263, 1276, 1261, 1278,    0, 1275, 1262, 1270,
     1267, 1271, 1272, 1265, 1262, 1250, 1249, 1263, 1266, 1253,
     1262, 1249, 1256, 1246,  379, 1252, 1255, 1245, 1253, 1241,
     1245, 1236, 1251, 1250, 1240, 1247,  279, 1230, 1249, 1232,
     1230, 1241, 1230, 1225, 1223, 1225, 1236, 1221, 1223, 1220,
     1232, 1231, 1234, 1215,  280, 1224, 1219, 1217, 1227, 1205,
      426, 1224, 1226, 1214, 1206, 1205, 1209, 1221, 1204,    0,
      431,  422, 1418,  449, 1418, 1232, 1213,  463,  441, 1418,
     1418, 1230, 1211, 1418, 1195, 1206, 1205,    0, 1202, 1207,
      468,    0,    0, 1194, 1192, 1192, 1193, 1188, 1197, 1185,

     1203,  474, 1191,  480,    0,    0, 1185, 1196, 1195, 1195,
        0, 1179,  483,    0,    0, 1181,  486, 1189, 1190, 1180,
     1174, 1173, 1174, 1173, 1173,  489, 1168,    0,    0, 1164,
     1163, 1162, 1164, 1165, 1170, 1164, 1160, 1174, 1169, 1169,
     1167, 1166, 1159, 1153, 1155, 1154, 1157, 1157, 1149, 1152,
     1147, 1156, 1161, 1148, 1145, 1158, 1148,    0,    0, 1155,
     1151,    0, 1142, 1142, 1148, 1138, 1146,  492, 1143,    0,
        0,    0,    0, 1132, 1145, 1144, 1143, 1142, 1139, 1127,
      497,  488, 1418, 1418, 1139, 1140, 1140,    0, 1124,    0,
        0,    0, 1125,    0, 1134, 1124,    0, 1123, 1124, 1118,

     1111, 1110, 1109, 1126,    0,    0,    0, 1116,    0, 1112,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1123,
      507, 1122,    0,    0, 1120, 1116, 1112,    0,    0,    0,
     1104,  509,  512,  521, 1109, 1105, 1111, 1101, 1099, 1113,
     1097,    0, 1097, 1111, 1099, 1095, 1102, 1096, 1108, 1103,
        0, 1101, 1098, 1102, 1085, 1083, 1086, 1093, 1099, 1094,
     1093, 1080,    0, 1082, 1083,    0,    0,    0,    0, 1080,
     1084,    0, 1077, 1077, 1132, 1076, 1079,    0, 1087, 1066,
        0, 1076, 1070,    0, 1063, 1063, 1077,  527,  530,  533,
        0, 1079,    0,  537, 1093, 1092, 1091, 1056, 1055,    0,

     1073, 1072, 1067,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1055, 1069, 1055, 1052,    0,    0, 1058,
      292,    0, 1054, 1062, 1061,    0, 1053, 1045,    0,    0,
        0,    0, 1042,    0,    0, 1041, 1053,  540, 1045, 1052,
     1051, 1048, 1042, 1039, 1034,  558, 1050, 1035, 1029, 1029,
     1043, 1027, 1040,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1032, 1057, 1056, 1055, 1020, 1019,
      374,  534,    0, 1032, 1035, 1033, 1021, 1017,    0, 1030,
     1027, 1026, 1015,    0, 1014, 1004, 1022, 1007, 1010,  564,
     1015, 1018,    0, 1036, 1035, 1034,  999,  998,    0, 1013,

      999,    0, 1010, 1002, 1004,  582,  588, 1054,  997, 1001,
     1004,    0,    0,    0,    0, 1025,  584,    0, 1001, 1004,
      988,  996,  986, 1007,  996,  992,  993,  993,  992,  977,
      597,  990,    0,  991,  979,  978,    0,    0,    0,  974,
     1004, 1003, 1002,  967,  966,  962,  970,    0, 1000,  585,
        0,  976,  979,    0,  600,    0,  956,  964,  634, 1418,
      641,    0,  661,  628, 1418,  964,    0,  960,  959,  980,
      969,  967,  967,  954,  969,  952,  985,  964,  965,  960,
      981,    0,    0,  977,  976,  975,  940,  939,    0,  939,
        0,    0,    0,  436,  657,  963,  950,  953,  935,  948,

      935,  934,  955,  944,  942,  942,  960,  959,  958,  923,
      922,    0,  927,  683,  689,  415,  944,  934,  922,  918,
      919,  918,  951,  930,  927,  948,  929,  925,  927,  910,
      907,  921,  907,  906,  939,  604,    0,  915,  918,  910,
      901,  909,  899,  920,  909,  900,  902,  898,  898,  895,
        0,  882,  879,  912,  886,  858,  879,  878,  685,    0,
      854,  857, 1418,  422, 1418,  711,    0,  717,  872,  855,
      837,    0,  854,  852,  835,  832,  833,  832,  824,  832,
      822,  828,    0,  829,    0,  826,  824,  823,  844,  833,
      829,  829,  812,  815,  830,  813,   46,   97,  130,  179,

      192,  450,  199,  226,  243,  237,  240,  299,  315,  321,
      332,  361,  355,  357,  362,  439,  387,  391,  403,  391,
      392,  413,    0,    0,  429,  456,  430,  482,  477,  467,
      489,  476,  481,  516,  515,  514,  537,  518,  526,  538,
      542,  527,  526,  546,  533,  536,  552,  575,  574,  565,
      566,  574,    0,    0,  577,  578,  580,  618,  599,  598,
      621,  630,  615,  611,    0,    0,  624,  625,  619,    0,
      620,  605,    0,  606,  630,  643,  628,  627,  633,  636,
        0,  630,  656,  648,  656,  679,  663,    0,    0,  663,
      681,  695,    0,    0,  696,  697,  698,  699,  684,  683,

      686,  687,  747,  749,  699,  685,  686,  710,  711,    0,
        0,  689,  691,  699,    0,    0,  700,  723,  697,  725,
      720,  714,  701,  723,  721,  714,  703,  704,  705,  706,
      714,    0,    0,  715,  775,  776,  777,  711,    0,    0,
      733,  734,    0,    0,  738,  739,  734,    0,  735,  720,
      744,    0,  722,  732,  755,    0,    0,    0,    0,  748,
      749,  737,  794,  747,  749,  740,  741,  733,  734,  758,
      759,    0,  758,  768,  742,  778,  742,  743,  747,  763,
      812,  814,  749,  751,    0,    0,  770,  771,  761,  769,
        0,  785,    0,    0,  780,  824,  825, 1418,  828,  827,

        0,    0,  772,  773,  767,  793,    0,  778,  838, 1418,
      839,  792,  777,  778,    0,  797,  793,  797,  847,    0,
        0,  792,  807,  852,  853, 1418,  790,  800,  857, 1418,
        0,  797,  859,  862,  863,  864,  813,  814,  870,  871,
     1418, 1418,  909,  915,  919,  923,  927,  931,  935,  939,
      943,  947,  951,  953
    } ;

static yyconst flex_int16_t yy_def[1055] =
    {   0,
     1042,    1, 1043, 1043, 1044, 1044, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1045, 1042, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1046, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
       19, 1042, 1042, 1042, 1047,   20, 1042, 1042, 1042, 1042,
     1042, 1042, 1045, 1042, 1042, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1048, 1042, 1046, 1042, 1042, 1042, 1042,   70,
     1042, 1042, 1042, 1042, 1042, 1049, 1047, 1042, 1042, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 1048,
     1042, 1050, 1042, 1042, 1042, 1042, 1042, 1042, 1051, 1042,
     1042, 1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042,
     1042, 1052, 1042, 1042, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1042, 1042, 1042, 1042, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 1042, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1042, 1042, 1042,
     1042, 1053, 1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1042, 1042, 1042, 1053, 1042, 1042, 1042, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1042, 1042, 1042, 1042, 1054, 1042, 1042, 1042,
     1042, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1054, 1042, 1042, 1042, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1045, 1045, 1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1042, 1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1042, 1042,
     1042, 1042, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 1042, 1042,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1042, 1042, 1042,
     1042, 1042, 1045, 1045, 1045, 1045, 1042, 1042, 1042, 1045,
     1045, 1045, 1042, 1042, 1042, 1042, 1045, 1042, 1042, 1042,
     1045, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042,    0, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042
    } ;

static yyconst flex_int16_t yy_nxt[1489] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,    8,   21,   22,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   24,   24,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   24,   24,   24,   46,
       47,   58,  842,   58,   48,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,

       49,   61,   64,   84,   66,   68,   68,   68,   68,   68,
       68,   68,   78,   79,   86,   65,   67,   49,   62,   81,
       82,   85,   89,  102,   90,  103,  120,   91,   92,   87,
       88,  122,  130,  152,  104,  123,  162,  154,  162,   58,
      121,  155,  131,  843,   49,   49,   50,   51,   50,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   52,
       49,   53,   53,   53,   53,   53,   53,   54,   49,   49,
       49,   93,  124,   97,  844,   94,  111,   98,  153, 1042,
      105,   99,   95,  100,  112,   96,  125,   49,  106,  101,
      114,  107,  127,  115,  108,  147,  113,  116,  117,  148,

      109,  143,  118,  150, 1042,  119,  144,  255,  128,  149,
      145,  129,  151,  146,   49,   70,  256,   71,   71,   71,
       71,   71,   71,   72,  182,  845,  132,  139,  183,   58,
      140,   58,   73,  133,  134,  156,  157,  203,  135,  141,
      846,  223,   74,   75,  136,  137,  142,  138,  204,  224,
       73,  164,  164,  164,  164,  164,  164,  164,  191,  849,
      228,  253,  254,  192,  193,   74,  205,  229,   75,   70,
      850,   76,   76,   76,   76,   76,   76,   76,  231,  244,
      206,  215,  158,  236,  216,  217,   73,  851,  218,  159,
      219,  246,  232,  160,  233,  245,   77,  852,  161,  257,

      237,  238,  853,  262,   73,  247,  263,  258,  284,  162,
       70,  162,   72,   72,   72,   72,   72,   72,   72,   77,
       68,   68,   68,   68,   68,   68,   68,   73,  154,  363,
       58,  284,  155,  298,  299,  166,  167,  344,  364,  168,
      584,  345,  175,  175,  585,   73,  176,  176,  176,  176,
      176,  176,  176,  166,  167,  156,  157,  156,  157,  854,
      169,  170,  170,  170,  170,  170,  170,  170,  164,  164,
      164,  164,  164,  164,  164,  855,  171,  172,  271,  271,
      173,  856,  272,  272,  272,  272,  272,  272,  272,  274,
      275,  292,  857,  276,  171,  172,  330,  331,  332,  858,

      621,  174,  158,  859,  158,  293,  860,  274,  275,  159,
      861,  159,  622,  160,  277,  160,  659,  660,  161,  862,
      161,  278,  278,  764,  765,  279,  279,  279,  279,  279,
      279,  279,  176,  176,  176,  176,  176,  176,  176,  281,
      764,  765,  282,  370,  371,  372,  272,  272,  272,  272,
      272,  272,  272,  167,  863,  864,  168,  281,  865,  866,
      381,  381,  741,  283,  382,  382,  382,  382,  382,  382,
      382,  167,  172,  867,  742,  173,  847,  169,  279,  279,
      279,  279,  279,  279,  279,  390,  391,  392,  848,  868,
      172,  401,  402,  403,  869,  870,  174,  405,  406,  407,

      413,  414,  415,  417,  418,  419,  428,  429,  430,  467,
      468,  469,  382,  382,  382,  382,  382,  382,  382,  275,
      871,  872,  276,  495,  496,  497,  505,  506,  507,  508,
      509,  510,  873,  874,  498,  499,  875,  275,  511,  512,
      513,  876,  877,  277,  556,  557,  558,  559,  560,  561,
      562,  563,  564,  566,  567,  568,  594,  595,  596,  546,
      623,  878,  879,  880,  569,  570,  881,  597,  598,  624,
      882,  625,  626,  606,  607,  607,  607,  607,  607,  607,
      641,  642,  643,  659,  660,  883,  884,  885,  886,  659,
      660,  644,  645,  887,  646,  888,  889,  661,  661,  661,

      661,  661,  661,  663,  663,  663,  663,  663,  663,  663,
      669,  702,  890,  684,  685,  686,  707,  708,  709,  670,
      703,  671,  704,  662,  687,  688,  891,  710,  711,  664,
      788,  892,  893,  894,  895,  659,  660,  896,  897,  789,
      898,  790,  659,  660,  899,  900,  901,  902,  662,  714,
      715,  715,  715,  715,  715,  715,  661,  661,  661,  661,
      661,  661,  659,  660,  903,  904,  717,  905,  906,  907,
      908,  909,  910,  911,  912,  718,  663,  663,  663,  663,
      663,  663,  663,  743,  764,  765,  719,  913,  914,  915,
      764,  765,  744,  916,  745,  746,  917,  918,  766,  766,

      766,  766,  766,  766,  768,  768,  768,  768,  768,  768,
      768,  811,  764,  765,  919,  920,  921,  922,  764,  765,
      812,  923,  813,  924,  767,  925,  766,  766,  766,  766,
      766,  766,  768,  768,  768,  768,  768,  768,  768,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  767,
      936,  938,  939,  940,  941,  942,  943,  937,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  960,  961,  935,  936,  963,  965,
      966,  967,  968,  969,  937,  970,  971,  972,  973,  974,
      975,  976,  977,  978,  979,  963,  980,  982,  983,  984,

      985,  986,  987,  988,  981,  989,  990,  991,  992,  993,
      994,  995,  996,  997, 1001,  999, 1002, 1003, 1004, 1005,
     1006,  998, 1000, 1007, 1008, 1009,  997,  962, 1011,  999,
     1013, 1014, 1015, 1010,  998,  964, 1000, 1016, 1017, 1009,
     1011, 1018, 1020, 1021, 1022, 1023, 1024, 1010, 1025, 1019,
     1027, 1028,  964, 1029, 1025, 1031, 1026, 1032, 1029, 1033,
     1034, 1030, 1026, 1034, 1036, 1036, 1030, 1035, 1038, 1039,
     1035, 1040, 1040,  841,  840,  839,  838,  837,  836, 1041,
     1041,  835,  834,  833,  832, 1012,  831,  830,  829,  828,
      827,  826,  825,  824,  823,  822,  821, 1012,  820,  819,

      818,  817,  815,  814,  810,  809,  808, 1037, 1037,   55,
       55,   55,   55,   55,   55,   56,   56,   56,   56,   56,
       56,   83,   83,   83,   83,  165,  165,  165,  165,  177,
      177,  270,  807,  270,  270,  270,  270,  176,  806,  805,
      176,  272,  804,  803,  272,  279,  802,  801,  279,  382,
      800,  799,  382,  716,  716,  816,  816,  798,  797,  796,
      795,  794,  793,  792,  791,  787,  786,  785,  784,  783,
      782,  781,  780,  779,  778,  777,  776,  775,  774,  773,
      772,  771,  770,  769,  763,  762,  761,  760,  759,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,

      747,  740,  739,  738,  737,  736,  735,  734,  733,  732,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  722,
      721,  720,  713,  712,  706,  705,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  683,
      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      672,  668,  667,  666,  665,  664,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  640,  639,
      638,  637,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  608,  605,  604,  603,  602,  601,

      600,  599,  593,  592,  591,  590,  589,  588,  587,  586,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  565,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  504,  503,  502,  501,
      500,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  466,  465,  464,  463,

      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  427,  426,  425,  424,  423,  422,  421,  420,
      416,  412,  411,  410,  409,  408,  404,  400,  399,  398,
      397,  396,  395,  394,  393,  389,  388,  387,  386,  385,
      384,  384,  383,  383,  380,  379,  378,  377,  376,  375,
      374,  373,  369,  368,  367,  366,  365,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  343,  342,  341,  340,  339,  338,

      337,  336,  335,  334,  333,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  297,  296,  295,  294,  291,
      290,  289,  288,  287,  286,  285,  280,  280,  273,  273,
      269,  268,  267,  266,  265,  264,  261,  260,  259,  252,
      251,  250,  249,  248,  243,  242,  241,  240,  239,  235,
      234,  230,  227,  226,  225,  222,  221,  220,  214,  213,
      212,  211,  210,  209,  208,  207,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  190,  189,  188,  187,  186,

      185,  184,  181,  180,  179,  178,  163,  126,  110,   80,
       69,   63,   60,   59, 1042,   57,   57,    7, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042
    } ;

static yyconst flex_int16_t yy_chk[1489] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    9,  797,    9,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,   13,   15,   25,   16,   17,   17,   17,   17,   17,
       17,   17,   21,   21,   26,   15,   16,    3,   13,   23,
       23,   25,   27,   30,   27,   30,   35,   27,   27,   26,
       26,   36,   40,   46,   30,   36,   50,   47,   50,   47,
       35,   47,   40,  798,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   28,   37,   29,  799,   28,   33,   29,   46,   71,
       31,   29,   28,   29,   33,   28,   37,    4,   31,   29,
       34,   31,   39,   34,   31,   44,   33,   34,   34,   44,

       31,   43,   34,   45,   71,   34,   43,  144,   39,   44,
       43,   39,   45,   43,    4,   19,  144,   19,   19,   19,
       19,   19,   19,   19,   88,  800,   41,   42,   88,   58,
       42,   58,   19,   41,   41,   48,   48,  106,   41,   42,
      801,  121,   19,   19,   41,   41,   42,   41,  106,  121,
       19,   53,   53,   53,   53,   53,   53,   53,   96,  803,
      125,  143,  143,   96,   96,   19,  107,  125,   19,   20,
      804,   20,   20,   20,   20,   20,   20,   20,  127,  136,
      107,  117,   48,  130,  117,  117,   20,  805,  117,   48,
      117,  137,  127,   48,  127,  136,   20,  806,   48,  145,

      130,  130,  807,  149,   20,  137,  149,  145,  177,  162,
       72,  162,   72,   72,   72,   72,   72,   72,   72,   20,
       68,   68,   68,   68,   68,   68,   68,   72,  154,  255,
      154,  177,  154,  193,  193,   68,   68,  237,  255,   68,
      521,  237,   73,   73,  521,   72,   73,   73,   73,   73,
       73,   73,   73,   68,   68,  155,  155,  156,  156,  808,
       68,   70,   70,   70,   70,   70,   70,   70,  164,  164,
      164,  164,  164,  164,  164,  809,   70,   70,  166,  166,
       70,  810,  166,  166,  166,  166,  166,  166,  166,  170,
      170,  188,  811,  170,   70,   70,  225,  225,  225,  812,

      571,   70,  155,  813,  156,  188,  814,  170,  170,  155,
      815,  156,  571,  155,  170,  156,  716,  716,  155,  817,
      156,  171,  171,  764,  764,  171,  171,  171,  171,  171,
      171,  171,  175,  175,  175,  175,  175,  175,  175,  176,
      816,  816,  176,  261,  261,  261,  271,  271,  271,  271,
      271,  271,  271,  272,  818,  819,  272,  176,  820,  821,
      274,  274,  694,  176,  274,  274,  274,  274,  274,  274,
      274,  272,  279,  822,  694,  279,  802,  272,  278,  278,
      278,  278,  278,  278,  278,  291,  291,  291,  802,  825,
      279,  302,  302,  302,  826,  827,  279,  304,  304,  304,

      313,  313,  313,  317,  317,  317,  326,  326,  326,  368,
      368,  368,  381,  381,  381,  381,  381,  381,  381,  382,
      828,  829,  382,  421,  421,  421,  432,  432,  432,  433,
      433,  433,  830,  831,  421,  421,  832,  382,  434,  434,
      434,  833,  834,  382,  488,  488,  488,  489,  489,  489,
      490,  490,  490,  494,  494,  494,  538,  538,  538,  546,
      572,  835,  836,  837,  494,  494,  838,  538,  538,  572,
      839,  572,  572,  546,  546,  546,  546,  546,  546,  546,
      590,  590,  590,  606,  606,  840,  841,  842,  843,  607,
      607,  590,  590,  844,  590,  845,  846,  606,  606,  606,

      606,  606,  606,  607,  607,  607,  607,  607,  607,  607,
      617,  650,  847,  631,  631,  631,  655,  655,  655,  617,
      650,  617,  650,  606,  631,  631,  848,  655,  655,  664,
      736,  849,  850,  851,  852,  659,  659,  855,  856,  736,
      857,  736,  661,  661,  858,  859,  860,  861,  606,  659,
      659,  659,  659,  659,  659,  659,  661,  661,  661,  661,
      661,  661,  663,  663,  862,  863,  664,  864,  867,  868,
      869,  871,  872,  874,  875,  664,  663,  663,  663,  663,
      663,  663,  663,  695,  714,  714,  664,  876,  877,  878,
      715,  715,  695,  879,  695,  695,  880,  882,  714,  714,

      714,  714,  714,  714,  715,  715,  715,  715,  715,  715,
      715,  759,  766,  766,  883,  884,  885,  886,  768,  768,
      759,  887,  759,  890,  714,  891,  766,  766,  766,  766,
      766,  766,  768,  768,  768,  768,  768,  768,  768,  892,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  714,
      904,  905,  906,  907,  908,  909,  912,  904,  913,  914,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  934,  935,  936,  937,  938,
      941,  942,  945,  946,  936,  947,  949,  950,  951,  953,
      954,  955,  960,  961,  962,  963,  964,  965,  966,  967,

      968,  969,  970,  971,  964,  973,  974,  975,  976,  977,
      978,  979,  980,  981,  983,  982,  984,  987,  988,  989,
      990,  981,  982,  992,  995,  996,  997,  935, 1000,  999,
     1003, 1004, 1005,  996,  997,  937,  999, 1006, 1008, 1009,
     1011, 1012, 1013, 1014, 1016, 1017, 1018, 1009, 1019, 1012,
     1022, 1023,  963, 1024, 1025, 1027, 1019, 1028, 1029, 1032,
     1033, 1024, 1025, 1034, 1035, 1036, 1029, 1033, 1037, 1038,
     1034, 1039, 1040,  796,  795,  794,  793,  792,  791, 1039,
     1040,  790,  789,  788,  787, 1000,  786,  784,  782,  781,
      780,  779,  778,  777,  776,  775,  774, 1011,  773,  771,

      770,  769,  762,  761,  758,  757,  756, 1035, 1036, 1043,
     1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044,
     1044, 1045, 1045, 1045, 1045, 1046, 1046, 1046, 1046, 1047,
     1047, 1048,  755, 1048, 1048, 1048, 1048, 1049,  754,  753,
     1049, 1050,  752,  750, 1050, 1051,  749,  748, 1051, 1052,
      747,  746, 1052, 1053, 1053, 1054, 1054,  745,  744,  743,
      742,  741,  740,  739,  738,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  713,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  699,  698,  697,

      696,  690,  688,  687,  686,  685,  684,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  666,  658,  657,  653,  652,  649,  647,  646,  645,
      644,  643,  642,  641,  640,  636,  635,  634,  632,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  616,  611,  610,  609,  608,  605,  604,  603,  601,
      600,  598,  597,  596,  595,  594,  592,  591,  589,  588,
      587,  586,  585,  583,  582,  581,  580,  578,  577,  576,
      575,  574,  570,  569,  568,  567,  566,  565,  553,  552,
      551,  550,  549,  548,  547,  545,  544,  543,  542,  541,

      540,  539,  537,  536,  533,  528,  527,  525,  524,  523,
      520,  517,  516,  515,  514,  503,  502,  501,  499,  498,
      497,  496,  495,  492,  487,  486,  485,  483,  482,  480,
      479,  477,  476,  475,  474,  473,  471,  470,  465,  464,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  450,  449,  448,  447,  446,  445,  444,  443,  441,
      440,  439,  438,  437,  436,  435,  431,  427,  426,  425,
      422,  420,  410,  408,  404,  403,  402,  401,  400,  399,
      398,  396,  395,  393,  389,  387,  386,  385,  380,  379,
      378,  377,  376,  375,  374,  369,  367,  366,  365,  364,

      363,  361,  360,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  327,  325,  324,  323,  322,  321,  320,  319,  318,
      316,  312,  310,  309,  308,  307,  303,  301,  300,  299,
      298,  297,  296,  295,  294,  290,  289,  287,  286,  285,
      283,  282,  277,  276,  269,  268,  267,  266,  265,  264,
      263,  262,  260,  259,  258,  257,  256,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  236,  235,  234,  233,  232,  231,

      230,  229,  228,  227,  226,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  192,  191,  190,  189,  187,
      186,  185,  184,  183,  182,  180,  174,  173,  169,  168,
      161,  160,  159,  158,  151,  150,  148,  147,  146,  142,
      141,  140,  139,  138,  135,  134,  133,  132,  131,  129,
      128,  126,  124,  123,  122,  120,  119,  118,  116,  115,
      113,  112,  111,  110,  109,  108,  105,  104,  103,  102,
      101,  100,   99,   98,   97,   95,   94,   93,   92,   91,

       90,   89,   87,   86,   82,   78,   52,   38,   32,   22,
       18,   14,   12,   11,    7,    6,    5, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../src/glsl/glsl_lexer.ll"
#line 2 "../../../src/glsl/glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "util/strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_USER_ACTION						\
   do {								\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0; yylloc->source = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 void *mem_ctx = yyextra;					\
	 yylval->identifier = ralloc_strdup(mem_ctx, yytext);		\
	 return classify_identifier(yyextra, yytext);			\
      }									\
   } while (0)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
      digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->n = (int)value;

   if (value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

/* Note: When adding any start conditions to this list, you must also
* update the "Internal compiler error" catch-all rule near the end of
* this file. */

#line 1259 "glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_glsl_lexer_lex_init (yyscan_t* scanner);

int _mesa_glsl_lexer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_glsl_lexer_lex_destroy (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_debug (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_in (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_out (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t _mesa_glsl_lexer_get_leng (yyscan_t yyscanner );

char *_mesa_glsl_lexer_get_text (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_lineno (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lineno (int line_number ,yyscan_t yyscanner );

int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * _mesa_glsl_lexer_get_lval (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_glsl_lexer_get_lloc (yyscan_t yyscanner );
    
        void _mesa_glsl_lexer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#else
extern int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		}

	{
#line 169 "../../../src/glsl/glsl_lexer.ll"


#line 1539 "glsl_lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1043 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1042 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 171 "../../../src/glsl/glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 174 "../../../src/glsl/glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 176 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "../../../src/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;

				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 201 "../../../src/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 223 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 227 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 231 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 235 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 239 "../../../src/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 243 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 245 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 246 "../../../src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 248 "../../../src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 249 "../../../src/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 250 "../../../src/glsl/glsl_lexer.ll"
return COLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 251 "../../../src/glsl/glsl_lexer.ll"
{
				   void *mem_ctx = yyextra;
				   yylval->identifier = ralloc_strdup(mem_ctx, yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 256 "../../../src/glsl/glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 260 "../../../src/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 261 "../../../src/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 263 "../../../src/glsl/glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 265 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 266 "../../../src/glsl/glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 267 "../../../src/glsl/glsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 268 "../../../src/glsl/glsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 269 "../../../src/glsl/glsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 270 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UINT_TOK);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 272 "../../../src/glsl/glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 273 "../../../src/glsl/glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 274 "../../../src/glsl/glsl_lexer.ll"
return DO;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 275 "../../../src/glsl/glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 276 "../../../src/glsl/glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 277 "../../../src/glsl/glsl_lexer.ll"
return FOR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 278 "../../../src/glsl/glsl_lexer.ll"
return IF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 279 "../../../src/glsl/glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 280 "../../../src/glsl/glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 282 "../../../src/glsl/glsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 283 "../../../src/glsl/glsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 284 "../../../src/glsl/glsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 285 "../../../src/glsl/glsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 286 "../../../src/glsl/glsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 287 "../../../src/glsl/glsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC2);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 289 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC3);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 290 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC4);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 291 "../../../src/glsl/glsl_lexer.ll"
return VEC2;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 292 "../../../src/glsl/glsl_lexer.ll"
return VEC3;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 293 "../../../src/glsl/glsl_lexer.ll"
return VEC4;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 294 "../../../src/glsl/glsl_lexer.ll"
return MAT2X2;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 295 "../../../src/glsl/glsl_lexer.ll"
return MAT3X3;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 296 "../../../src/glsl/glsl_lexer.ll"
return MAT4X4;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 297 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X2);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 298 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X3);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 299 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT2X4);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 300 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X2);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 301 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X3);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 302 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT3X4);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 303 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X2);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 304 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X3);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 305 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, MAT4X4);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 307 "../../../src/glsl/glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 308 "../../../src/glsl/glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 309 "../../../src/glsl/glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 310 "../../../src/glsl/glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 311 "../../../src/glsl/glsl_lexer.ll"
return BUFFER;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 312 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 313 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 314 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 315 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 316 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 317 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 318 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 300, 400, 0, yyextra->ARB_tessellation_shader_enable, PATCH);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 320 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1D);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 321 "../../../src/glsl/glsl_lexer.ll"
return SAMPLER2D;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 322 "../../../src/glsl/glsl_lexer.ll"
return SAMPLER3D;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 323 "../../../src/glsl/glsl_lexer.ll"
return SAMPLERCUBE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 324 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAY);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 325 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAY);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 326 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1DSHADOW);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 327 "../../../src/glsl/glsl_lexer.ll"
return SAMPLER2DSHADOW;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 328 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLERCUBESHADOW);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 329 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAYSHADOW);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 330 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAYSHADOW);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 331 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1D);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 332 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2D);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 333 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER3D);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 334 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLERCUBE);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 335 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1DARRAY);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 336 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2DARRAY);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 337 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1D);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 338 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2D);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 339 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER3D);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 340 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLERCUBE);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 341 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1DARRAY);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 342 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2DARRAY);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
/* [iu]sampler2DMS are defined in GLSL ES 3.10 */
case 97:
YY_RULE_SETUP
#line 347 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, SAMPLER2DMS);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 348 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMS);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 349 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, USAMPLER2DMS);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 350 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMSARRAY);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 351 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMSARRAY);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 352 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMSARRAY);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 103:
YY_RULE_SETUP
#line 355 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAY);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 356 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, ISAMPLERCUBEARRAY);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 357 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, USAMPLERCUBEARRAY);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 358 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAYSHADOW);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 360 "../../../src/glsl/glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable)
			     return SAMPLEREXTERNALOES;
			  else
			     return IDENTIFIER;
		}
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 108:
YY_RULE_SETUP
#line 368 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 109:
YY_RULE_SETUP
#line 371 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1D);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 372 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2D);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 373 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE3D);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 374 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DRECT);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 375 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGECUBE);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 376 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGEBUFFER);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 377 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1DARRAY);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 378 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IMAGE2DARRAY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 379 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGECUBEARRAY);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 380 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMS);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 381 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMSARRAY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 382 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1D);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 383 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2D);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 384 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE3D);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 385 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DRECT);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 386 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBE);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 387 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGEBUFFER);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 388 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1DARRAY);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 389 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DARRAY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 390 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBEARRAY);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 391 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMS);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 392 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMSARRAY);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 393 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1D);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 394 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2D);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 395 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE3D);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 396 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DRECT);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 397 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBE);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 398 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGEBUFFER);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 399 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1DARRAY);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 400 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DARRAY);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 401 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBEARRAY);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 402 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMS);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 403 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMSARRAY);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 404 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 405 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 406 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 407 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 409 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, COHERENT);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 410 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 310, yyextra->ARB_shader_image_load_store_enable, VOLATILE);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 411 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, RESTRICT);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 412 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, READONLY);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 413 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, WRITEONLY);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 415 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_atomic_counters_enable, ATOMIC_UINT);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 417 "../../../src/glsl/glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 418 "../../../src/glsl/glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 420 "../../../src/glsl/glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable
                      || yyextra->ARB_tessellation_shader_enable) {
		      return LAYOUT_TOK;
		   } else {
		      void *mem_ctx = yyextra;
		      yylval->identifier = ralloc_strdup(mem_ctx, yytext);
		      return classify_identifier(yyextra, yytext);
		   }
		}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 440 "../../../src/glsl/glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 441 "../../../src/glsl/glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 442 "../../../src/glsl/glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 443 "../../../src/glsl/glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 444 "../../../src/glsl/glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 445 "../../../src/glsl/glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 446 "../../../src/glsl/glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 447 "../../../src/glsl/glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 448 "../../../src/glsl/glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 449 "../../../src/glsl/glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 450 "../../../src/glsl/glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 452 "../../../src/glsl/glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 453 "../../../src/glsl/glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 454 "../../../src/glsl/glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 455 "../../../src/glsl/glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 456 "../../../src/glsl/glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 457 "../../../src/glsl/glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 458 "../../../src/glsl/glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 459 "../../../src/glsl/glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 460 "../../../src/glsl/glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 461 "../../../src/glsl/glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 463 "../../../src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 466 "../../../src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 469 "../../../src/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 179:
#line 474 "../../../src/glsl/glsl_lexer.ll"
case 180:
#line 475 "../../../src/glsl/glsl_lexer.ll"
case 181:
#line 476 "../../../src/glsl/glsl_lexer.ll"
case 182:
YY_RULE_SETUP
#line 476 "../../../src/glsl/glsl_lexer.ll"
{
			    yylval->real = _mesa_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 183:
#line 482 "../../../src/glsl/glsl_lexer.ll"
case 184:
#line 483 "../../../src/glsl/glsl_lexer.ll"
case 185:
#line 484 "../../../src/glsl/glsl_lexer.ll"
case 186:
YY_RULE_SETUP
#line 484 "../../../src/glsl/glsl_lexer.ll"
{
			    if (!yyextra->is_version(400, 0) &&
			        !yyextra->ARB_gpu_shader_fp64_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return DOUBLECONSTANT;
			}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 492 "../../../src/glsl/glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 496 "../../../src/glsl/glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 189:
YY_RULE_SETUP
#line 503 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 504 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 505 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 506 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 507 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 508 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 509 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 510 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 511 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 512 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 513 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 514 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 515 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 516 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 517 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 518 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 519 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 520 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 521 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 522 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 523 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DOUBLE_TOK);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 524 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 525 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 526 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 527 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 528 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 529 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 530 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 531 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 532 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC2);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 533 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC3);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 534 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC4);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 535 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 536 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 537 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 538 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 539 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X3);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 540 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X4);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 541 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X2);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 542 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 543 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X4);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 544 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X2);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 545 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X3);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 546 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 547 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 548 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 549 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 550 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECT);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 551 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 552 "../../../src/glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECTSHADOW);
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 553 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 554 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 555 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 556 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 243:
YY_RULE_SETUP
#line 559 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 560 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 561 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 562 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 247:
YY_RULE_SETUP
#line 565 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 566 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 567 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 568 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 569 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 570 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 140, 0, SAMPLERBUFFER);
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 571 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 572 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 255:
YY_RULE_SETUP
#line 575 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLER2DRECT);
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 576 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLER2DRECT);
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 577 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLERBUFFER);
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 578 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLERBUFFER);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 259:
YY_RULE_SETUP
#line 581 "../../../src/glsl/glsl_lexer.ll"
KEYWORD(0, 300, 0, 0, RESOURCE);
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 582 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_gpu_shader5_enable, SAMPLE);
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 583 "../../../src/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_shader_subroutine_enable, SUBROUTINE);
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 586 "../../../src/glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    if (state->es_shader && strlen(yytext) > 1024) {
			       _mesa_glsl_error(yylloc, state,
			                        "Identifier `%s' exceeds 1024 characters",
			                        yytext);
			    } else {
			      yylval->identifier = ralloc_strdup(ctx, yytext);
			    }
			    return classify_identifier(state, yytext);
			}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 599 "../../../src/glsl/glsl_lexer.ll"
{ struct _mesa_glsl_parse_state *state = yyextra;
			  state->is_field = true;
			  return DOT_TOK; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 603 "../../../src/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 605 "../../../src/glsl/glsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3047 "glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_glsl_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_glsl_lexer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of _mesa_glsl_lexer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_glsl_lexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_glsl_lexer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_glsl_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1043 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1043 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1042);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_glsl_lexer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_glsl_lexer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_glsl_lexer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_glsl_lexer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_glsl_lexer_pop_buffer_state();
	 *		_mesa_glsl_lexer_push_buffer_state(new_buffer);
     */
	_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_glsl_lexer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_glsl_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_glsl_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_glsl_lexer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_glsl_lexer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_glsl_lexer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_glsl_lexer__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_glsl_lexer_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_glsl_lexer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_glsl_lexer_restart() or at EOF.
 */
    static void _mesa_glsl_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_glsl_lexer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_glsl_lexer__init_buffer was _probably_
     * called from _mesa_glsl_lexer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_glsl_lexer_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_glsl_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_glsl_lexer__switch_to_buffer. */
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_glsl_lexer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_glsl_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_glsl_lexer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_glsl_lexer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_glsl_lexer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_glsl_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t _mesa_glsl_lexer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_glsl_lexer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_glsl_lexer_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_glsl_lexer_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_glsl_lexer__switch_to_buffer
 */
void _mesa_glsl_lexer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_glsl_lexer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_glsl_lexer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_glsl_lexer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_glsl_lexer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_glsl_lexer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_glsl_lexer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_glsl_lexer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_glsl_lexer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_glsl_lexer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_glsl_lexer_lex_init_extra has the same functionality as _mesa_glsl_lexer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_glsl_lexer_alloc in
 * the yyextra field.
 */

int _mesa_glsl_lexer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_glsl_lexer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_glsl_lexer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_glsl_lexer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_glsl_lexer_lex_init()
     */
    return 0;
}

/* _mesa_glsl_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_glsl_lexer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_glsl_lexer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_glsl_lexer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_glsl_lexer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_glsl_lexer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_glsl_lexer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_glsl_lexer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_glsl_lexer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_glsl_lexer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_glsl_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 605 "../../../src/glsl/glsl_lexer.ll"



int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->is_field) {
      state->is_field = false;
      return FIELD_SELECTION;
   }
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_glsl_lexer_lex_init_extra(state,& state->scanner);
   _mesa_glsl_lexer__scan_string(string,state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_glsl_lexer_lex_destroy(state->scanner);
}

