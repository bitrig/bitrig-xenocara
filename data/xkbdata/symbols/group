// $XdotOrg$
// $XKeyboardConfig: xkbdesc/symbols/group,v 1.6 2004/09/16 00:11:27 svu Exp $
// $Xorg: group,v 1.3 2000/08/17 19:54:43 cpqbld Exp $
// using the group(switch) map, the right alt key temporarily chooses 
// the second keyboard group (until it is released).
//
// $XFree86: xc/programs/xkbcomp/symbols/group,v 3.9 2003/12/30 13:26:25 pascal Exp $
partial modifier_keys 
xkb_symbols "switch" {
    key <RALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
    };
};

// using the group(lswitch) map, the left alt key temporarily chooses
// the second keyboard group (until it is released).
//
partial modifier_keys 
xkb_symbols "lswitch" {
    key <LALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
    };
};


// using the group(win_switch) map, both Windows'logo keys temporarily
// choose the second keyboard group (until release).  If you use this
// map, you would declare you keyboard as pc101 or pc102 instead of
// pc104 or pc105.
partial modifier_keys
xkb_symbols "win_switch" {
  key <LWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
  key <RWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
};

// using the group(lwin_switch) map, the left Windows' logo key
// temporarily chooses the second keyboard group (until it is
// released).  If you use this map, you would declare you keyboard as
// pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "lwin_switch" {
  key <LWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
};

// using the group(rwin_switch) map, the right Windows' logo key
// temporarily chooses the second keyboard group (until it is
// released).  If you use this map, you would declare you keyboard as
// pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "rwin_switch" {
  key <RWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
    };
};

// Right Ctrl key temporary chooses the second keyboard group.
// Needed mainly for Canadian keyboard
partial modifier_keys
xkb_symbols "rctrl_switch" {
    key <RCTL>  {
        symbols[Group1]= [ Mode_switch ]
    };
};

// using the group(toggle) map, pressing the right alt key switches to
// the next sequential group (until the next explicit group change).
partial modifier_keys 
xkb_symbols "toggle" {
    virtual_modifiers AltGr;
    key <RALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// using the group(shifts_toggle) map, pressing both shift keys together
// locks the next or previous sequential keyboard group 
// (depending on which shift is pressed first - right or left, 
// correspongingly)
partial modifier_keys 
xkb_symbols "shifts_toggle" {
    key <LFSH>	{	[	Shift_L,	ISO_Prev_Group ]	};
    key <RTSH>	{	[	Shift_R,	ISO_Next_Group ]	};
};

// using the group(ctrl_shift_toggle) map, pressing:
//     Control_L+Shift_L locks the previous group
//     Control_R+Shift_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "ctrl_shift_toggle" {
    key <LFSH> {
	type="PC_BREAK",
	symbols[Group1]= [ Shift_L,	ISO_Prev_Group ]
    };
    key <RTSH> {
	type="PC_BREAK",
	symbols[Group1]= [ Shift_R,	ISO_Next_Group ]
    };
    key <LCTL>	{	[	Control_L,	ISO_Prev_Group ]	};
    key <RCTL>	{	[	Control_R,	ISO_Next_Group ]	};
};

// using the group(caps_toggle) map, pressing:
//     Caps Lock toggles groups
//     Shift+Caps Lock toggles caps lock
partial modifier_keys
xkb_symbols "caps_toggle" {
    include "capslock(grouplock)"
};

// using the group(shift_caps_toggle) map, pressing:
//     Shift+Caps Lock toggles group
partial modifier_keys
xkb_symbols "shift_caps_toggle" {
    key	<CAPS> {	[  Caps_Lock,		ISO_Next_Group	]	};
};

// using the group(ctrl_alt_toggle) map, pressing:
//     Control_L+Alt_L locks the previous group
//     Control_R+Alt_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "ctrl_alt_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
    key <LCTL> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Control_L,	ISO_Prev_Group ]
    };
    key <RCTL> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Control_R,	ISO_Next_Group ]
    };
};

// using the group(alt_shift_toggle) map, pressing:
//     Shift_L+Alt_L locks the previous group
//     Shift_R+Alt_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "alt_shift_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
    key <LFSH> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Shift_L,	ISO_Prev_Group ]
    };
    key <RTSH> {
	type="PC_SYSRQ",
	symbols[Group1]= [ Shift_R,	ISO_Next_Group ]
    };
};

// using the group(menu_toggle) map, pressing:
//     Menu key toggles groups
//     Shift+Menu acts as Menu
partial modifier_keys
xkb_symbols "menu_toggle" {
    key	<MENU> {	[  ISO_Next_Group,	 Menu	]	};
};

// using the group(lwin_toggle) map, pressing the left Windows' logo key
// toggles groups.  If you use this map, you would declare you keyboard
// as pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "lwin_toggle" {
  virtual_modifiers AltGr;
  key <LWIN> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
    };
};

// using the group(rwin_toggle) map, pressing the right Windows' logo key
// toggles groups.  If you use this map, you would declare you keyboard
// as pc101 or pc102 instead of pc104 or pc105.
partial modifier_keys
xkb_symbols "rwin_toggle" {
  virtual_modifiers AltGr;
  key <RWIN> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Both Ctrls pressed together toggle group
partial modifier_keys
xkb_symbols "ctrls_toggle" {
  virtual_modifiers AltGr;
    key <LCTL> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ]
    };
    key <RCTL> {
	type="PC_BREAK",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ]
    };
};

// Both Alts pressed together toggle group
partial modifier_keys
xkb_symbols "alts_toggle" {
  virtual_modifiers AltGr;
    key <LALT> {
	type="PC_SYSRQ",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
    };
    key <RALT> {
	type="PC_SYSRQ",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
    };
};

// Left Shift key toggles group
partial modifier_keys
xkb_symbols "lshift_toggle" {
  virtual_modifiers AltGr;
    key <LFSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Right Shift key toggles group
partial modifier_keys
xkb_symbols "rshift_toggle" {
  virtual_modifiers AltGr;
    key <RTSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Left Alt key toggles group
partial modifier_keys
xkb_symbols "lalt_toggle" {
  virtual_modifiers AltGr;
    key <LALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Left Ctrl key toggles group
partial modifier_keys
xkb_symbols "lctrl_toggle" {
  virtual_modifiers AltGr;
    key <LCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};

// Right Ctrl key toggles group
partial modifier_keys
xkb_symbols "rctrl_toggle" {
  virtual_modifiers AltGr;
    key <RCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
    };
};
